// Code generated by ogen, DO NOT EDIT.

package v1

import (
	"net/netip"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

// NoSQLの利用可能状態
// | 値        | 説明       |
// |-----------|------------|
// | migrating | 準備中     |
// | available | 利用可能   |
// | failed    | 利用不可   |.
// Ref: #/components/schemas/Availability
type Availability string

const (
	AvailabilityMigrating Availability = "migrating"
	AvailabilityAvailable Availability = "available"
	AvailabilityFailed    Availability = "failed"
)

// AllValues returns all Availability values.
func (Availability) AllValues() []Availability {
	return []Availability{
		AvailabilityMigrating,
		AvailabilityAvailable,
		AvailabilityFailed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Availability) MarshalText() ([]byte, error) {
	switch s {
	case AvailabilityMigrating:
		return []byte(s), nil
	case AvailabilityAvailable:
		return []byte(s), nil
	case AvailabilityFailed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Availability) UnmarshalText(data []byte) error {
	switch Availability(data) {
	case AvailabilityMigrating:
		*s = AvailabilityMigrating
		return nil
	case AvailabilityAvailable:
		*s = AvailabilityAvailable
		return nil
	case AvailabilityFailed:
		*s = AvailabilityFailed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// エラーレスポンス.
type BadRequestResponse struct {
	// エラーのレスポンス(true:エラー).
	IsFatal OptBool `json:"is_fatal"`
	// 追跡コード.
	Serial OptString `json:"serial"`
	// ステータス.
	Status OptString `json:"status"`
	// エラーコード.
	ErrorCode OptString `json:"error_code"`
	// エラーメッセージ.
	ErrorMsg OptString `json:"error_msg"`
}

// GetIsFatal returns the value of IsFatal.
func (s *BadRequestResponse) GetIsFatal() OptBool {
	return s.IsFatal
}

// GetSerial returns the value of Serial.
func (s *BadRequestResponse) GetSerial() OptString {
	return s.Serial
}

// GetStatus returns the value of Status.
func (s *BadRequestResponse) GetStatus() OptString {
	return s.Status
}

// GetErrorCode returns the value of ErrorCode.
func (s *BadRequestResponse) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetErrorMsg returns the value of ErrorMsg.
func (s *BadRequestResponse) GetErrorMsg() OptString {
	return s.ErrorMsg
}

// SetIsFatal sets the value of IsFatal.
func (s *BadRequestResponse) SetIsFatal(val OptBool) {
	s.IsFatal = val
}

// SetSerial sets the value of Serial.
func (s *BadRequestResponse) SetSerial(val OptString) {
	s.Serial = val
}

// SetStatus sets the value of Status.
func (s *BadRequestResponse) SetStatus(val OptString) {
	s.Status = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *BadRequestResponse) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetErrorMsg sets the value of ErrorMsg.
func (s *BadRequestResponse) SetErrorMsg(val OptString) {
	s.ErrorMsg = val
}

func (*BadRequestResponse) confirmStatusDBRes()        {}
func (*BadRequestResponse) createBackupRes()           {}
func (*BadRequestResponse) createDBRes()               {}
func (*BadRequestResponse) deleteAppliancePowerRes()   {}
func (*BadRequestResponse) deleteBackupRes()           {}
func (*BadRequestResponse) deleteDBRes()               {}
func (*BadRequestResponse) getBackupByApplianceIDRes() {}
func (*BadRequestResponse) getDBRes()                  {}
func (*BadRequestResponse) getNoSQLNodeHealthRes()     {}
func (*BadRequestResponse) getParameterRes()           {}
func (*BadRequestResponse) getVersionRes()             {}
func (*BadRequestResponse) listDBRes()                 {}
func (*BadRequestResponse) postNoSQLRepairRes()        {}
func (*BadRequestResponse) putAppliancePowerRes()      {}
func (*BadRequestResponse) putParameterRes()           {}
func (*BadRequestResponse) putVersionRes()             {}
func (*BadRequestResponse) recoverNoSQLNodeRes()       {}
func (*BadRequestResponse) restoreBackupRes()          {}
func (*BadRequestResponse) updateConfigDBRes()         {}
func (*BadRequestResponse) updateDBRes()               {}

// エラーレスポンス.
// Ref: #/components/schemas/ConflictErrorResponse
type ConflictErrorResponse struct {
	// エラーのレスポンス(true:エラー).
	IsFatal OptBool `json:"is_fatal"`
	// 追跡コード.
	Serial OptString `json:"serial"`
	// ステータス.
	Status OptString `json:"status"`
	// エラーコード.
	ErrorCode OptString `json:"error_code"`
	// エラーメッセージ.
	ErrorMsg OptString `json:"error_msg"`
}

// GetIsFatal returns the value of IsFatal.
func (s *ConflictErrorResponse) GetIsFatal() OptBool {
	return s.IsFatal
}

// GetSerial returns the value of Serial.
func (s *ConflictErrorResponse) GetSerial() OptString {
	return s.Serial
}

// GetStatus returns the value of Status.
func (s *ConflictErrorResponse) GetStatus() OptString {
	return s.Status
}

// GetErrorCode returns the value of ErrorCode.
func (s *ConflictErrorResponse) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetErrorMsg returns the value of ErrorMsg.
func (s *ConflictErrorResponse) GetErrorMsg() OptString {
	return s.ErrorMsg
}

// SetIsFatal sets the value of IsFatal.
func (s *ConflictErrorResponse) SetIsFatal(val OptBool) {
	s.IsFatal = val
}

// SetSerial sets the value of Serial.
func (s *ConflictErrorResponse) SetSerial(val OptString) {
	s.Serial = val
}

// SetStatus sets the value of Status.
func (s *ConflictErrorResponse) SetStatus(val OptString) {
	s.Status = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ConflictErrorResponse) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetErrorMsg sets the value of ErrorMsg.
func (s *ConflictErrorResponse) SetErrorMsg(val OptString) {
	s.ErrorMsg = val
}

func (*ConflictErrorResponse) createBackupRes()         {}
func (*ConflictErrorResponse) createDBRes()             {}
func (*ConflictErrorResponse) deleteAppliancePowerRes() {}
func (*ConflictErrorResponse) deleteBackupRes()         {}
func (*ConflictErrorResponse) deleteDBRes()             {}
func (*ConflictErrorResponse) postNoSQLRepairRes()      {}
func (*ConflictErrorResponse) putAppliancePowerRes()    {}
func (*ConflictErrorResponse) putParameterRes()         {}
func (*ConflictErrorResponse) putVersionRes()           {}
func (*ConflictErrorResponse) recoverNoSQLNodeRes()     {}
func (*ConflictErrorResponse) restoreBackupRes()        {}
func (*ConflictErrorResponse) updateDBRes()             {}

// Merged schema.
// Ref: #/components/schemas/GetNosqlAppliance
type GetNosqlAppliance struct {
	// クラス.
	Class OptString `json:"Class"`
	// NoSQLの名前.
	Name OptString `json:"Name"`
	// NoSQLの説明.
	Description OptString  `json:"Description"`
	Tags        OptNilTags `json:"Tags"`
	// アプライアンスID.
	ID           OptString                  `json:"ID"`
	Plan         OptGetPlan                 `json:"Plan"`
	Settings     OptGetNosqlSettings        `json:"Settings"`
	SettingsHash OptString                  `json:"SettingsHash"`
	Remark       OptGetNosqlApplianceRemark `json:"Remark"`
	Availability OptAvailability            `json:"Availability"`
	Instance     OptInstance                `json:"Instance"`
	// ディスク情報.
	Disk         OptNilGetNosqlApplianceDisk       `json:"Disk"`
	ServiceClass OptGetServiceClass                `json:"ServiceClass"`
	Generation   OptInt                            `json:"Generation"`
	CreatedAt    OptDateTime                       `json:"CreatedAt"`
	Interfaces   []GetNosqlApplianceInterfacesItem `json:"Interfaces"`
}

// GetClass returns the value of Class.
func (s *GetNosqlAppliance) GetClass() OptString {
	return s.Class
}

// GetName returns the value of Name.
func (s *GetNosqlAppliance) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *GetNosqlAppliance) GetDescription() OptString {
	return s.Description
}

// GetTags returns the value of Tags.
func (s *GetNosqlAppliance) GetTags() OptNilTags {
	return s.Tags
}

// GetID returns the value of ID.
func (s *GetNosqlAppliance) GetID() OptString {
	return s.ID
}

// GetPlan returns the value of Plan.
func (s *GetNosqlAppliance) GetPlan() OptGetPlan {
	return s.Plan
}

// GetSettings returns the value of Settings.
func (s *GetNosqlAppliance) GetSettings() OptGetNosqlSettings {
	return s.Settings
}

// GetSettingsHash returns the value of SettingsHash.
func (s *GetNosqlAppliance) GetSettingsHash() OptString {
	return s.SettingsHash
}

// GetRemark returns the value of Remark.
func (s *GetNosqlAppliance) GetRemark() OptGetNosqlApplianceRemark {
	return s.Remark
}

// GetAvailability returns the value of Availability.
func (s *GetNosqlAppliance) GetAvailability() OptAvailability {
	return s.Availability
}

// GetInstance returns the value of Instance.
func (s *GetNosqlAppliance) GetInstance() OptInstance {
	return s.Instance
}

// GetDisk returns the value of Disk.
func (s *GetNosqlAppliance) GetDisk() OptNilGetNosqlApplianceDisk {
	return s.Disk
}

// GetServiceClass returns the value of ServiceClass.
func (s *GetNosqlAppliance) GetServiceClass() OptGetServiceClass {
	return s.ServiceClass
}

// GetGeneration returns the value of Generation.
func (s *GetNosqlAppliance) GetGeneration() OptInt {
	return s.Generation
}

// GetCreatedAt returns the value of CreatedAt.
func (s *GetNosqlAppliance) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetInterfaces returns the value of Interfaces.
func (s *GetNosqlAppliance) GetInterfaces() []GetNosqlApplianceInterfacesItem {
	return s.Interfaces
}

// SetClass sets the value of Class.
func (s *GetNosqlAppliance) SetClass(val OptString) {
	s.Class = val
}

// SetName sets the value of Name.
func (s *GetNosqlAppliance) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *GetNosqlAppliance) SetDescription(val OptString) {
	s.Description = val
}

// SetTags sets the value of Tags.
func (s *GetNosqlAppliance) SetTags(val OptNilTags) {
	s.Tags = val
}

// SetID sets the value of ID.
func (s *GetNosqlAppliance) SetID(val OptString) {
	s.ID = val
}

// SetPlan sets the value of Plan.
func (s *GetNosqlAppliance) SetPlan(val OptGetPlan) {
	s.Plan = val
}

// SetSettings sets the value of Settings.
func (s *GetNosqlAppliance) SetSettings(val OptGetNosqlSettings) {
	s.Settings = val
}

// SetSettingsHash sets the value of SettingsHash.
func (s *GetNosqlAppliance) SetSettingsHash(val OptString) {
	s.SettingsHash = val
}

// SetRemark sets the value of Remark.
func (s *GetNosqlAppliance) SetRemark(val OptGetNosqlApplianceRemark) {
	s.Remark = val
}

// SetAvailability sets the value of Availability.
func (s *GetNosqlAppliance) SetAvailability(val OptAvailability) {
	s.Availability = val
}

// SetInstance sets the value of Instance.
func (s *GetNosqlAppliance) SetInstance(val OptInstance) {
	s.Instance = val
}

// SetDisk sets the value of Disk.
func (s *GetNosqlAppliance) SetDisk(val OptNilGetNosqlApplianceDisk) {
	s.Disk = val
}

// SetServiceClass sets the value of ServiceClass.
func (s *GetNosqlAppliance) SetServiceClass(val OptGetServiceClass) {
	s.ServiceClass = val
}

// SetGeneration sets the value of Generation.
func (s *GetNosqlAppliance) SetGeneration(val OptInt) {
	s.Generation = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *GetNosqlAppliance) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetInterfaces sets the value of Interfaces.
func (s *GetNosqlAppliance) SetInterfaces(val []GetNosqlApplianceInterfacesItem) {
	s.Interfaces = val
}

// ディスク情報.
type GetNosqlApplianceDisk struct {
	// 暗号化キー情報.
	EncryptionKey OptNilGetNosqlApplianceDiskEncryptionKey `json:"EncryptionKey"`
	// 暗号化アルゴリズム.
	EncryptionAlgorithm OptString `json:"EncryptionAlgorithm"`
}

// GetEncryptionKey returns the value of EncryptionKey.
func (s *GetNosqlApplianceDisk) GetEncryptionKey() OptNilGetNosqlApplianceDiskEncryptionKey {
	return s.EncryptionKey
}

// GetEncryptionAlgorithm returns the value of EncryptionAlgorithm.
func (s *GetNosqlApplianceDisk) GetEncryptionAlgorithm() OptString {
	return s.EncryptionAlgorithm
}

// SetEncryptionKey sets the value of EncryptionKey.
func (s *GetNosqlApplianceDisk) SetEncryptionKey(val OptNilGetNosqlApplianceDiskEncryptionKey) {
	s.EncryptionKey = val
}

// SetEncryptionAlgorithm sets the value of EncryptionAlgorithm.
func (s *GetNosqlApplianceDisk) SetEncryptionAlgorithm(val OptString) {
	s.EncryptionAlgorithm = val
}

// 暗号化キー情報.
type GetNosqlApplianceDiskEncryptionKey struct {
	// KMSキーID.
	KMSKeyID OptString `json:"KMSKeyID"`
}

// GetKMSKeyID returns the value of KMSKeyID.
func (s *GetNosqlApplianceDiskEncryptionKey) GetKMSKeyID() OptString {
	return s.KMSKeyID
}

// SetKMSKeyID sets the value of KMSKeyID.
func (s *GetNosqlApplianceDiskEncryptionKey) SetKMSKeyID(val OptString) {
	s.KMSKeyID = val
}

type GetNosqlApplianceInterfacesItem struct {
	// IPアドレス.
	IPAddress OptNilString `json:"IPAddress"`
	// ユーザ側スイッチに接続するIPアドレス.
	UserIPAddress OptNilString `json:"UserIPAddress"`
	// ホスト名.
	HostName OptNilString `json:"HostName"`
	// スイッチ情報.
	Switch OptGetNosqlApplianceInterfacesItemSwitch `json:"Switch"`
}

// GetIPAddress returns the value of IPAddress.
func (s *GetNosqlApplianceInterfacesItem) GetIPAddress() OptNilString {
	return s.IPAddress
}

// GetUserIPAddress returns the value of UserIPAddress.
func (s *GetNosqlApplianceInterfacesItem) GetUserIPAddress() OptNilString {
	return s.UserIPAddress
}

// GetHostName returns the value of HostName.
func (s *GetNosqlApplianceInterfacesItem) GetHostName() OptNilString {
	return s.HostName
}

// GetSwitch returns the value of Switch.
func (s *GetNosqlApplianceInterfacesItem) GetSwitch() OptGetNosqlApplianceInterfacesItemSwitch {
	return s.Switch
}

// SetIPAddress sets the value of IPAddress.
func (s *GetNosqlApplianceInterfacesItem) SetIPAddress(val OptNilString) {
	s.IPAddress = val
}

// SetUserIPAddress sets the value of UserIPAddress.
func (s *GetNosqlApplianceInterfacesItem) SetUserIPAddress(val OptNilString) {
	s.UserIPAddress = val
}

// SetHostName sets the value of HostName.
func (s *GetNosqlApplianceInterfacesItem) SetHostName(val OptNilString) {
	s.HostName = val
}

// SetSwitch sets the value of Switch.
func (s *GetNosqlApplianceInterfacesItem) SetSwitch(val OptGetNosqlApplianceInterfacesItemSwitch) {
	s.Switch = val
}

// スイッチ情報.
type GetNosqlApplianceInterfacesItemSwitch struct {
	// スイッチID.
	ID OptString `json:"ID"`
	// スイッチ名.
	Name OptString `json:"name"`
	// スコープ(shared/user).
	Scope OptString `json:"Scope"`
	// サブネット情報.
	Subnet OptNilGetNosqlApplianceInterfacesItemSwitchSubnet `json:"Subnet"`
	// ユーザサブネット情報.
	UserSubnet OptNilGetNosqlApplianceInterfacesItemSwitchUserSubnet `json:"UserSubnet"`
}

// GetID returns the value of ID.
func (s *GetNosqlApplianceInterfacesItemSwitch) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *GetNosqlApplianceInterfacesItemSwitch) GetName() OptString {
	return s.Name
}

// GetScope returns the value of Scope.
func (s *GetNosqlApplianceInterfacesItemSwitch) GetScope() OptString {
	return s.Scope
}

// GetSubnet returns the value of Subnet.
func (s *GetNosqlApplianceInterfacesItemSwitch) GetSubnet() OptNilGetNosqlApplianceInterfacesItemSwitchSubnet {
	return s.Subnet
}

// GetUserSubnet returns the value of UserSubnet.
func (s *GetNosqlApplianceInterfacesItemSwitch) GetUserSubnet() OptNilGetNosqlApplianceInterfacesItemSwitchUserSubnet {
	return s.UserSubnet
}

// SetID sets the value of ID.
func (s *GetNosqlApplianceInterfacesItemSwitch) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *GetNosqlApplianceInterfacesItemSwitch) SetName(val OptString) {
	s.Name = val
}

// SetScope sets the value of Scope.
func (s *GetNosqlApplianceInterfacesItemSwitch) SetScope(val OptString) {
	s.Scope = val
}

// SetSubnet sets the value of Subnet.
func (s *GetNosqlApplianceInterfacesItemSwitch) SetSubnet(val OptNilGetNosqlApplianceInterfacesItemSwitchSubnet) {
	s.Subnet = val
}

// SetUserSubnet sets the value of UserSubnet.
func (s *GetNosqlApplianceInterfacesItemSwitch) SetUserSubnet(val OptNilGetNosqlApplianceInterfacesItemSwitchUserSubnet) {
	s.UserSubnet = val
}

// サブネット情報.
type GetNosqlApplianceInterfacesItemSwitchSubnet struct {
	// ネットワークアドレス.
	NetworkAddress OptString `json:"NetworkAddress"`
	// ネットマスク.
	NetworkMaskLen OptInt `json:"NetworkMaskLen"`
	// ゲートウェイのアドレス.
	DefaultRoute OptNilString                                           `json:"DefaultRoute"`
	Internet     OptGetNosqlApplianceInterfacesItemSwitchSubnetInternet `json:"Internet"`
}

// GetNetworkAddress returns the value of NetworkAddress.
func (s *GetNosqlApplianceInterfacesItemSwitchSubnet) GetNetworkAddress() OptString {
	return s.NetworkAddress
}

// GetNetworkMaskLen returns the value of NetworkMaskLen.
func (s *GetNosqlApplianceInterfacesItemSwitchSubnet) GetNetworkMaskLen() OptInt {
	return s.NetworkMaskLen
}

// GetDefaultRoute returns the value of DefaultRoute.
func (s *GetNosqlApplianceInterfacesItemSwitchSubnet) GetDefaultRoute() OptNilString {
	return s.DefaultRoute
}

// GetInternet returns the value of Internet.
func (s *GetNosqlApplianceInterfacesItemSwitchSubnet) GetInternet() OptGetNosqlApplianceInterfacesItemSwitchSubnetInternet {
	return s.Internet
}

// SetNetworkAddress sets the value of NetworkAddress.
func (s *GetNosqlApplianceInterfacesItemSwitchSubnet) SetNetworkAddress(val OptString) {
	s.NetworkAddress = val
}

// SetNetworkMaskLen sets the value of NetworkMaskLen.
func (s *GetNosqlApplianceInterfacesItemSwitchSubnet) SetNetworkMaskLen(val OptInt) {
	s.NetworkMaskLen = val
}

// SetDefaultRoute sets the value of DefaultRoute.
func (s *GetNosqlApplianceInterfacesItemSwitchSubnet) SetDefaultRoute(val OptNilString) {
	s.DefaultRoute = val
}

// SetInternet sets the value of Internet.
func (s *GetNosqlApplianceInterfacesItemSwitchSubnet) SetInternet(val OptGetNosqlApplianceInterfacesItemSwitchSubnetInternet) {
	s.Internet = val
}

type GetNosqlApplianceInterfacesItemSwitchSubnetInternet struct {
	BandWidthMbps OptInt `json:"BandWidthMbps"`
}

// GetBandWidthMbps returns the value of BandWidthMbps.
func (s *GetNosqlApplianceInterfacesItemSwitchSubnetInternet) GetBandWidthMbps() OptInt {
	return s.BandWidthMbps
}

// SetBandWidthMbps sets the value of BandWidthMbps.
func (s *GetNosqlApplianceInterfacesItemSwitchSubnetInternet) SetBandWidthMbps(val OptInt) {
	s.BandWidthMbps = val
}

// ユーザサブネット情報.
type GetNosqlApplianceInterfacesItemSwitchUserSubnet struct {
	// ゲートウェイのアドレス.
	DefaultRoute OptNilString `json:"DefaultRoute"`
	// ネットマスク.
	NetworkMaskLen OptInt `json:"NetworkMaskLen"`
}

// GetDefaultRoute returns the value of DefaultRoute.
func (s *GetNosqlApplianceInterfacesItemSwitchUserSubnet) GetDefaultRoute() OptNilString {
	return s.DefaultRoute
}

// GetNetworkMaskLen returns the value of NetworkMaskLen.
func (s *GetNosqlApplianceInterfacesItemSwitchUserSubnet) GetNetworkMaskLen() OptInt {
	return s.NetworkMaskLen
}

// SetDefaultRoute sets the value of DefaultRoute.
func (s *GetNosqlApplianceInterfacesItemSwitchUserSubnet) SetDefaultRoute(val OptNilString) {
	s.DefaultRoute = val
}

// SetNetworkMaskLen sets the value of NetworkMaskLen.
func (s *GetNosqlApplianceInterfacesItemSwitchUserSubnet) SetNetworkMaskLen(val OptInt) {
	s.NetworkMaskLen = val
}

// Merged schema.
type GetNosqlApplianceRemark struct {
	Nosql   OptGetNosqlApplianceRemarkNosql      `json:"Nosql"`
	Servers []GetNosqlApplianceRemarkServersItem `json:"Servers"`
	// ゾーン.
	Zone OptGetNosqlApplianceRemarkZone `json:"Zone"`
	// サービスクラス.
	ServiceClass OptString `json:"ServiceClass"`
}

// GetNosql returns the value of Nosql.
func (s *GetNosqlApplianceRemark) GetNosql() OptGetNosqlApplianceRemarkNosql {
	return s.Nosql
}

// GetServers returns the value of Servers.
func (s *GetNosqlApplianceRemark) GetServers() []GetNosqlApplianceRemarkServersItem {
	return s.Servers
}

// GetZone returns the value of Zone.
func (s *GetNosqlApplianceRemark) GetZone() OptGetNosqlApplianceRemarkZone {
	return s.Zone
}

// GetServiceClass returns the value of ServiceClass.
func (s *GetNosqlApplianceRemark) GetServiceClass() OptString {
	return s.ServiceClass
}

// SetNosql sets the value of Nosql.
func (s *GetNosqlApplianceRemark) SetNosql(val OptGetNosqlApplianceRemarkNosql) {
	s.Nosql = val
}

// SetServers sets the value of Servers.
func (s *GetNosqlApplianceRemark) SetServers(val []GetNosqlApplianceRemarkServersItem) {
	s.Servers = val
}

// SetZone sets the value of Zone.
func (s *GetNosqlApplianceRemark) SetZone(val OptGetNosqlApplianceRemarkZone) {
	s.Zone = val
}

// SetServiceClass sets the value of ServiceClass.
func (s *GetNosqlApplianceRemark) SetServiceClass(val OptString) {
	s.ServiceClass = val
}

type GetNosqlApplianceRemarkNosql struct {
	// プライマリノード情報.
	PrimaryNodes OptGetNosqlApplianceRemarkNosqlPrimaryNodes `json:"PrimaryNodes"`
	// データベースに使用するエンジン.
	DatabaseEngine OptGetNosqlApplianceRemarkNosqlDatabaseEngine `json:"DatabaseEngine"`
	// データベースバージョン.
	DatabaseVersion OptString `json:"DatabaseVersion"`
	// デフォルトユーザ名.
	DefaultUser OptString `json:"DefaultUser"`
	// ディスクサイズ(MB).
	DiskSize OptGetNosqlApplianceRemarkNosqlDiskSize `json:"DiskSize"`
	// メモリ(MB).
	Memory OptGetNosqlApplianceRemarkNosqlMemory `json:"Memory"`
	// ノード数.
	Nodes OptInt `json:"Nodes"`
	// ポート.
	Port OptInt `json:"Port"`
	// ストレージ.
	Storage OptGetNosqlApplianceRemarkNosqlStorage `json:"Storage"`
	// 仮想コア.
	Virtualcore OptGetNosqlApplianceRemarkNosqlVirtualcore `json:"Virtualcore"`
	// ゾーン.
	Zone OptString `json:"Zone"`
}

// GetPrimaryNodes returns the value of PrimaryNodes.
func (s *GetNosqlApplianceRemarkNosql) GetPrimaryNodes() OptGetNosqlApplianceRemarkNosqlPrimaryNodes {
	return s.PrimaryNodes
}

// GetDatabaseEngine returns the value of DatabaseEngine.
func (s *GetNosqlApplianceRemarkNosql) GetDatabaseEngine() OptGetNosqlApplianceRemarkNosqlDatabaseEngine {
	return s.DatabaseEngine
}

// GetDatabaseVersion returns the value of DatabaseVersion.
func (s *GetNosqlApplianceRemarkNosql) GetDatabaseVersion() OptString {
	return s.DatabaseVersion
}

// GetDefaultUser returns the value of DefaultUser.
func (s *GetNosqlApplianceRemarkNosql) GetDefaultUser() OptString {
	return s.DefaultUser
}

// GetDiskSize returns the value of DiskSize.
func (s *GetNosqlApplianceRemarkNosql) GetDiskSize() OptGetNosqlApplianceRemarkNosqlDiskSize {
	return s.DiskSize
}

// GetMemory returns the value of Memory.
func (s *GetNosqlApplianceRemarkNosql) GetMemory() OptGetNosqlApplianceRemarkNosqlMemory {
	return s.Memory
}

// GetNodes returns the value of Nodes.
func (s *GetNosqlApplianceRemarkNosql) GetNodes() OptInt {
	return s.Nodes
}

// GetPort returns the value of Port.
func (s *GetNosqlApplianceRemarkNosql) GetPort() OptInt {
	return s.Port
}

// GetStorage returns the value of Storage.
func (s *GetNosqlApplianceRemarkNosql) GetStorage() OptGetNosqlApplianceRemarkNosqlStorage {
	return s.Storage
}

// GetVirtualcore returns the value of Virtualcore.
func (s *GetNosqlApplianceRemarkNosql) GetVirtualcore() OptGetNosqlApplianceRemarkNosqlVirtualcore {
	return s.Virtualcore
}

// GetZone returns the value of Zone.
func (s *GetNosqlApplianceRemarkNosql) GetZone() OptString {
	return s.Zone
}

// SetPrimaryNodes sets the value of PrimaryNodes.
func (s *GetNosqlApplianceRemarkNosql) SetPrimaryNodes(val OptGetNosqlApplianceRemarkNosqlPrimaryNodes) {
	s.PrimaryNodes = val
}

// SetDatabaseEngine sets the value of DatabaseEngine.
func (s *GetNosqlApplianceRemarkNosql) SetDatabaseEngine(val OptGetNosqlApplianceRemarkNosqlDatabaseEngine) {
	s.DatabaseEngine = val
}

// SetDatabaseVersion sets the value of DatabaseVersion.
func (s *GetNosqlApplianceRemarkNosql) SetDatabaseVersion(val OptString) {
	s.DatabaseVersion = val
}

// SetDefaultUser sets the value of DefaultUser.
func (s *GetNosqlApplianceRemarkNosql) SetDefaultUser(val OptString) {
	s.DefaultUser = val
}

// SetDiskSize sets the value of DiskSize.
func (s *GetNosqlApplianceRemarkNosql) SetDiskSize(val OptGetNosqlApplianceRemarkNosqlDiskSize) {
	s.DiskSize = val
}

// SetMemory sets the value of Memory.
func (s *GetNosqlApplianceRemarkNosql) SetMemory(val OptGetNosqlApplianceRemarkNosqlMemory) {
	s.Memory = val
}

// SetNodes sets the value of Nodes.
func (s *GetNosqlApplianceRemarkNosql) SetNodes(val OptInt) {
	s.Nodes = val
}

// SetPort sets the value of Port.
func (s *GetNosqlApplianceRemarkNosql) SetPort(val OptInt) {
	s.Port = val
}

// SetStorage sets the value of Storage.
func (s *GetNosqlApplianceRemarkNosql) SetStorage(val OptGetNosqlApplianceRemarkNosqlStorage) {
	s.Storage = val
}

// SetVirtualcore sets the value of Virtualcore.
func (s *GetNosqlApplianceRemarkNosql) SetVirtualcore(val OptGetNosqlApplianceRemarkNosqlVirtualcore) {
	s.Virtualcore = val
}

// SetZone sets the value of Zone.
func (s *GetNosqlApplianceRemarkNosql) SetZone(val OptString) {
	s.Zone = val
}

// データベースに使用するエンジン.
type GetNosqlApplianceRemarkNosqlDatabaseEngine string

const (
	GetNosqlApplianceRemarkNosqlDatabaseEngineCassandra GetNosqlApplianceRemarkNosqlDatabaseEngine = "Cassandra"
)

// AllValues returns all GetNosqlApplianceRemarkNosqlDatabaseEngine values.
func (GetNosqlApplianceRemarkNosqlDatabaseEngine) AllValues() []GetNosqlApplianceRemarkNosqlDatabaseEngine {
	return []GetNosqlApplianceRemarkNosqlDatabaseEngine{
		GetNosqlApplianceRemarkNosqlDatabaseEngineCassandra,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetNosqlApplianceRemarkNosqlDatabaseEngine) MarshalText() ([]byte, error) {
	switch s {
	case GetNosqlApplianceRemarkNosqlDatabaseEngineCassandra:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetNosqlApplianceRemarkNosqlDatabaseEngine) UnmarshalText(data []byte) error {
	switch GetNosqlApplianceRemarkNosqlDatabaseEngine(data) {
	case GetNosqlApplianceRemarkNosqlDatabaseEngineCassandra:
		*s = GetNosqlApplianceRemarkNosqlDatabaseEngineCassandra
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ディスクサイズ(MB).
type GetNosqlApplianceRemarkNosqlDiskSize int

const (
	GetNosqlApplianceRemarkNosqlDiskSize102400 GetNosqlApplianceRemarkNosqlDiskSize = 102400
)

// AllValues returns all GetNosqlApplianceRemarkNosqlDiskSize values.
func (GetNosqlApplianceRemarkNosqlDiskSize) AllValues() []GetNosqlApplianceRemarkNosqlDiskSize {
	return []GetNosqlApplianceRemarkNosqlDiskSize{
		GetNosqlApplianceRemarkNosqlDiskSize102400,
	}
}

// メモリ(MB).
type GetNosqlApplianceRemarkNosqlMemory int

const (
	GetNosqlApplianceRemarkNosqlMemory8192 GetNosqlApplianceRemarkNosqlMemory = 8192
)

// AllValues returns all GetNosqlApplianceRemarkNosqlMemory values.
func (GetNosqlApplianceRemarkNosqlMemory) AllValues() []GetNosqlApplianceRemarkNosqlMemory {
	return []GetNosqlApplianceRemarkNosqlMemory{
		GetNosqlApplianceRemarkNosqlMemory8192,
	}
}

// プライマリノード情報.
type GetNosqlApplianceRemarkNosqlPrimaryNodes struct {
	// 既存のNoSQLのアプライアンス情報.
	Appliance OptGetNosqlApplianceRemarkNosqlPrimaryNodesAppliance `json:"Appliance"`
}

// GetAppliance returns the value of Appliance.
func (s *GetNosqlApplianceRemarkNosqlPrimaryNodes) GetAppliance() OptGetNosqlApplianceRemarkNosqlPrimaryNodesAppliance {
	return s.Appliance
}

// SetAppliance sets the value of Appliance.
func (s *GetNosqlApplianceRemarkNosqlPrimaryNodes) SetAppliance(val OptGetNosqlApplianceRemarkNosqlPrimaryNodesAppliance) {
	s.Appliance = val
}

// 既存のNoSQLのアプライアンス情報.
type GetNosqlApplianceRemarkNosqlPrimaryNodesAppliance struct {
	// 既存のNoSQLのアプライアンスID.
	ID OptString `json:"ID"`
	// 既存のNoSQLのゾーン.
	Zone OptGetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone `json:"Zone"`
}

// GetID returns the value of ID.
func (s *GetNosqlApplianceRemarkNosqlPrimaryNodesAppliance) GetID() OptString {
	return s.ID
}

// GetZone returns the value of Zone.
func (s *GetNosqlApplianceRemarkNosqlPrimaryNodesAppliance) GetZone() OptGetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone {
	return s.Zone
}

// SetID sets the value of ID.
func (s *GetNosqlApplianceRemarkNosqlPrimaryNodesAppliance) SetID(val OptString) {
	s.ID = val
}

// SetZone sets the value of Zone.
func (s *GetNosqlApplianceRemarkNosqlPrimaryNodesAppliance) SetZone(val OptGetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone) {
	s.Zone = val
}

// 既存のNoSQLのゾーン.
type GetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone struct {
	// 既存のNoSQLのゾーン情報.
	Name OptString `json:"Name"`
}

// GetName returns the value of Name.
func (s *GetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone) GetName() OptString {
	return s.Name
}

// SetName sets the value of Name.
func (s *GetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone) SetName(val OptString) {
	s.Name = val
}

// ストレージ.
type GetNosqlApplianceRemarkNosqlStorage string

const (
	GetNosqlApplianceRemarkNosqlStorageSSD GetNosqlApplianceRemarkNosqlStorage = "SSD"
)

// AllValues returns all GetNosqlApplianceRemarkNosqlStorage values.
func (GetNosqlApplianceRemarkNosqlStorage) AllValues() []GetNosqlApplianceRemarkNosqlStorage {
	return []GetNosqlApplianceRemarkNosqlStorage{
		GetNosqlApplianceRemarkNosqlStorageSSD,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetNosqlApplianceRemarkNosqlStorage) MarshalText() ([]byte, error) {
	switch s {
	case GetNosqlApplianceRemarkNosqlStorageSSD:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetNosqlApplianceRemarkNosqlStorage) UnmarshalText(data []byte) error {
	switch GetNosqlApplianceRemarkNosqlStorage(data) {
	case GetNosqlApplianceRemarkNosqlStorageSSD:
		*s = GetNosqlApplianceRemarkNosqlStorageSSD
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 仮想コア.
type GetNosqlApplianceRemarkNosqlVirtualcore int

const (
	GetNosqlApplianceRemarkNosqlVirtualcore3 GetNosqlApplianceRemarkNosqlVirtualcore = 3
)

// AllValues returns all GetNosqlApplianceRemarkNosqlVirtualcore values.
func (GetNosqlApplianceRemarkNosqlVirtualcore) AllValues() []GetNosqlApplianceRemarkNosqlVirtualcore {
	return []GetNosqlApplianceRemarkNosqlVirtualcore{
		GetNosqlApplianceRemarkNosqlVirtualcore3,
	}
}

type GetNosqlApplianceRemarkServersItem struct {
	// ユーザ側スイッチに接続するIPアドレス
	// ※ノード数分指定する.
	UserIPAddress OptIPv4 `json:"UserIPAddress"`
}

// GetUserIPAddress returns the value of UserIPAddress.
func (s *GetNosqlApplianceRemarkServersItem) GetUserIPAddress() OptIPv4 {
	return s.UserIPAddress
}

// SetUserIPAddress sets the value of UserIPAddress.
func (s *GetNosqlApplianceRemarkServersItem) SetUserIPAddress(val OptIPv4) {
	s.UserIPAddress = val
}

// ゾーン.
type GetNosqlApplianceRemarkZone struct {
	// ゾーンID.
	ID OptString `json:"ID"`
}

// GetID returns the value of ID.
func (s *GetNosqlApplianceRemarkZone) GetID() OptString {
	return s.ID
}

// SetID sets the value of ID.
func (s *GetNosqlApplianceRemarkZone) SetID(val OptString) {
	s.ID = val
}

// Ref: #/components/schemas/GetNosqlSettings
type GetNosqlSettings struct {
	// バックアップ情報.
	Backup OptNilGetNosqlSettingsBackup `json:"Backup"`
	// 送信元ネットワークアドレス.
	SourceNetwork []string `json:"SourceNetwork"`
	// 予備IPアドレス
	// ※デッドノード発生時、ノード切替を行う際に使用する予備のIPアドレス.
	ReserveIPAddress OptIPv4 `json:"ReserveIPAddress"`
	// 定期リペア設定.
	Repair OptNilGetNosqlSettingsRepair `json:"Repair"`
}

// GetBackup returns the value of Backup.
func (s *GetNosqlSettings) GetBackup() OptNilGetNosqlSettingsBackup {
	return s.Backup
}

// GetSourceNetwork returns the value of SourceNetwork.
func (s *GetNosqlSettings) GetSourceNetwork() []string {
	return s.SourceNetwork
}

// GetReserveIPAddress returns the value of ReserveIPAddress.
func (s *GetNosqlSettings) GetReserveIPAddress() OptIPv4 {
	return s.ReserveIPAddress
}

// GetRepair returns the value of Repair.
func (s *GetNosqlSettings) GetRepair() OptNilGetNosqlSettingsRepair {
	return s.Repair
}

// SetBackup sets the value of Backup.
func (s *GetNosqlSettings) SetBackup(val OptNilGetNosqlSettingsBackup) {
	s.Backup = val
}

// SetSourceNetwork sets the value of SourceNetwork.
func (s *GetNosqlSettings) SetSourceNetwork(val []string) {
	s.SourceNetwork = val
}

// SetReserveIPAddress sets the value of ReserveIPAddress.
func (s *GetNosqlSettings) SetReserveIPAddress(val OptIPv4) {
	s.ReserveIPAddress = val
}

// SetRepair sets the value of Repair.
func (s *GetNosqlSettings) SetRepair(val OptNilGetNosqlSettingsRepair) {
	s.Repair = val
}

// バックアップ情報.
type GetNosqlSettingsBackup struct {
	// バックアップ先（NFS URL形式）.
	Connect OptString `json:"Connect"`
	// バックアップスケジュール.
	DayOfWeek OptNilGetNosqlSettingsBackupDayOfWeekItemArray `json:"DayOfWeek"`
	// バックアップする時間.
	Time OptNilString `json:"Time"`
	// バックアップ数（1から8まで）.
	Rotate OptInt `json:"Rotate"`
}

// GetConnect returns the value of Connect.
func (s *GetNosqlSettingsBackup) GetConnect() OptString {
	return s.Connect
}

// GetDayOfWeek returns the value of DayOfWeek.
func (s *GetNosqlSettingsBackup) GetDayOfWeek() OptNilGetNosqlSettingsBackupDayOfWeekItemArray {
	return s.DayOfWeek
}

// GetTime returns the value of Time.
func (s *GetNosqlSettingsBackup) GetTime() OptNilString {
	return s.Time
}

// GetRotate returns the value of Rotate.
func (s *GetNosqlSettingsBackup) GetRotate() OptInt {
	return s.Rotate
}

// SetConnect sets the value of Connect.
func (s *GetNosqlSettingsBackup) SetConnect(val OptString) {
	s.Connect = val
}

// SetDayOfWeek sets the value of DayOfWeek.
func (s *GetNosqlSettingsBackup) SetDayOfWeek(val OptNilGetNosqlSettingsBackupDayOfWeekItemArray) {
	s.DayOfWeek = val
}

// SetTime sets the value of Time.
func (s *GetNosqlSettingsBackup) SetTime(val OptNilString) {
	s.Time = val
}

// SetRotate sets the value of Rotate.
func (s *GetNosqlSettingsBackup) SetRotate(val OptInt) {
	s.Rotate = val
}

type GetNosqlSettingsBackupDayOfWeekItem string

const (
	GetNosqlSettingsBackupDayOfWeekItemSun GetNosqlSettingsBackupDayOfWeekItem = "sun"
	GetNosqlSettingsBackupDayOfWeekItemMon GetNosqlSettingsBackupDayOfWeekItem = "mon"
	GetNosqlSettingsBackupDayOfWeekItemTue GetNosqlSettingsBackupDayOfWeekItem = "tue"
	GetNosqlSettingsBackupDayOfWeekItemWed GetNosqlSettingsBackupDayOfWeekItem = "wed"
	GetNosqlSettingsBackupDayOfWeekItemThu GetNosqlSettingsBackupDayOfWeekItem = "thu"
	GetNosqlSettingsBackupDayOfWeekItemFri GetNosqlSettingsBackupDayOfWeekItem = "fri"
	GetNosqlSettingsBackupDayOfWeekItemSat GetNosqlSettingsBackupDayOfWeekItem = "sat"
)

// AllValues returns all GetNosqlSettingsBackupDayOfWeekItem values.
func (GetNosqlSettingsBackupDayOfWeekItem) AllValues() []GetNosqlSettingsBackupDayOfWeekItem {
	return []GetNosqlSettingsBackupDayOfWeekItem{
		GetNosqlSettingsBackupDayOfWeekItemSun,
		GetNosqlSettingsBackupDayOfWeekItemMon,
		GetNosqlSettingsBackupDayOfWeekItemTue,
		GetNosqlSettingsBackupDayOfWeekItemWed,
		GetNosqlSettingsBackupDayOfWeekItemThu,
		GetNosqlSettingsBackupDayOfWeekItemFri,
		GetNosqlSettingsBackupDayOfWeekItemSat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetNosqlSettingsBackupDayOfWeekItem) MarshalText() ([]byte, error) {
	switch s {
	case GetNosqlSettingsBackupDayOfWeekItemSun:
		return []byte(s), nil
	case GetNosqlSettingsBackupDayOfWeekItemMon:
		return []byte(s), nil
	case GetNosqlSettingsBackupDayOfWeekItemTue:
		return []byte(s), nil
	case GetNosqlSettingsBackupDayOfWeekItemWed:
		return []byte(s), nil
	case GetNosqlSettingsBackupDayOfWeekItemThu:
		return []byte(s), nil
	case GetNosqlSettingsBackupDayOfWeekItemFri:
		return []byte(s), nil
	case GetNosqlSettingsBackupDayOfWeekItemSat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetNosqlSettingsBackupDayOfWeekItem) UnmarshalText(data []byte) error {
	switch GetNosqlSettingsBackupDayOfWeekItem(data) {
	case GetNosqlSettingsBackupDayOfWeekItemSun:
		*s = GetNosqlSettingsBackupDayOfWeekItemSun
		return nil
	case GetNosqlSettingsBackupDayOfWeekItemMon:
		*s = GetNosqlSettingsBackupDayOfWeekItemMon
		return nil
	case GetNosqlSettingsBackupDayOfWeekItemTue:
		*s = GetNosqlSettingsBackupDayOfWeekItemTue
		return nil
	case GetNosqlSettingsBackupDayOfWeekItemWed:
		*s = GetNosqlSettingsBackupDayOfWeekItemWed
		return nil
	case GetNosqlSettingsBackupDayOfWeekItemThu:
		*s = GetNosqlSettingsBackupDayOfWeekItemThu
		return nil
	case GetNosqlSettingsBackupDayOfWeekItemFri:
		*s = GetNosqlSettingsBackupDayOfWeekItemFri
		return nil
	case GetNosqlSettingsBackupDayOfWeekItemSat:
		*s = GetNosqlSettingsBackupDayOfWeekItemSat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 定期リペア設定.
type GetNosqlSettingsRepair struct {
	// 増分リペア設定.
	Incremental OptGetNosqlSettingsRepairIncremental `json:"Incremental"`
	// 完全リペア設定.
	Full OptGetNosqlSettingsRepairFull `json:"Full"`
}

// GetIncremental returns the value of Incremental.
func (s *GetNosqlSettingsRepair) GetIncremental() OptGetNosqlSettingsRepairIncremental {
	return s.Incremental
}

// GetFull returns the value of Full.
func (s *GetNosqlSettingsRepair) GetFull() OptGetNosqlSettingsRepairFull {
	return s.Full
}

// SetIncremental sets the value of Incremental.
func (s *GetNosqlSettingsRepair) SetIncremental(val OptGetNosqlSettingsRepairIncremental) {
	s.Incremental = val
}

// SetFull sets the value of Full.
func (s *GetNosqlSettingsRepair) SetFull(val OptGetNosqlSettingsRepairFull) {
	s.Full = val
}

// 完全リペア設定.
type GetNosqlSettingsRepairFull struct {
	// 7日ごとの実行間隔（日数）.
	Interval OptGetNosqlSettingsRepairFullInterval `json:"Interval"`
	// 実行曜日.
	DayOfWeek OptGetNosqlSettingsRepairFullDayOfWeek `json:"DayOfWeek"`
	// 実行時間.
	Time OptString `json:"Time"`
}

// GetInterval returns the value of Interval.
func (s *GetNosqlSettingsRepairFull) GetInterval() OptGetNosqlSettingsRepairFullInterval {
	return s.Interval
}

// GetDayOfWeek returns the value of DayOfWeek.
func (s *GetNosqlSettingsRepairFull) GetDayOfWeek() OptGetNosqlSettingsRepairFullDayOfWeek {
	return s.DayOfWeek
}

// GetTime returns the value of Time.
func (s *GetNosqlSettingsRepairFull) GetTime() OptString {
	return s.Time
}

// SetInterval sets the value of Interval.
func (s *GetNosqlSettingsRepairFull) SetInterval(val OptGetNosqlSettingsRepairFullInterval) {
	s.Interval = val
}

// SetDayOfWeek sets the value of DayOfWeek.
func (s *GetNosqlSettingsRepairFull) SetDayOfWeek(val OptGetNosqlSettingsRepairFullDayOfWeek) {
	s.DayOfWeek = val
}

// SetTime sets the value of Time.
func (s *GetNosqlSettingsRepairFull) SetTime(val OptString) {
	s.Time = val
}

// 実行曜日.
type GetNosqlSettingsRepairFullDayOfWeek string

const (
	GetNosqlSettingsRepairFullDayOfWeekSun GetNosqlSettingsRepairFullDayOfWeek = "sun"
	GetNosqlSettingsRepairFullDayOfWeekMon GetNosqlSettingsRepairFullDayOfWeek = "mon"
	GetNosqlSettingsRepairFullDayOfWeekTue GetNosqlSettingsRepairFullDayOfWeek = "tue"
	GetNosqlSettingsRepairFullDayOfWeekWed GetNosqlSettingsRepairFullDayOfWeek = "wed"
	GetNosqlSettingsRepairFullDayOfWeekThu GetNosqlSettingsRepairFullDayOfWeek = "thu"
	GetNosqlSettingsRepairFullDayOfWeekFri GetNosqlSettingsRepairFullDayOfWeek = "fri"
	GetNosqlSettingsRepairFullDayOfWeekSat GetNosqlSettingsRepairFullDayOfWeek = "sat"
)

// AllValues returns all GetNosqlSettingsRepairFullDayOfWeek values.
func (GetNosqlSettingsRepairFullDayOfWeek) AllValues() []GetNosqlSettingsRepairFullDayOfWeek {
	return []GetNosqlSettingsRepairFullDayOfWeek{
		GetNosqlSettingsRepairFullDayOfWeekSun,
		GetNosqlSettingsRepairFullDayOfWeekMon,
		GetNosqlSettingsRepairFullDayOfWeekTue,
		GetNosqlSettingsRepairFullDayOfWeekWed,
		GetNosqlSettingsRepairFullDayOfWeekThu,
		GetNosqlSettingsRepairFullDayOfWeekFri,
		GetNosqlSettingsRepairFullDayOfWeekSat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetNosqlSettingsRepairFullDayOfWeek) MarshalText() ([]byte, error) {
	switch s {
	case GetNosqlSettingsRepairFullDayOfWeekSun:
		return []byte(s), nil
	case GetNosqlSettingsRepairFullDayOfWeekMon:
		return []byte(s), nil
	case GetNosqlSettingsRepairFullDayOfWeekTue:
		return []byte(s), nil
	case GetNosqlSettingsRepairFullDayOfWeekWed:
		return []byte(s), nil
	case GetNosqlSettingsRepairFullDayOfWeekThu:
		return []byte(s), nil
	case GetNosqlSettingsRepairFullDayOfWeekFri:
		return []byte(s), nil
	case GetNosqlSettingsRepairFullDayOfWeekSat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetNosqlSettingsRepairFullDayOfWeek) UnmarshalText(data []byte) error {
	switch GetNosqlSettingsRepairFullDayOfWeek(data) {
	case GetNosqlSettingsRepairFullDayOfWeekSun:
		*s = GetNosqlSettingsRepairFullDayOfWeekSun
		return nil
	case GetNosqlSettingsRepairFullDayOfWeekMon:
		*s = GetNosqlSettingsRepairFullDayOfWeekMon
		return nil
	case GetNosqlSettingsRepairFullDayOfWeekTue:
		*s = GetNosqlSettingsRepairFullDayOfWeekTue
		return nil
	case GetNosqlSettingsRepairFullDayOfWeekWed:
		*s = GetNosqlSettingsRepairFullDayOfWeekWed
		return nil
	case GetNosqlSettingsRepairFullDayOfWeekThu:
		*s = GetNosqlSettingsRepairFullDayOfWeekThu
		return nil
	case GetNosqlSettingsRepairFullDayOfWeekFri:
		*s = GetNosqlSettingsRepairFullDayOfWeekFri
		return nil
	case GetNosqlSettingsRepairFullDayOfWeekSat:
		*s = GetNosqlSettingsRepairFullDayOfWeekSat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 7日ごとの実行間隔（日数）.
type GetNosqlSettingsRepairFullInterval int

const (
	GetNosqlSettingsRepairFullInterval7  GetNosqlSettingsRepairFullInterval = 7
	GetNosqlSettingsRepairFullInterval14 GetNosqlSettingsRepairFullInterval = 14
	GetNosqlSettingsRepairFullInterval21 GetNosqlSettingsRepairFullInterval = 21
	GetNosqlSettingsRepairFullInterval28 GetNosqlSettingsRepairFullInterval = 28
)

// AllValues returns all GetNosqlSettingsRepairFullInterval values.
func (GetNosqlSettingsRepairFullInterval) AllValues() []GetNosqlSettingsRepairFullInterval {
	return []GetNosqlSettingsRepairFullInterval{
		GetNosqlSettingsRepairFullInterval7,
		GetNosqlSettingsRepairFullInterval14,
		GetNosqlSettingsRepairFullInterval21,
		GetNosqlSettingsRepairFullInterval28,
	}
}

// 増分リペア設定.
type GetNosqlSettingsRepairIncremental struct {
	// 実行曜日.
	DaysOfWeek []GetNosqlSettingsRepairIncrementalDaysOfWeekItem `json:"DaysOfWeek"`
	// 実行時間.
	Time OptString `json:"Time"`
}

// GetDaysOfWeek returns the value of DaysOfWeek.
func (s *GetNosqlSettingsRepairIncremental) GetDaysOfWeek() []GetNosqlSettingsRepairIncrementalDaysOfWeekItem {
	return s.DaysOfWeek
}

// GetTime returns the value of Time.
func (s *GetNosqlSettingsRepairIncremental) GetTime() OptString {
	return s.Time
}

// SetDaysOfWeek sets the value of DaysOfWeek.
func (s *GetNosqlSettingsRepairIncremental) SetDaysOfWeek(val []GetNosqlSettingsRepairIncrementalDaysOfWeekItem) {
	s.DaysOfWeek = val
}

// SetTime sets the value of Time.
func (s *GetNosqlSettingsRepairIncremental) SetTime(val OptString) {
	s.Time = val
}

type GetNosqlSettingsRepairIncrementalDaysOfWeekItem string

const (
	GetNosqlSettingsRepairIncrementalDaysOfWeekItemSun GetNosqlSettingsRepairIncrementalDaysOfWeekItem = "sun"
	GetNosqlSettingsRepairIncrementalDaysOfWeekItemMon GetNosqlSettingsRepairIncrementalDaysOfWeekItem = "mon"
	GetNosqlSettingsRepairIncrementalDaysOfWeekItemTue GetNosqlSettingsRepairIncrementalDaysOfWeekItem = "tue"
	GetNosqlSettingsRepairIncrementalDaysOfWeekItemWed GetNosqlSettingsRepairIncrementalDaysOfWeekItem = "wed"
	GetNosqlSettingsRepairIncrementalDaysOfWeekItemThu GetNosqlSettingsRepairIncrementalDaysOfWeekItem = "thu"
	GetNosqlSettingsRepairIncrementalDaysOfWeekItemFri GetNosqlSettingsRepairIncrementalDaysOfWeekItem = "fri"
	GetNosqlSettingsRepairIncrementalDaysOfWeekItemSat GetNosqlSettingsRepairIncrementalDaysOfWeekItem = "sat"
)

// AllValues returns all GetNosqlSettingsRepairIncrementalDaysOfWeekItem values.
func (GetNosqlSettingsRepairIncrementalDaysOfWeekItem) AllValues() []GetNosqlSettingsRepairIncrementalDaysOfWeekItem {
	return []GetNosqlSettingsRepairIncrementalDaysOfWeekItem{
		GetNosqlSettingsRepairIncrementalDaysOfWeekItemSun,
		GetNosqlSettingsRepairIncrementalDaysOfWeekItemMon,
		GetNosqlSettingsRepairIncrementalDaysOfWeekItemTue,
		GetNosqlSettingsRepairIncrementalDaysOfWeekItemWed,
		GetNosqlSettingsRepairIncrementalDaysOfWeekItemThu,
		GetNosqlSettingsRepairIncrementalDaysOfWeekItemFri,
		GetNosqlSettingsRepairIncrementalDaysOfWeekItemSat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetNosqlSettingsRepairIncrementalDaysOfWeekItem) MarshalText() ([]byte, error) {
	switch s {
	case GetNosqlSettingsRepairIncrementalDaysOfWeekItemSun:
		return []byte(s), nil
	case GetNosqlSettingsRepairIncrementalDaysOfWeekItemMon:
		return []byte(s), nil
	case GetNosqlSettingsRepairIncrementalDaysOfWeekItemTue:
		return []byte(s), nil
	case GetNosqlSettingsRepairIncrementalDaysOfWeekItemWed:
		return []byte(s), nil
	case GetNosqlSettingsRepairIncrementalDaysOfWeekItemThu:
		return []byte(s), nil
	case GetNosqlSettingsRepairIncrementalDaysOfWeekItemFri:
		return []byte(s), nil
	case GetNosqlSettingsRepairIncrementalDaysOfWeekItemSat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetNosqlSettingsRepairIncrementalDaysOfWeekItem) UnmarshalText(data []byte) error {
	switch GetNosqlSettingsRepairIncrementalDaysOfWeekItem(data) {
	case GetNosqlSettingsRepairIncrementalDaysOfWeekItemSun:
		*s = GetNosqlSettingsRepairIncrementalDaysOfWeekItemSun
		return nil
	case GetNosqlSettingsRepairIncrementalDaysOfWeekItemMon:
		*s = GetNosqlSettingsRepairIncrementalDaysOfWeekItemMon
		return nil
	case GetNosqlSettingsRepairIncrementalDaysOfWeekItemTue:
		*s = GetNosqlSettingsRepairIncrementalDaysOfWeekItemTue
		return nil
	case GetNosqlSettingsRepairIncrementalDaysOfWeekItemWed:
		*s = GetNosqlSettingsRepairIncrementalDaysOfWeekItemWed
		return nil
	case GetNosqlSettingsRepairIncrementalDaysOfWeekItemThu:
		*s = GetNosqlSettingsRepairIncrementalDaysOfWeekItemThu
		return nil
	case GetNosqlSettingsRepairIncrementalDaysOfWeekItemFri:
		*s = GetNosqlSettingsRepairIncrementalDaysOfWeekItemFri
		return nil
	case GetNosqlSettingsRepairIncrementalDaysOfWeekItemSat:
		*s = GetNosqlSettingsRepairIncrementalDaysOfWeekItemSat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/GetParameterResponse
type GetParameterResponse struct {
	Nosql OptGetParameterResponseNosql `json:"nosql"`
	IsOk  OptIsOk                      `json:"is_ok"`
}

// GetNosql returns the value of Nosql.
func (s *GetParameterResponse) GetNosql() OptGetParameterResponseNosql {
	return s.Nosql
}

// GetIsOk returns the value of IsOk.
func (s *GetParameterResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetNosql sets the value of Nosql.
func (s *GetParameterResponse) SetNosql(val OptGetParameterResponseNosql) {
	s.Nosql = val
}

// SetIsOk sets the value of IsOk.
func (s *GetParameterResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*GetParameterResponse) getParameterRes() {}

type GetParameterResponseNosql struct {
	Parameters []NosqlGetParameter `json:"parameters"`
}

// GetParameters returns the value of Parameters.
func (s *GetParameterResponseNosql) GetParameters() []NosqlGetParameter {
	return s.Parameters
}

// SetParameters sets the value of Parameters.
func (s *GetParameterResponseNosql) SetParameters(val []NosqlGetParameter) {
	s.Parameters = val
}

// プラン.
// Ref: #/components/schemas/GetPlan
type GetPlan struct {
	// プランID.
	ID OptInt `json:"ID"`
}

// GetID returns the value of ID.
func (s *GetPlan) GetID() OptInt {
	return s.ID
}

// SetID sets the value of ID.
func (s *GetPlan) SetID(val OptInt) {
	s.ID = val
}

type GetServiceClass string

// Ref: #/components/schemas/Instance
type Instance struct {
	Status          OptString           `json:"Status"`
	StatusChangedAt OptNilDateTime      `json:"StatusChangedAt"`
	Host            OptNilInstanceHost  `json:"Host"`
	Hosts           []InstanceHostsItem `json:"Hosts"`
}

// GetStatus returns the value of Status.
func (s *Instance) GetStatus() OptString {
	return s.Status
}

// GetStatusChangedAt returns the value of StatusChangedAt.
func (s *Instance) GetStatusChangedAt() OptNilDateTime {
	return s.StatusChangedAt
}

// GetHost returns the value of Host.
func (s *Instance) GetHost() OptNilInstanceHost {
	return s.Host
}

// GetHosts returns the value of Hosts.
func (s *Instance) GetHosts() []InstanceHostsItem {
	return s.Hosts
}

// SetStatus sets the value of Status.
func (s *Instance) SetStatus(val OptString) {
	s.Status = val
}

// SetStatusChangedAt sets the value of StatusChangedAt.
func (s *Instance) SetStatusChangedAt(val OptNilDateTime) {
	s.StatusChangedAt = val
}

// SetHost sets the value of Host.
func (s *Instance) SetHost(val OptNilInstanceHost) {
	s.Host = val
}

// SetHosts sets the value of Hosts.
func (s *Instance) SetHosts(val []InstanceHostsItem) {
	s.Hosts = val
}

type InstanceHost struct {
	Name    OptString `json:"Name"`
	InfoURL OptString `json:"InfoURL"`
}

// GetName returns the value of Name.
func (s *InstanceHost) GetName() OptString {
	return s.Name
}

// GetInfoURL returns the value of InfoURL.
func (s *InstanceHost) GetInfoURL() OptString {
	return s.InfoURL
}

// SetName sets the value of Name.
func (s *InstanceHost) SetName(val OptString) {
	s.Name = val
}

// SetInfoURL sets the value of InfoURL.
func (s *InstanceHost) SetInfoURL(val OptString) {
	s.InfoURL = val
}

type InstanceHostsItem struct {
	Name    OptString `json:"Name"`
	InfoURL OptString `json:"InfoURL"`
}

// GetName returns the value of Name.
func (s *InstanceHostsItem) GetName() OptString {
	return s.Name
}

// GetInfoURL returns the value of InfoURL.
func (s *InstanceHostsItem) GetInfoURL() OptString {
	return s.InfoURL
}

// SetName sets the value of Name.
func (s *InstanceHostsItem) SetName(val OptString) {
	s.Name = val
}

// SetInfoURL sets the value of InfoURL.
func (s *InstanceHostsItem) SetInfoURL(val OptString) {
	s.InfoURL = val
}

type IsOk bool

// Merged schema.
// Ref: #/components/schemas/NodeHealth
type NodeHealth struct {
	Success OptSuccess         `json:"Success"`
	IsOk    OptIsOk            `json:"is_ok"`
	Nosql   OptNodeHealthNosql `json:"Nosql"`
}

// GetSuccess returns the value of Success.
func (s *NodeHealth) GetSuccess() OptSuccess {
	return s.Success
}

// GetIsOk returns the value of IsOk.
func (s *NodeHealth) GetIsOk() OptIsOk {
	return s.IsOk
}

// GetNosql returns the value of Nosql.
func (s *NodeHealth) GetNosql() OptNodeHealthNosql {
	return s.Nosql
}

// SetSuccess sets the value of Success.
func (s *NodeHealth) SetSuccess(val OptSuccess) {
	s.Success = val
}

// SetIsOk sets the value of IsOk.
func (s *NodeHealth) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

// SetNosql sets the value of Nosql.
func (s *NodeHealth) SetNosql(val OptNodeHealthNosql) {
	s.Nosql = val
}

func (*NodeHealth) getNoSQLNodeHealthRes() {}

type NodeHealthNosql struct {
	// NoSQLの状態
	// | 値        | 説明   |
	// |-----------|--------|
	// | healthy        | 起動(すべてのノードが起動している)   |
	// | healthy-partial | 部分起動(1台のノードが停止している)  |
	// | unhealthy       | 停止(2台以上のノードが停止している)   |.
	Status OptNodeHealthNosqlStatus `json:"Status"`
}

// GetStatus returns the value of Status.
func (s *NodeHealthNosql) GetStatus() OptNodeHealthNosqlStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *NodeHealthNosql) SetStatus(val OptNodeHealthNosqlStatus) {
	s.Status = val
}

// NoSQLの状態
// | 値        | 説明   |
// |-----------|--------|
// | healthy        | 起動(すべてのノードが起動している)   |
// | healthy-partial | 部分起動(1台のノードが停止している)  |
// | unhealthy       | 停止(2台以上のノードが停止している)   |.
type NodeHealthNosqlStatus string

const (
	NodeHealthNosqlStatusHealthy        NodeHealthNosqlStatus = "healthy"
	NodeHealthNosqlStatusHealthyPartial NodeHealthNosqlStatus = "healthy-partial"
	NodeHealthNosqlStatusUnhealthy      NodeHealthNosqlStatus = "unhealthy"
)

// AllValues returns all NodeHealthNosqlStatus values.
func (NodeHealthNosqlStatus) AllValues() []NodeHealthNosqlStatus {
	return []NodeHealthNosqlStatus{
		NodeHealthNosqlStatusHealthy,
		NodeHealthNosqlStatusHealthyPartial,
		NodeHealthNosqlStatusUnhealthy,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NodeHealthNosqlStatus) MarshalText() ([]byte, error) {
	switch s {
	case NodeHealthNosqlStatusHealthy:
		return []byte(s), nil
	case NodeHealthNosqlStatusHealthyPartial:
		return []byte(s), nil
	case NodeHealthNosqlStatusUnhealthy:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NodeHealthNosqlStatus) UnmarshalText(data []byte) error {
	switch NodeHealthNosqlStatus(data) {
	case NodeHealthNosqlStatusHealthy:
		*s = NodeHealthNosqlStatusHealthy
		return nil
	case NodeHealthNosqlStatusHealthyPartial:
		*s = NodeHealthNosqlStatusHealthyPartial
		return nil
	case NodeHealthNosqlStatusUnhealthy:
		*s = NodeHealthNosqlStatusUnhealthy
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/NosqlAppliance
type NosqlAppliance struct {
	// クラス
	// **新規作成時・ノード追加時必須**.
	Class OptString `json:"Class"`
	// NoSQLの名前
	// **新規作成時・ノード追加時必須**.
	Name OptString `json:"Name"`
	// NoSQLの説明.
	Description OptString  `json:"Description"`
	Tags        OptNilTags `json:"Tags"`
	// アプライアンスID.
	ID           OptString               `json:"ID"`
	Plan         OptPlan                 `json:"Plan"`
	Settings     OptNosqlSettings        `json:"Settings"`
	SettingsHash OptString               `json:"SettingsHash"`
	Remark       OptNosqlApplianceRemark `json:"Remark"`
	Availability OptAvailability         `json:"Availability"`
	Instance     OptInstance             `json:"Instance"`
	// ディスク情報.
	Disk         OptNilNosqlApplianceDisk       `json:"Disk"`
	ServiceClass OptServiceClass                `json:"ServiceClass"`
	Generation   OptInt                         `json:"Generation"`
	CreatedAt    OptDateTime                    `json:"CreatedAt"`
	Interfaces   []NosqlApplianceInterfacesItem `json:"Interfaces"`
}

// GetClass returns the value of Class.
func (s *NosqlAppliance) GetClass() OptString {
	return s.Class
}

// GetName returns the value of Name.
func (s *NosqlAppliance) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *NosqlAppliance) GetDescription() OptString {
	return s.Description
}

// GetTags returns the value of Tags.
func (s *NosqlAppliance) GetTags() OptNilTags {
	return s.Tags
}

// GetID returns the value of ID.
func (s *NosqlAppliance) GetID() OptString {
	return s.ID
}

// GetPlan returns the value of Plan.
func (s *NosqlAppliance) GetPlan() OptPlan {
	return s.Plan
}

// GetSettings returns the value of Settings.
func (s *NosqlAppliance) GetSettings() OptNosqlSettings {
	return s.Settings
}

// GetSettingsHash returns the value of SettingsHash.
func (s *NosqlAppliance) GetSettingsHash() OptString {
	return s.SettingsHash
}

// GetRemark returns the value of Remark.
func (s *NosqlAppliance) GetRemark() OptNosqlApplianceRemark {
	return s.Remark
}

// GetAvailability returns the value of Availability.
func (s *NosqlAppliance) GetAvailability() OptAvailability {
	return s.Availability
}

// GetInstance returns the value of Instance.
func (s *NosqlAppliance) GetInstance() OptInstance {
	return s.Instance
}

// GetDisk returns the value of Disk.
func (s *NosqlAppliance) GetDisk() OptNilNosqlApplianceDisk {
	return s.Disk
}

// GetServiceClass returns the value of ServiceClass.
func (s *NosqlAppliance) GetServiceClass() OptServiceClass {
	return s.ServiceClass
}

// GetGeneration returns the value of Generation.
func (s *NosqlAppliance) GetGeneration() OptInt {
	return s.Generation
}

// GetCreatedAt returns the value of CreatedAt.
func (s *NosqlAppliance) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetInterfaces returns the value of Interfaces.
func (s *NosqlAppliance) GetInterfaces() []NosqlApplianceInterfacesItem {
	return s.Interfaces
}

// SetClass sets the value of Class.
func (s *NosqlAppliance) SetClass(val OptString) {
	s.Class = val
}

// SetName sets the value of Name.
func (s *NosqlAppliance) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *NosqlAppliance) SetDescription(val OptString) {
	s.Description = val
}

// SetTags sets the value of Tags.
func (s *NosqlAppliance) SetTags(val OptNilTags) {
	s.Tags = val
}

// SetID sets the value of ID.
func (s *NosqlAppliance) SetID(val OptString) {
	s.ID = val
}

// SetPlan sets the value of Plan.
func (s *NosqlAppliance) SetPlan(val OptPlan) {
	s.Plan = val
}

// SetSettings sets the value of Settings.
func (s *NosqlAppliance) SetSettings(val OptNosqlSettings) {
	s.Settings = val
}

// SetSettingsHash sets the value of SettingsHash.
func (s *NosqlAppliance) SetSettingsHash(val OptString) {
	s.SettingsHash = val
}

// SetRemark sets the value of Remark.
func (s *NosqlAppliance) SetRemark(val OptNosqlApplianceRemark) {
	s.Remark = val
}

// SetAvailability sets the value of Availability.
func (s *NosqlAppliance) SetAvailability(val OptAvailability) {
	s.Availability = val
}

// SetInstance sets the value of Instance.
func (s *NosqlAppliance) SetInstance(val OptInstance) {
	s.Instance = val
}

// SetDisk sets the value of Disk.
func (s *NosqlAppliance) SetDisk(val OptNilNosqlApplianceDisk) {
	s.Disk = val
}

// SetServiceClass sets the value of ServiceClass.
func (s *NosqlAppliance) SetServiceClass(val OptServiceClass) {
	s.ServiceClass = val
}

// SetGeneration sets the value of Generation.
func (s *NosqlAppliance) SetGeneration(val OptInt) {
	s.Generation = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *NosqlAppliance) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetInterfaces sets the value of Interfaces.
func (s *NosqlAppliance) SetInterfaces(val []NosqlApplianceInterfacesItem) {
	s.Interfaces = val
}

// ディスク情報.
type NosqlApplianceDisk struct {
	// 暗号化キー情報.
	EncryptionKey OptNosqlApplianceDiskEncryptionKey `json:"EncryptionKey"`
	// 暗号化アルゴリズム.
	EncryptionAlgorithm OptString `json:"EncryptionAlgorithm"`
}

// GetEncryptionKey returns the value of EncryptionKey.
func (s *NosqlApplianceDisk) GetEncryptionKey() OptNosqlApplianceDiskEncryptionKey {
	return s.EncryptionKey
}

// GetEncryptionAlgorithm returns the value of EncryptionAlgorithm.
func (s *NosqlApplianceDisk) GetEncryptionAlgorithm() OptString {
	return s.EncryptionAlgorithm
}

// SetEncryptionKey sets the value of EncryptionKey.
func (s *NosqlApplianceDisk) SetEncryptionKey(val OptNosqlApplianceDiskEncryptionKey) {
	s.EncryptionKey = val
}

// SetEncryptionAlgorithm sets the value of EncryptionAlgorithm.
func (s *NosqlApplianceDisk) SetEncryptionAlgorithm(val OptString) {
	s.EncryptionAlgorithm = val
}

// 暗号化キー情報.
type NosqlApplianceDiskEncryptionKey struct {
	// KMSキーID.
	KMSKeyID OptString `json:"KMSKeyID"`
}

// GetKMSKeyID returns the value of KMSKeyID.
func (s *NosqlApplianceDiskEncryptionKey) GetKMSKeyID() OptString {
	return s.KMSKeyID
}

// SetKMSKeyID sets the value of KMSKeyID.
func (s *NosqlApplianceDiskEncryptionKey) SetKMSKeyID(val OptString) {
	s.KMSKeyID = val
}

type NosqlApplianceInterfacesItem struct {
	// IPアドレス.
	IPAddress OptNilString `json:"IPAddress"`
	// ユーザ側スイッチに接続するIPアドレス.
	UserIPAddress OptNilString `json:"UserIPAddress"`
	// ホスト名.
	HostName OptNilString `json:"HostName"`
	// スイッチ情報.
	Switch OptNosqlApplianceInterfacesItemSwitch `json:"Switch"`
}

// GetIPAddress returns the value of IPAddress.
func (s *NosqlApplianceInterfacesItem) GetIPAddress() OptNilString {
	return s.IPAddress
}

// GetUserIPAddress returns the value of UserIPAddress.
func (s *NosqlApplianceInterfacesItem) GetUserIPAddress() OptNilString {
	return s.UserIPAddress
}

// GetHostName returns the value of HostName.
func (s *NosqlApplianceInterfacesItem) GetHostName() OptNilString {
	return s.HostName
}

// GetSwitch returns the value of Switch.
func (s *NosqlApplianceInterfacesItem) GetSwitch() OptNosqlApplianceInterfacesItemSwitch {
	return s.Switch
}

// SetIPAddress sets the value of IPAddress.
func (s *NosqlApplianceInterfacesItem) SetIPAddress(val OptNilString) {
	s.IPAddress = val
}

// SetUserIPAddress sets the value of UserIPAddress.
func (s *NosqlApplianceInterfacesItem) SetUserIPAddress(val OptNilString) {
	s.UserIPAddress = val
}

// SetHostName sets the value of HostName.
func (s *NosqlApplianceInterfacesItem) SetHostName(val OptNilString) {
	s.HostName = val
}

// SetSwitch sets the value of Switch.
func (s *NosqlApplianceInterfacesItem) SetSwitch(val OptNosqlApplianceInterfacesItemSwitch) {
	s.Switch = val
}

// スイッチ情報.
type NosqlApplianceInterfacesItemSwitch struct {
	// スイッチID.
	ID string `json:"ID"`
	// スイッチ名.
	Name OptString `json:"name"`
	// スコープ(shared/user).
	Scope OptString `json:"Scope"`
	// サブネット情報.
	Subnet OptNilNosqlApplianceInterfacesItemSwitchSubnet `json:"Subnet"`
	// ユーザサブネット情報.
	UserSubnet OptNilNosqlApplianceInterfacesItemSwitchUserSubnet `json:"UserSubnet"`
}

// GetID returns the value of ID.
func (s *NosqlApplianceInterfacesItemSwitch) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *NosqlApplianceInterfacesItemSwitch) GetName() OptString {
	return s.Name
}

// GetScope returns the value of Scope.
func (s *NosqlApplianceInterfacesItemSwitch) GetScope() OptString {
	return s.Scope
}

// GetSubnet returns the value of Subnet.
func (s *NosqlApplianceInterfacesItemSwitch) GetSubnet() OptNilNosqlApplianceInterfacesItemSwitchSubnet {
	return s.Subnet
}

// GetUserSubnet returns the value of UserSubnet.
func (s *NosqlApplianceInterfacesItemSwitch) GetUserSubnet() OptNilNosqlApplianceInterfacesItemSwitchUserSubnet {
	return s.UserSubnet
}

// SetID sets the value of ID.
func (s *NosqlApplianceInterfacesItemSwitch) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *NosqlApplianceInterfacesItemSwitch) SetName(val OptString) {
	s.Name = val
}

// SetScope sets the value of Scope.
func (s *NosqlApplianceInterfacesItemSwitch) SetScope(val OptString) {
	s.Scope = val
}

// SetSubnet sets the value of Subnet.
func (s *NosqlApplianceInterfacesItemSwitch) SetSubnet(val OptNilNosqlApplianceInterfacesItemSwitchSubnet) {
	s.Subnet = val
}

// SetUserSubnet sets the value of UserSubnet.
func (s *NosqlApplianceInterfacesItemSwitch) SetUserSubnet(val OptNilNosqlApplianceInterfacesItemSwitchUserSubnet) {
	s.UserSubnet = val
}

// サブネット情報.
type NosqlApplianceInterfacesItemSwitchSubnet struct {
	// ネットワークアドレス.
	NetworkAddress OptString `json:"NetworkAddress"`
	// ネットマスク.
	NetworkMaskLen OptInt `json:"NetworkMaskLen"`
	// ゲートウェイのアドレス.
	DefaultRoute OptNilString                                        `json:"DefaultRoute"`
	Internet     OptNosqlApplianceInterfacesItemSwitchSubnetInternet `json:"Internet"`
}

// GetNetworkAddress returns the value of NetworkAddress.
func (s *NosqlApplianceInterfacesItemSwitchSubnet) GetNetworkAddress() OptString {
	return s.NetworkAddress
}

// GetNetworkMaskLen returns the value of NetworkMaskLen.
func (s *NosqlApplianceInterfacesItemSwitchSubnet) GetNetworkMaskLen() OptInt {
	return s.NetworkMaskLen
}

// GetDefaultRoute returns the value of DefaultRoute.
func (s *NosqlApplianceInterfacesItemSwitchSubnet) GetDefaultRoute() OptNilString {
	return s.DefaultRoute
}

// GetInternet returns the value of Internet.
func (s *NosqlApplianceInterfacesItemSwitchSubnet) GetInternet() OptNosqlApplianceInterfacesItemSwitchSubnetInternet {
	return s.Internet
}

// SetNetworkAddress sets the value of NetworkAddress.
func (s *NosqlApplianceInterfacesItemSwitchSubnet) SetNetworkAddress(val OptString) {
	s.NetworkAddress = val
}

// SetNetworkMaskLen sets the value of NetworkMaskLen.
func (s *NosqlApplianceInterfacesItemSwitchSubnet) SetNetworkMaskLen(val OptInt) {
	s.NetworkMaskLen = val
}

// SetDefaultRoute sets the value of DefaultRoute.
func (s *NosqlApplianceInterfacesItemSwitchSubnet) SetDefaultRoute(val OptNilString) {
	s.DefaultRoute = val
}

// SetInternet sets the value of Internet.
func (s *NosqlApplianceInterfacesItemSwitchSubnet) SetInternet(val OptNosqlApplianceInterfacesItemSwitchSubnetInternet) {
	s.Internet = val
}

type NosqlApplianceInterfacesItemSwitchSubnetInternet struct {
	BandWidthMbps OptInt `json:"BandWidthMbps"`
}

// GetBandWidthMbps returns the value of BandWidthMbps.
func (s *NosqlApplianceInterfacesItemSwitchSubnetInternet) GetBandWidthMbps() OptInt {
	return s.BandWidthMbps
}

// SetBandWidthMbps sets the value of BandWidthMbps.
func (s *NosqlApplianceInterfacesItemSwitchSubnetInternet) SetBandWidthMbps(val OptInt) {
	s.BandWidthMbps = val
}

// ユーザサブネット情報.
type NosqlApplianceInterfacesItemSwitchUserSubnet struct {
	// ゲートウェイのアドレス.
	DefaultRoute OptNilString `json:"DefaultRoute"`
	// ネットマスク.
	NetworkMaskLen OptInt `json:"NetworkMaskLen"`
}

// GetDefaultRoute returns the value of DefaultRoute.
func (s *NosqlApplianceInterfacesItemSwitchUserSubnet) GetDefaultRoute() OptNilString {
	return s.DefaultRoute
}

// GetNetworkMaskLen returns the value of NetworkMaskLen.
func (s *NosqlApplianceInterfacesItemSwitchUserSubnet) GetNetworkMaskLen() OptInt {
	return s.NetworkMaskLen
}

// SetDefaultRoute sets the value of DefaultRoute.
func (s *NosqlApplianceInterfacesItemSwitchUserSubnet) SetDefaultRoute(val OptNilString) {
	s.DefaultRoute = val
}

// SetNetworkMaskLen sets the value of NetworkMaskLen.
func (s *NosqlApplianceInterfacesItemSwitchUserSubnet) SetNetworkMaskLen(val OptInt) {
	s.NetworkMaskLen = val
}

// Merged schema.
type NosqlApplianceRemark struct {
	Nosql   NosqlApplianceRemarkNosql         `json:"Nosql"`
	Servers []NosqlApplianceRemarkServersItem `json:"Servers"`
	// ゾーン.
	Zone OptNosqlApplianceRemarkZone `json:"Zone"`
	// サービスクラス.
	ServiceClass OptString `json:"ServiceClass"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlApplianceRemark) GetNosql() NosqlApplianceRemarkNosql {
	return s.Nosql
}

// GetServers returns the value of Servers.
func (s *NosqlApplianceRemark) GetServers() []NosqlApplianceRemarkServersItem {
	return s.Servers
}

// GetZone returns the value of Zone.
func (s *NosqlApplianceRemark) GetZone() OptNosqlApplianceRemarkZone {
	return s.Zone
}

// GetServiceClass returns the value of ServiceClass.
func (s *NosqlApplianceRemark) GetServiceClass() OptString {
	return s.ServiceClass
}

// SetNosql sets the value of Nosql.
func (s *NosqlApplianceRemark) SetNosql(val NosqlApplianceRemarkNosql) {
	s.Nosql = val
}

// SetServers sets the value of Servers.
func (s *NosqlApplianceRemark) SetServers(val []NosqlApplianceRemarkServersItem) {
	s.Servers = val
}

// SetZone sets the value of Zone.
func (s *NosqlApplianceRemark) SetZone(val OptNosqlApplianceRemarkZone) {
	s.Zone = val
}

// SetServiceClass sets the value of ServiceClass.
func (s *NosqlApplianceRemark) SetServiceClass(val OptString) {
	s.ServiceClass = val
}

type NosqlApplianceRemarkNosql struct {
	// プライマリノード情報。
	// **ノード追加時必須**
	// ノード追加を行う場合は、対象となる既存NoSQLのアプライアンス情報を設定してください。.
	PrimaryNodes OptNosqlApplianceRemarkNosqlPrimaryNodes `json:"PrimaryNodes"`
	// データベースに使用するエンジン
	// **新規作成時必須**.
	DatabaseEngine OptNosqlApplianceRemarkNosqlDatabaseEngine `json:"DatabaseEngine"`
	// データベースバージョン
	// **新規作成時必須**.
	DatabaseVersion OptString `json:"DatabaseVersion"`
	// デフォルトユーザ名
	// **新規作成時必須**.
	DefaultUser OptString `json:"DefaultUser"`
	// ディスクサイズ(MB)
	// **新規作成時必須**.
	DiskSize OptNosqlApplianceRemarkNosqlDiskSize `json:"DiskSize"`
	// メモリ(MB)
	// **新規作成時必須**.
	Memory OptNosqlApplianceRemarkNosqlMemory `json:"Memory"`
	// ノード数
	// **新規作成時・ノード追加時必須**
	// 新規作成時は3、ノード追加時は2を指定してください。.
	Nodes int `json:"Nodes"`
	// ポート
	// **新規作成時必須**.
	Port OptInt `json:"Port"`
	// ストレージ
	// **新規作成時必須**.
	Storage OptNosqlApplianceRemarkNosqlStorage `json:"Storage"`
	// 仮想コア
	// **新規作成時必須**.
	Virtualcore OptNosqlApplianceRemarkNosqlVirtualcore `json:"Virtualcore"`
	// ゾーン
	// **新規作成時・ノード追加時必須**.
	Zone string `json:"Zone"`
}

// GetPrimaryNodes returns the value of PrimaryNodes.
func (s *NosqlApplianceRemarkNosql) GetPrimaryNodes() OptNosqlApplianceRemarkNosqlPrimaryNodes {
	return s.PrimaryNodes
}

// GetDatabaseEngine returns the value of DatabaseEngine.
func (s *NosqlApplianceRemarkNosql) GetDatabaseEngine() OptNosqlApplianceRemarkNosqlDatabaseEngine {
	return s.DatabaseEngine
}

// GetDatabaseVersion returns the value of DatabaseVersion.
func (s *NosqlApplianceRemarkNosql) GetDatabaseVersion() OptString {
	return s.DatabaseVersion
}

// GetDefaultUser returns the value of DefaultUser.
func (s *NosqlApplianceRemarkNosql) GetDefaultUser() OptString {
	return s.DefaultUser
}

// GetDiskSize returns the value of DiskSize.
func (s *NosqlApplianceRemarkNosql) GetDiskSize() OptNosqlApplianceRemarkNosqlDiskSize {
	return s.DiskSize
}

// GetMemory returns the value of Memory.
func (s *NosqlApplianceRemarkNosql) GetMemory() OptNosqlApplianceRemarkNosqlMemory {
	return s.Memory
}

// GetNodes returns the value of Nodes.
func (s *NosqlApplianceRemarkNosql) GetNodes() int {
	return s.Nodes
}

// GetPort returns the value of Port.
func (s *NosqlApplianceRemarkNosql) GetPort() OptInt {
	return s.Port
}

// GetStorage returns the value of Storage.
func (s *NosqlApplianceRemarkNosql) GetStorage() OptNosqlApplianceRemarkNosqlStorage {
	return s.Storage
}

// GetVirtualcore returns the value of Virtualcore.
func (s *NosqlApplianceRemarkNosql) GetVirtualcore() OptNosqlApplianceRemarkNosqlVirtualcore {
	return s.Virtualcore
}

// GetZone returns the value of Zone.
func (s *NosqlApplianceRemarkNosql) GetZone() string {
	return s.Zone
}

// SetPrimaryNodes sets the value of PrimaryNodes.
func (s *NosqlApplianceRemarkNosql) SetPrimaryNodes(val OptNosqlApplianceRemarkNosqlPrimaryNodes) {
	s.PrimaryNodes = val
}

// SetDatabaseEngine sets the value of DatabaseEngine.
func (s *NosqlApplianceRemarkNosql) SetDatabaseEngine(val OptNosqlApplianceRemarkNosqlDatabaseEngine) {
	s.DatabaseEngine = val
}

// SetDatabaseVersion sets the value of DatabaseVersion.
func (s *NosqlApplianceRemarkNosql) SetDatabaseVersion(val OptString) {
	s.DatabaseVersion = val
}

// SetDefaultUser sets the value of DefaultUser.
func (s *NosqlApplianceRemarkNosql) SetDefaultUser(val OptString) {
	s.DefaultUser = val
}

// SetDiskSize sets the value of DiskSize.
func (s *NosqlApplianceRemarkNosql) SetDiskSize(val OptNosqlApplianceRemarkNosqlDiskSize) {
	s.DiskSize = val
}

// SetMemory sets the value of Memory.
func (s *NosqlApplianceRemarkNosql) SetMemory(val OptNosqlApplianceRemarkNosqlMemory) {
	s.Memory = val
}

// SetNodes sets the value of Nodes.
func (s *NosqlApplianceRemarkNosql) SetNodes(val int) {
	s.Nodes = val
}

// SetPort sets the value of Port.
func (s *NosqlApplianceRemarkNosql) SetPort(val OptInt) {
	s.Port = val
}

// SetStorage sets the value of Storage.
func (s *NosqlApplianceRemarkNosql) SetStorage(val OptNosqlApplianceRemarkNosqlStorage) {
	s.Storage = val
}

// SetVirtualcore sets the value of Virtualcore.
func (s *NosqlApplianceRemarkNosql) SetVirtualcore(val OptNosqlApplianceRemarkNosqlVirtualcore) {
	s.Virtualcore = val
}

// SetZone sets the value of Zone.
func (s *NosqlApplianceRemarkNosql) SetZone(val string) {
	s.Zone = val
}

// データベースに使用するエンジン
// **新規作成時必須**.
type NosqlApplianceRemarkNosqlDatabaseEngine string

const (
	NosqlApplianceRemarkNosqlDatabaseEngineCassandra NosqlApplianceRemarkNosqlDatabaseEngine = "Cassandra"
)

// AllValues returns all NosqlApplianceRemarkNosqlDatabaseEngine values.
func (NosqlApplianceRemarkNosqlDatabaseEngine) AllValues() []NosqlApplianceRemarkNosqlDatabaseEngine {
	return []NosqlApplianceRemarkNosqlDatabaseEngine{
		NosqlApplianceRemarkNosqlDatabaseEngineCassandra,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlApplianceRemarkNosqlDatabaseEngine) MarshalText() ([]byte, error) {
	switch s {
	case NosqlApplianceRemarkNosqlDatabaseEngineCassandra:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlApplianceRemarkNosqlDatabaseEngine) UnmarshalText(data []byte) error {
	switch NosqlApplianceRemarkNosqlDatabaseEngine(data) {
	case NosqlApplianceRemarkNosqlDatabaseEngineCassandra:
		*s = NosqlApplianceRemarkNosqlDatabaseEngineCassandra
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ディスクサイズ(MB)
// **新規作成時必須**.
type NosqlApplianceRemarkNosqlDiskSize int

const (
	NosqlApplianceRemarkNosqlDiskSize102400 NosqlApplianceRemarkNosqlDiskSize = 102400
)

// AllValues returns all NosqlApplianceRemarkNosqlDiskSize values.
func (NosqlApplianceRemarkNosqlDiskSize) AllValues() []NosqlApplianceRemarkNosqlDiskSize {
	return []NosqlApplianceRemarkNosqlDiskSize{
		NosqlApplianceRemarkNosqlDiskSize102400,
	}
}

// メモリ(MB)
// **新規作成時必須**.
type NosqlApplianceRemarkNosqlMemory int

const (
	NosqlApplianceRemarkNosqlMemory8192 NosqlApplianceRemarkNosqlMemory = 8192
)

// AllValues returns all NosqlApplianceRemarkNosqlMemory values.
func (NosqlApplianceRemarkNosqlMemory) AllValues() []NosqlApplianceRemarkNosqlMemory {
	return []NosqlApplianceRemarkNosqlMemory{
		NosqlApplianceRemarkNosqlMemory8192,
	}
}

// プライマリノード情報。
// **ノード追加時必須**
// ノード追加を行う場合は、対象となる既存NoSQLのアプライアンス情報を設定してください。.
type NosqlApplianceRemarkNosqlPrimaryNodes struct {
	// 既存のNoSQLのアプライアンス情報
	// **ノード追加時必須**.
	Appliance NosqlApplianceRemarkNosqlPrimaryNodesAppliance `json:"Appliance"`
}

// GetAppliance returns the value of Appliance.
func (s *NosqlApplianceRemarkNosqlPrimaryNodes) GetAppliance() NosqlApplianceRemarkNosqlPrimaryNodesAppliance {
	return s.Appliance
}

// SetAppliance sets the value of Appliance.
func (s *NosqlApplianceRemarkNosqlPrimaryNodes) SetAppliance(val NosqlApplianceRemarkNosqlPrimaryNodesAppliance) {
	s.Appliance = val
}

// 既存のNoSQLのアプライアンス情報
// **ノード追加時必須**.
type NosqlApplianceRemarkNosqlPrimaryNodesAppliance struct {
	// 既存のNoSQLのアプライアンスID
	// **ノード追加時必須**.
	ID string `json:"ID"`
	// 既存のNoSQLのゾーン
	// **ノード追加時必須**.
	Zone NosqlApplianceRemarkNosqlPrimaryNodesApplianceZone `json:"Zone"`
}

// GetID returns the value of ID.
func (s *NosqlApplianceRemarkNosqlPrimaryNodesAppliance) GetID() string {
	return s.ID
}

// GetZone returns the value of Zone.
func (s *NosqlApplianceRemarkNosqlPrimaryNodesAppliance) GetZone() NosqlApplianceRemarkNosqlPrimaryNodesApplianceZone {
	return s.Zone
}

// SetID sets the value of ID.
func (s *NosqlApplianceRemarkNosqlPrimaryNodesAppliance) SetID(val string) {
	s.ID = val
}

// SetZone sets the value of Zone.
func (s *NosqlApplianceRemarkNosqlPrimaryNodesAppliance) SetZone(val NosqlApplianceRemarkNosqlPrimaryNodesApplianceZone) {
	s.Zone = val
}

// 既存のNoSQLのゾーン
// **ノード追加時必須**.
type NosqlApplianceRemarkNosqlPrimaryNodesApplianceZone struct {
	// 既存のNoSQLのゾーン情報
	// **ノード追加時必須**.
	Name string `json:"Name"`
}

// GetName returns the value of Name.
func (s *NosqlApplianceRemarkNosqlPrimaryNodesApplianceZone) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *NosqlApplianceRemarkNosqlPrimaryNodesApplianceZone) SetName(val string) {
	s.Name = val
}

// ストレージ
// **新規作成時必須**.
type NosqlApplianceRemarkNosqlStorage string

const (
	NosqlApplianceRemarkNosqlStorageSSD NosqlApplianceRemarkNosqlStorage = "SSD"
)

// AllValues returns all NosqlApplianceRemarkNosqlStorage values.
func (NosqlApplianceRemarkNosqlStorage) AllValues() []NosqlApplianceRemarkNosqlStorage {
	return []NosqlApplianceRemarkNosqlStorage{
		NosqlApplianceRemarkNosqlStorageSSD,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlApplianceRemarkNosqlStorage) MarshalText() ([]byte, error) {
	switch s {
	case NosqlApplianceRemarkNosqlStorageSSD:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlApplianceRemarkNosqlStorage) UnmarshalText(data []byte) error {
	switch NosqlApplianceRemarkNosqlStorage(data) {
	case NosqlApplianceRemarkNosqlStorageSSD:
		*s = NosqlApplianceRemarkNosqlStorageSSD
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 仮想コア
// **新規作成時必須**.
type NosqlApplianceRemarkNosqlVirtualcore int

const (
	NosqlApplianceRemarkNosqlVirtualcore3 NosqlApplianceRemarkNosqlVirtualcore = 3
)

// AllValues returns all NosqlApplianceRemarkNosqlVirtualcore values.
func (NosqlApplianceRemarkNosqlVirtualcore) AllValues() []NosqlApplianceRemarkNosqlVirtualcore {
	return []NosqlApplianceRemarkNosqlVirtualcore{
		NosqlApplianceRemarkNosqlVirtualcore3,
	}
}

type NosqlApplianceRemarkServersItem struct {
	// ユーザ側スイッチに接続するIPアドレス
	// **新規作成時・ノード追加時必須**
	// ※ノード数分指定する.
	UserIPAddress netip.Addr `json:"UserIPAddress"`
}

// GetUserIPAddress returns the value of UserIPAddress.
func (s *NosqlApplianceRemarkServersItem) GetUserIPAddress() netip.Addr {
	return s.UserIPAddress
}

// SetUserIPAddress sets the value of UserIPAddress.
func (s *NosqlApplianceRemarkServersItem) SetUserIPAddress(val netip.Addr) {
	s.UserIPAddress = val
}

// ゾーン.
type NosqlApplianceRemarkZone struct {
	// ゾーンID.
	ID OptString `json:"ID"`
}

// GetID returns the value of ID.
func (s *NosqlApplianceRemarkZone) GetID() OptString {
	return s.ID
}

// SetID sets the value of ID.
func (s *NosqlApplianceRemarkZone) SetID(val OptString) {
	s.ID = val
}

// Ref: #/components/schemas/NosqlBackup
type NosqlBackup struct {
	// バックアップID.
	BackupId uuid.UUID `json:"backupId"`
	// バックアップ先.
	BackupDestination string `json:"backupDestination"`
	// バックアップ日時.
	BackupAt time.Time `json:"backupAt"`
	// バックアップ復元日時.
	RestoreAt OptDateTime `json:"restoreAt"`
	// バックアップサイズ.
	Size int64 `json:"size"`
	// バックアップ削除ステータス(0:未削除, 1:削除中, 2:削除完了, 9:削除失敗).
	DeleteStatus OptString `json:"deleteStatus"`
	// バックアップ復元ステータス(0:未復元, 1:復元中, 2:復元完了, 9:復元失敗).
	RestoreStatus OptString `json:"restoreStatus"`
}

// GetBackupId returns the value of BackupId.
func (s *NosqlBackup) GetBackupId() uuid.UUID {
	return s.BackupId
}

// GetBackupDestination returns the value of BackupDestination.
func (s *NosqlBackup) GetBackupDestination() string {
	return s.BackupDestination
}

// GetBackupAt returns the value of BackupAt.
func (s *NosqlBackup) GetBackupAt() time.Time {
	return s.BackupAt
}

// GetRestoreAt returns the value of RestoreAt.
func (s *NosqlBackup) GetRestoreAt() OptDateTime {
	return s.RestoreAt
}

// GetSize returns the value of Size.
func (s *NosqlBackup) GetSize() int64 {
	return s.Size
}

// GetDeleteStatus returns the value of DeleteStatus.
func (s *NosqlBackup) GetDeleteStatus() OptString {
	return s.DeleteStatus
}

// GetRestoreStatus returns the value of RestoreStatus.
func (s *NosqlBackup) GetRestoreStatus() OptString {
	return s.RestoreStatus
}

// SetBackupId sets the value of BackupId.
func (s *NosqlBackup) SetBackupId(val uuid.UUID) {
	s.BackupId = val
}

// SetBackupDestination sets the value of BackupDestination.
func (s *NosqlBackup) SetBackupDestination(val string) {
	s.BackupDestination = val
}

// SetBackupAt sets the value of BackupAt.
func (s *NosqlBackup) SetBackupAt(val time.Time) {
	s.BackupAt = val
}

// SetRestoreAt sets the value of RestoreAt.
func (s *NosqlBackup) SetRestoreAt(val OptDateTime) {
	s.RestoreAt = val
}

// SetSize sets the value of Size.
func (s *NosqlBackup) SetSize(val int64) {
	s.Size = val
}

// SetDeleteStatus sets the value of DeleteStatus.
func (s *NosqlBackup) SetDeleteStatus(val OptString) {
	s.DeleteStatus = val
}

// SetRestoreStatus sets the value of RestoreStatus.
func (s *NosqlBackup) SetRestoreStatus(val OptString) {
	s.RestoreStatus = val
}

// Ref: #/components/schemas/NosqlBackupResponse
type NosqlBackupResponse struct {
	Nosql OptNosqlBackupResponseNosql `json:"nosql"`
	IsOk  OptIsOk                     `json:"is_ok"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlBackupResponse) GetNosql() OptNosqlBackupResponseNosql {
	return s.Nosql
}

// GetIsOk returns the value of IsOk.
func (s *NosqlBackupResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetNosql sets the value of Nosql.
func (s *NosqlBackupResponse) SetNosql(val OptNosqlBackupResponseNosql) {
	s.Nosql = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlBackupResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*NosqlBackupResponse) getBackupByApplianceIDRes() {}

type NosqlBackupResponseNosql struct {
	// バックアップデータリスト.
	Backups []NosqlBackup `json:"backups"`
}

// GetBackups returns the value of Backups.
func (s *NosqlBackupResponseNosql) GetBackups() []NosqlBackup {
	return s.Backups
}

// SetBackups sets the value of Backups.
func (s *NosqlBackupResponseNosql) SetBackups(val []NosqlBackup) {
	s.Backups = val
}

// Ref: #/components/schemas/NosqlCreateRequest
type NosqlCreateRequest struct {
	Appliance NosqlCreateRequestAppliance `json:"Appliance"`
}

// GetAppliance returns the value of Appliance.
func (s *NosqlCreateRequest) GetAppliance() NosqlCreateRequestAppliance {
	return s.Appliance
}

// SetAppliance sets the value of Appliance.
func (s *NosqlCreateRequest) SetAppliance(val NosqlCreateRequestAppliance) {
	s.Appliance = val
}

// Merged schema.
type NosqlCreateRequestAppliance struct {
	// クラス
	// **新規作成時・ノード追加時必須**.
	Class string `json:"Class"`
	// NoSQLの名前
	// **新規作成時・ノード追加時必須**.
	Name string `json:"Name"`
	// NoSQLの説明.
	Description  OptString    `json:"Description"`
	Tags         OptNilTags   `json:"Tags"`
	ServiceClass ServiceClass `json:"ServiceClass"`
	Plan         Plan         `json:"Plan"`
	// ディスク情報
	// ディスクの情報は暗号化する場合は EncryptionAlgorithm と EncryptionKey
	// を指定する必要があります。.
	Disk           OptNilNosqlCreateRequestApplianceDisk           `json:"Disk"`
	Settings       OptNosqlCreateRequestApplianceSettings          `json:"Settings"`
	Remark         NosqlRemark                                     `json:"Remark"`
	UserInterfaces []NosqlCreateRequestApplianceUserInterfacesItem `json:"UserInterfaces"`
}

// GetClass returns the value of Class.
func (s *NosqlCreateRequestAppliance) GetClass() string {
	return s.Class
}

// GetName returns the value of Name.
func (s *NosqlCreateRequestAppliance) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *NosqlCreateRequestAppliance) GetDescription() OptString {
	return s.Description
}

// GetTags returns the value of Tags.
func (s *NosqlCreateRequestAppliance) GetTags() OptNilTags {
	return s.Tags
}

// GetServiceClass returns the value of ServiceClass.
func (s *NosqlCreateRequestAppliance) GetServiceClass() ServiceClass {
	return s.ServiceClass
}

// GetPlan returns the value of Plan.
func (s *NosqlCreateRequestAppliance) GetPlan() Plan {
	return s.Plan
}

// GetDisk returns the value of Disk.
func (s *NosqlCreateRequestAppliance) GetDisk() OptNilNosqlCreateRequestApplianceDisk {
	return s.Disk
}

// GetSettings returns the value of Settings.
func (s *NosqlCreateRequestAppliance) GetSettings() OptNosqlCreateRequestApplianceSettings {
	return s.Settings
}

// GetRemark returns the value of Remark.
func (s *NosqlCreateRequestAppliance) GetRemark() NosqlRemark {
	return s.Remark
}

// GetUserInterfaces returns the value of UserInterfaces.
func (s *NosqlCreateRequestAppliance) GetUserInterfaces() []NosqlCreateRequestApplianceUserInterfacesItem {
	return s.UserInterfaces
}

// SetClass sets the value of Class.
func (s *NosqlCreateRequestAppliance) SetClass(val string) {
	s.Class = val
}

// SetName sets the value of Name.
func (s *NosqlCreateRequestAppliance) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *NosqlCreateRequestAppliance) SetDescription(val OptString) {
	s.Description = val
}

// SetTags sets the value of Tags.
func (s *NosqlCreateRequestAppliance) SetTags(val OptNilTags) {
	s.Tags = val
}

// SetServiceClass sets the value of ServiceClass.
func (s *NosqlCreateRequestAppliance) SetServiceClass(val ServiceClass) {
	s.ServiceClass = val
}

// SetPlan sets the value of Plan.
func (s *NosqlCreateRequestAppliance) SetPlan(val Plan) {
	s.Plan = val
}

// SetDisk sets the value of Disk.
func (s *NosqlCreateRequestAppliance) SetDisk(val OptNilNosqlCreateRequestApplianceDisk) {
	s.Disk = val
}

// SetSettings sets the value of Settings.
func (s *NosqlCreateRequestAppliance) SetSettings(val OptNosqlCreateRequestApplianceSettings) {
	s.Settings = val
}

// SetRemark sets the value of Remark.
func (s *NosqlCreateRequestAppliance) SetRemark(val NosqlRemark) {
	s.Remark = val
}

// SetUserInterfaces sets the value of UserInterfaces.
func (s *NosqlCreateRequestAppliance) SetUserInterfaces(val []NosqlCreateRequestApplianceUserInterfacesItem) {
	s.UserInterfaces = val
}

// ディスク情報
// ディスクの情報は暗号化する場合は EncryptionAlgorithm と EncryptionKey
// を指定する必要があります。.
type NosqlCreateRequestApplianceDisk struct {
	// 暗号化キー情報.
	EncryptionKey OptNosqlCreateRequestApplianceDiskEncryptionKey `json:"EncryptionKey"`
	// 暗号化アルゴリズム.
	EncryptionAlgorithm OptString `json:"EncryptionAlgorithm"`
}

// GetEncryptionKey returns the value of EncryptionKey.
func (s *NosqlCreateRequestApplianceDisk) GetEncryptionKey() OptNosqlCreateRequestApplianceDiskEncryptionKey {
	return s.EncryptionKey
}

// GetEncryptionAlgorithm returns the value of EncryptionAlgorithm.
func (s *NosqlCreateRequestApplianceDisk) GetEncryptionAlgorithm() OptString {
	return s.EncryptionAlgorithm
}

// SetEncryptionKey sets the value of EncryptionKey.
func (s *NosqlCreateRequestApplianceDisk) SetEncryptionKey(val OptNosqlCreateRequestApplianceDiskEncryptionKey) {
	s.EncryptionKey = val
}

// SetEncryptionAlgorithm sets the value of EncryptionAlgorithm.
func (s *NosqlCreateRequestApplianceDisk) SetEncryptionAlgorithm(val OptString) {
	s.EncryptionAlgorithm = val
}

// 暗号化キー情報.
type NosqlCreateRequestApplianceDiskEncryptionKey struct {
	// KMSキーID.
	KMSKeyID OptString `json:"KMSKeyID"`
}

// GetKMSKeyID returns the value of KMSKeyID.
func (s *NosqlCreateRequestApplianceDiskEncryptionKey) GetKMSKeyID() OptString {
	return s.KMSKeyID
}

// SetKMSKeyID sets the value of KMSKeyID.
func (s *NosqlCreateRequestApplianceDiskEncryptionKey) SetKMSKeyID(val OptString) {
	s.KMSKeyID = val
}

// Merged schema.
type NosqlCreateRequestApplianceSettings struct {
	// バックアップ情報.
	Backup OptNilNosqlCreateRequestApplianceSettingsBackup `json:"Backup"`
	// 送信元ネットワークアドレス.
	SourceNetwork []string `json:"SourceNetwork"`
	// Merged property.
	ReserveIPAddress OptIPv4 `json:"ReserveIPAddress"`
	// 定期リペア設定.
	Repair   OptNilNosqlCreateRequestApplianceSettingsRepair `json:"Repair"`
	Password OptPassword                                     `json:"Password"`
}

// GetBackup returns the value of Backup.
func (s *NosqlCreateRequestApplianceSettings) GetBackup() OptNilNosqlCreateRequestApplianceSettingsBackup {
	return s.Backup
}

// GetSourceNetwork returns the value of SourceNetwork.
func (s *NosqlCreateRequestApplianceSettings) GetSourceNetwork() []string {
	return s.SourceNetwork
}

// GetReserveIPAddress returns the value of ReserveIPAddress.
func (s *NosqlCreateRequestApplianceSettings) GetReserveIPAddress() OptIPv4 {
	return s.ReserveIPAddress
}

// GetRepair returns the value of Repair.
func (s *NosqlCreateRequestApplianceSettings) GetRepair() OptNilNosqlCreateRequestApplianceSettingsRepair {
	return s.Repair
}

// GetPassword returns the value of Password.
func (s *NosqlCreateRequestApplianceSettings) GetPassword() OptPassword {
	return s.Password
}

// SetBackup sets the value of Backup.
func (s *NosqlCreateRequestApplianceSettings) SetBackup(val OptNilNosqlCreateRequestApplianceSettingsBackup) {
	s.Backup = val
}

// SetSourceNetwork sets the value of SourceNetwork.
func (s *NosqlCreateRequestApplianceSettings) SetSourceNetwork(val []string) {
	s.SourceNetwork = val
}

// SetReserveIPAddress sets the value of ReserveIPAddress.
func (s *NosqlCreateRequestApplianceSettings) SetReserveIPAddress(val OptIPv4) {
	s.ReserveIPAddress = val
}

// SetRepair sets the value of Repair.
func (s *NosqlCreateRequestApplianceSettings) SetRepair(val OptNilNosqlCreateRequestApplianceSettingsRepair) {
	s.Repair = val
}

// SetPassword sets the value of Password.
func (s *NosqlCreateRequestApplianceSettings) SetPassword(val OptPassword) {
	s.Password = val
}

// バックアップ情報.
type NosqlCreateRequestApplianceSettingsBackup struct {
	// バックアップ先（NFS URL形式）.
	Connect string `json:"Connect"`
	// バックアップスケジュール.
	DayOfWeek OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray `json:"DayOfWeek"`
	// バックアップする時間.
	Time OptNilString `json:"Time"`
	// バックアップ数（1から8まで）.
	Rotate OptInt `json:"Rotate"`
}

// GetConnect returns the value of Connect.
func (s *NosqlCreateRequestApplianceSettingsBackup) GetConnect() string {
	return s.Connect
}

// GetDayOfWeek returns the value of DayOfWeek.
func (s *NosqlCreateRequestApplianceSettingsBackup) GetDayOfWeek() OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray {
	return s.DayOfWeek
}

// GetTime returns the value of Time.
func (s *NosqlCreateRequestApplianceSettingsBackup) GetTime() OptNilString {
	return s.Time
}

// GetRotate returns the value of Rotate.
func (s *NosqlCreateRequestApplianceSettingsBackup) GetRotate() OptInt {
	return s.Rotate
}

// SetConnect sets the value of Connect.
func (s *NosqlCreateRequestApplianceSettingsBackup) SetConnect(val string) {
	s.Connect = val
}

// SetDayOfWeek sets the value of DayOfWeek.
func (s *NosqlCreateRequestApplianceSettingsBackup) SetDayOfWeek(val OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray) {
	s.DayOfWeek = val
}

// SetTime sets the value of Time.
func (s *NosqlCreateRequestApplianceSettingsBackup) SetTime(val OptNilString) {
	s.Time = val
}

// SetRotate sets the value of Rotate.
func (s *NosqlCreateRequestApplianceSettingsBackup) SetRotate(val OptInt) {
	s.Rotate = val
}

type NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem string

const (
	NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSun NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem = "sun"
	NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemMon NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem = "mon"
	NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemTue NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem = "tue"
	NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemWed NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem = "wed"
	NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemThu NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem = "thu"
	NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemFri NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem = "fri"
	NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSat NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem = "sat"
)

// AllValues returns all NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem values.
func (NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem) AllValues() []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem {
	return []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem{
		NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSun,
		NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemMon,
		NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemTue,
		NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemWed,
		NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemThu,
		NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemFri,
		NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem) MarshalText() ([]byte, error) {
	switch s {
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSun:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemMon:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemTue:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemWed:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemThu:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemFri:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem) UnmarshalText(data []byte) error {
	switch NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem(data) {
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSun:
		*s = NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSun
		return nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemMon:
		*s = NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemMon
		return nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemTue:
		*s = NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemTue
		return nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemWed:
		*s = NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemWed
		return nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemThu:
		*s = NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemThu
		return nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemFri:
		*s = NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemFri
		return nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSat:
		*s = NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 定期リペア設定.
type NosqlCreateRequestApplianceSettingsRepair struct {
	// 増分リペア設定.
	Incremental OptNosqlCreateRequestApplianceSettingsRepairIncremental `json:"Incremental"`
	// 完全リペア設定.
	Full OptNosqlCreateRequestApplianceSettingsRepairFull `json:"Full"`
}

// GetIncremental returns the value of Incremental.
func (s *NosqlCreateRequestApplianceSettingsRepair) GetIncremental() OptNosqlCreateRequestApplianceSettingsRepairIncremental {
	return s.Incremental
}

// GetFull returns the value of Full.
func (s *NosqlCreateRequestApplianceSettingsRepair) GetFull() OptNosqlCreateRequestApplianceSettingsRepairFull {
	return s.Full
}

// SetIncremental sets the value of Incremental.
func (s *NosqlCreateRequestApplianceSettingsRepair) SetIncremental(val OptNosqlCreateRequestApplianceSettingsRepairIncremental) {
	s.Incremental = val
}

// SetFull sets the value of Full.
func (s *NosqlCreateRequestApplianceSettingsRepair) SetFull(val OptNosqlCreateRequestApplianceSettingsRepairFull) {
	s.Full = val
}

// 完全リペア設定.
type NosqlCreateRequestApplianceSettingsRepairFull struct {
	// 7日ごとの実行間隔（日数）.
	Interval NosqlCreateRequestApplianceSettingsRepairFullInterval `json:"Interval"`
	// 実行曜日.
	DayOfWeek NosqlCreateRequestApplianceSettingsRepairFullDayOfWeek `json:"DayOfWeek"`
	// 実行時間.
	Time string `json:"Time"`
}

// GetInterval returns the value of Interval.
func (s *NosqlCreateRequestApplianceSettingsRepairFull) GetInterval() NosqlCreateRequestApplianceSettingsRepairFullInterval {
	return s.Interval
}

// GetDayOfWeek returns the value of DayOfWeek.
func (s *NosqlCreateRequestApplianceSettingsRepairFull) GetDayOfWeek() NosqlCreateRequestApplianceSettingsRepairFullDayOfWeek {
	return s.DayOfWeek
}

// GetTime returns the value of Time.
func (s *NosqlCreateRequestApplianceSettingsRepairFull) GetTime() string {
	return s.Time
}

// SetInterval sets the value of Interval.
func (s *NosqlCreateRequestApplianceSettingsRepairFull) SetInterval(val NosqlCreateRequestApplianceSettingsRepairFullInterval) {
	s.Interval = val
}

// SetDayOfWeek sets the value of DayOfWeek.
func (s *NosqlCreateRequestApplianceSettingsRepairFull) SetDayOfWeek(val NosqlCreateRequestApplianceSettingsRepairFullDayOfWeek) {
	s.DayOfWeek = val
}

// SetTime sets the value of Time.
func (s *NosqlCreateRequestApplianceSettingsRepairFull) SetTime(val string) {
	s.Time = val
}

// 実行曜日.
type NosqlCreateRequestApplianceSettingsRepairFullDayOfWeek string

const (
	NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekSun NosqlCreateRequestApplianceSettingsRepairFullDayOfWeek = "sun"
	NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekMon NosqlCreateRequestApplianceSettingsRepairFullDayOfWeek = "mon"
	NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekTue NosqlCreateRequestApplianceSettingsRepairFullDayOfWeek = "tue"
	NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekWed NosqlCreateRequestApplianceSettingsRepairFullDayOfWeek = "wed"
	NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekThu NosqlCreateRequestApplianceSettingsRepairFullDayOfWeek = "thu"
	NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekFri NosqlCreateRequestApplianceSettingsRepairFullDayOfWeek = "fri"
	NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekSat NosqlCreateRequestApplianceSettingsRepairFullDayOfWeek = "sat"
)

// AllValues returns all NosqlCreateRequestApplianceSettingsRepairFullDayOfWeek values.
func (NosqlCreateRequestApplianceSettingsRepairFullDayOfWeek) AllValues() []NosqlCreateRequestApplianceSettingsRepairFullDayOfWeek {
	return []NosqlCreateRequestApplianceSettingsRepairFullDayOfWeek{
		NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekSun,
		NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekMon,
		NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekTue,
		NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekWed,
		NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekThu,
		NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekFri,
		NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekSat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlCreateRequestApplianceSettingsRepairFullDayOfWeek) MarshalText() ([]byte, error) {
	switch s {
	case NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekSun:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekMon:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekTue:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekWed:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekThu:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekFri:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekSat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlCreateRequestApplianceSettingsRepairFullDayOfWeek) UnmarshalText(data []byte) error {
	switch NosqlCreateRequestApplianceSettingsRepairFullDayOfWeek(data) {
	case NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekSun:
		*s = NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekSun
		return nil
	case NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekMon:
		*s = NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekMon
		return nil
	case NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekTue:
		*s = NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekTue
		return nil
	case NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekWed:
		*s = NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekWed
		return nil
	case NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekThu:
		*s = NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekThu
		return nil
	case NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekFri:
		*s = NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekFri
		return nil
	case NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekSat:
		*s = NosqlCreateRequestApplianceSettingsRepairFullDayOfWeekSat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 7日ごとの実行間隔（日数）.
type NosqlCreateRequestApplianceSettingsRepairFullInterval int

const (
	NosqlCreateRequestApplianceSettingsRepairFullInterval7  NosqlCreateRequestApplianceSettingsRepairFullInterval = 7
	NosqlCreateRequestApplianceSettingsRepairFullInterval14 NosqlCreateRequestApplianceSettingsRepairFullInterval = 14
	NosqlCreateRequestApplianceSettingsRepairFullInterval21 NosqlCreateRequestApplianceSettingsRepairFullInterval = 21
	NosqlCreateRequestApplianceSettingsRepairFullInterval28 NosqlCreateRequestApplianceSettingsRepairFullInterval = 28
)

// AllValues returns all NosqlCreateRequestApplianceSettingsRepairFullInterval values.
func (NosqlCreateRequestApplianceSettingsRepairFullInterval) AllValues() []NosqlCreateRequestApplianceSettingsRepairFullInterval {
	return []NosqlCreateRequestApplianceSettingsRepairFullInterval{
		NosqlCreateRequestApplianceSettingsRepairFullInterval7,
		NosqlCreateRequestApplianceSettingsRepairFullInterval14,
		NosqlCreateRequestApplianceSettingsRepairFullInterval21,
		NosqlCreateRequestApplianceSettingsRepairFullInterval28,
	}
}

// 増分リペア設定.
type NosqlCreateRequestApplianceSettingsRepairIncremental struct {
	// 実行曜日.
	DaysOfWeek []NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem `json:"DaysOfWeek"`
	// 実行時間.
	Time string `json:"Time"`
}

// GetDaysOfWeek returns the value of DaysOfWeek.
func (s *NosqlCreateRequestApplianceSettingsRepairIncremental) GetDaysOfWeek() []NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem {
	return s.DaysOfWeek
}

// GetTime returns the value of Time.
func (s *NosqlCreateRequestApplianceSettingsRepairIncremental) GetTime() string {
	return s.Time
}

// SetDaysOfWeek sets the value of DaysOfWeek.
func (s *NosqlCreateRequestApplianceSettingsRepairIncremental) SetDaysOfWeek(val []NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem) {
	s.DaysOfWeek = val
}

// SetTime sets the value of Time.
func (s *NosqlCreateRequestApplianceSettingsRepairIncremental) SetTime(val string) {
	s.Time = val
}

type NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem string

const (
	NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSun NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem = "sun"
	NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemMon NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem = "mon"
	NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemTue NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem = "tue"
	NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemWed NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem = "wed"
	NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemThu NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem = "thu"
	NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemFri NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem = "fri"
	NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSat NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem = "sat"
)

// AllValues returns all NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem values.
func (NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem) AllValues() []NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem {
	return []NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem{
		NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSun,
		NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemMon,
		NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemTue,
		NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemWed,
		NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemThu,
		NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemFri,
		NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem) MarshalText() ([]byte, error) {
	switch s {
	case NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSun:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemMon:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemTue:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemWed:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemThu:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemFri:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem) UnmarshalText(data []byte) error {
	switch NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem(data) {
	case NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSun:
		*s = NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSun
		return nil
	case NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemMon:
		*s = NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemMon
		return nil
	case NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemTue:
		*s = NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemTue
		return nil
	case NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemWed:
		*s = NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemWed
		return nil
	case NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemThu:
		*s = NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemThu
		return nil
	case NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemFri:
		*s = NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemFri
		return nil
	case NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSat:
		*s = NosqlCreateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type NosqlCreateRequestApplianceUserInterfacesItem struct {
	// スイッチ.
	Switch NosqlCreateRequestApplianceUserInterfacesItemSwitch `json:"Switch"`
	// ユーザIPアドレス1
	// **新規作成時・ノード追加時必須**.
	UserIPAddress1 netip.Addr `json:"UserIPAddress1"`
	// ユーザIPアドレス2
	// **新規作成時・ノード追加時必須**.
	UserIPAddress2 OptIPv4 `json:"UserIPAddress2"`
	// ユーザIPアドレス3
	// **新規作成時必須**.
	UserIPAddress3 OptIPv4                                                    `json:"UserIPAddress3"`
	UserSubnet     OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet `json:"UserSubnet"`
}

// GetSwitch returns the value of Switch.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) GetSwitch() NosqlCreateRequestApplianceUserInterfacesItemSwitch {
	return s.Switch
}

// GetUserIPAddress1 returns the value of UserIPAddress1.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) GetUserIPAddress1() netip.Addr {
	return s.UserIPAddress1
}

// GetUserIPAddress2 returns the value of UserIPAddress2.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) GetUserIPAddress2() OptIPv4 {
	return s.UserIPAddress2
}

// GetUserIPAddress3 returns the value of UserIPAddress3.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) GetUserIPAddress3() OptIPv4 {
	return s.UserIPAddress3
}

// GetUserSubnet returns the value of UserSubnet.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) GetUserSubnet() OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet {
	return s.UserSubnet
}

// SetSwitch sets the value of Switch.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) SetSwitch(val NosqlCreateRequestApplianceUserInterfacesItemSwitch) {
	s.Switch = val
}

// SetUserIPAddress1 sets the value of UserIPAddress1.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) SetUserIPAddress1(val netip.Addr) {
	s.UserIPAddress1 = val
}

// SetUserIPAddress2 sets the value of UserIPAddress2.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) SetUserIPAddress2(val OptIPv4) {
	s.UserIPAddress2 = val
}

// SetUserIPAddress3 sets the value of UserIPAddress3.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) SetUserIPAddress3(val OptIPv4) {
	s.UserIPAddress3 = val
}

// SetUserSubnet sets the value of UserSubnet.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) SetUserSubnet(val OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet) {
	s.UserSubnet = val
}

// スイッチ.
type NosqlCreateRequestApplianceUserInterfacesItemSwitch struct {
	// スイッチID
	// **新規作成時・ノード追加時必須**.
	ID string `json:"ID"`
}

// GetID returns the value of ID.
func (s *NosqlCreateRequestApplianceUserInterfacesItemSwitch) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *NosqlCreateRequestApplianceUserInterfacesItemSwitch) SetID(val string) {
	s.ID = val
}

type NosqlCreateRequestApplianceUserInterfacesItemUserSubnet struct {
	// ゲートウェイのアドレス
	// **新規作成時・ノード追加時必須**.
	DefaultRoute string `json:"DefaultRoute"`
	// ネットマスク
	// **新規作成時・ノード追加時必須**.
	NetworkMaskLen int `json:"NetworkMaskLen"`
}

// GetDefaultRoute returns the value of DefaultRoute.
func (s *NosqlCreateRequestApplianceUserInterfacesItemUserSubnet) GetDefaultRoute() string {
	return s.DefaultRoute
}

// GetNetworkMaskLen returns the value of NetworkMaskLen.
func (s *NosqlCreateRequestApplianceUserInterfacesItemUserSubnet) GetNetworkMaskLen() int {
	return s.NetworkMaskLen
}

// SetDefaultRoute sets the value of DefaultRoute.
func (s *NosqlCreateRequestApplianceUserInterfacesItemUserSubnet) SetDefaultRoute(val string) {
	s.DefaultRoute = val
}

// SetNetworkMaskLen sets the value of NetworkMaskLen.
func (s *NosqlCreateRequestApplianceUserInterfacesItemUserSubnet) SetNetworkMaskLen(val int) {
	s.NetworkMaskLen = val
}

// Ref: #/components/schemas/NosqlCreateResponse
type NosqlCreateResponse struct {
	Appliance NosqlAppliance `json:"Appliance"`
	// クラス.
	Class OptString `json:"Class"`
	// NoSQLの名前.
	Name OptString `json:"Name"`
	// NoSQLの説明.
	Description  OptString                          `json:"Description"`
	Plan         OptPlan                            `json:"Plan"`
	Settings     OptNosqlSettings                   `json:"Settings"`
	Remark       OptNosqlRemark                     `json:"Remark"`
	ID           string                             `json:"ID"`
	Account      OptNosqlCreateResponseAccount      `json:"Account"`
	Tags         OptNilTags                         `json:"Tags"`
	Availability OptInt                             `json:"Availability"`
	ServerCount  OptInt                             `json:"ServerCount"`
	HiddenRemark OptNosqlCreateResponseHiddenRemark `json:"HiddenRemark"`
	Success      OptSuccess                         `json:"Success"`
	IsOk         OptIsOk                            `json:"is_ok"`
}

// GetAppliance returns the value of Appliance.
func (s *NosqlCreateResponse) GetAppliance() NosqlAppliance {
	return s.Appliance
}

// GetClass returns the value of Class.
func (s *NosqlCreateResponse) GetClass() OptString {
	return s.Class
}

// GetName returns the value of Name.
func (s *NosqlCreateResponse) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *NosqlCreateResponse) GetDescription() OptString {
	return s.Description
}

// GetPlan returns the value of Plan.
func (s *NosqlCreateResponse) GetPlan() OptPlan {
	return s.Plan
}

// GetSettings returns the value of Settings.
func (s *NosqlCreateResponse) GetSettings() OptNosqlSettings {
	return s.Settings
}

// GetRemark returns the value of Remark.
func (s *NosqlCreateResponse) GetRemark() OptNosqlRemark {
	return s.Remark
}

// GetID returns the value of ID.
func (s *NosqlCreateResponse) GetID() string {
	return s.ID
}

// GetAccount returns the value of Account.
func (s *NosqlCreateResponse) GetAccount() OptNosqlCreateResponseAccount {
	return s.Account
}

// GetTags returns the value of Tags.
func (s *NosqlCreateResponse) GetTags() OptNilTags {
	return s.Tags
}

// GetAvailability returns the value of Availability.
func (s *NosqlCreateResponse) GetAvailability() OptInt {
	return s.Availability
}

// GetServerCount returns the value of ServerCount.
func (s *NosqlCreateResponse) GetServerCount() OptInt {
	return s.ServerCount
}

// GetHiddenRemark returns the value of HiddenRemark.
func (s *NosqlCreateResponse) GetHiddenRemark() OptNosqlCreateResponseHiddenRemark {
	return s.HiddenRemark
}

// GetSuccess returns the value of Success.
func (s *NosqlCreateResponse) GetSuccess() OptSuccess {
	return s.Success
}

// GetIsOk returns the value of IsOk.
func (s *NosqlCreateResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetAppliance sets the value of Appliance.
func (s *NosqlCreateResponse) SetAppliance(val NosqlAppliance) {
	s.Appliance = val
}

// SetClass sets the value of Class.
func (s *NosqlCreateResponse) SetClass(val OptString) {
	s.Class = val
}

// SetName sets the value of Name.
func (s *NosqlCreateResponse) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *NosqlCreateResponse) SetDescription(val OptString) {
	s.Description = val
}

// SetPlan sets the value of Plan.
func (s *NosqlCreateResponse) SetPlan(val OptPlan) {
	s.Plan = val
}

// SetSettings sets the value of Settings.
func (s *NosqlCreateResponse) SetSettings(val OptNosqlSettings) {
	s.Settings = val
}

// SetRemark sets the value of Remark.
func (s *NosqlCreateResponse) SetRemark(val OptNosqlRemark) {
	s.Remark = val
}

// SetID sets the value of ID.
func (s *NosqlCreateResponse) SetID(val string) {
	s.ID = val
}

// SetAccount sets the value of Account.
func (s *NosqlCreateResponse) SetAccount(val OptNosqlCreateResponseAccount) {
	s.Account = val
}

// SetTags sets the value of Tags.
func (s *NosqlCreateResponse) SetTags(val OptNilTags) {
	s.Tags = val
}

// SetAvailability sets the value of Availability.
func (s *NosqlCreateResponse) SetAvailability(val OptInt) {
	s.Availability = val
}

// SetServerCount sets the value of ServerCount.
func (s *NosqlCreateResponse) SetServerCount(val OptInt) {
	s.ServerCount = val
}

// SetHiddenRemark sets the value of HiddenRemark.
func (s *NosqlCreateResponse) SetHiddenRemark(val OptNosqlCreateResponseHiddenRemark) {
	s.HiddenRemark = val
}

// SetSuccess sets the value of Success.
func (s *NosqlCreateResponse) SetSuccess(val OptSuccess) {
	s.Success = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlCreateResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*NosqlCreateResponse) createDBRes() {}

type NosqlCreateResponseAccount struct {
	ID OptString `json:"ID"`
}

// GetID returns the value of ID.
func (s *NosqlCreateResponseAccount) GetID() OptString {
	return s.ID
}

// SetID sets the value of ID.
func (s *NosqlCreateResponseAccount) SetID(val OptString) {
	s.ID = val
}

type NosqlCreateResponseHiddenRemark struct {
	PlanSpec  OptNosqlCreateResponseHiddenRemarkPlanSpec  `json:"PlanSpec"`
	Encrypted OptNosqlCreateResponseHiddenRemarkEncrypted `json:"Encrypted"`
}

// GetPlanSpec returns the value of PlanSpec.
func (s *NosqlCreateResponseHiddenRemark) GetPlanSpec() OptNosqlCreateResponseHiddenRemarkPlanSpec {
	return s.PlanSpec
}

// GetEncrypted returns the value of Encrypted.
func (s *NosqlCreateResponseHiddenRemark) GetEncrypted() OptNosqlCreateResponseHiddenRemarkEncrypted {
	return s.Encrypted
}

// SetPlanSpec sets the value of PlanSpec.
func (s *NosqlCreateResponseHiddenRemark) SetPlanSpec(val OptNosqlCreateResponseHiddenRemarkPlanSpec) {
	s.PlanSpec = val
}

// SetEncrypted sets the value of Encrypted.
func (s *NosqlCreateResponseHiddenRemark) SetEncrypted(val OptNosqlCreateResponseHiddenRemarkEncrypted) {
	s.Encrypted = val
}

type NosqlCreateResponseHiddenRemarkEncrypted struct {
	Algorithm   OptString `json:"Algorithm"`
	IV          OptString `json:"IV"`
	MD5         OptString `json:"md5"`
	Associative OptBool   `json:"Associative"`
	Data        OptString `json:"Data"`
}

// GetAlgorithm returns the value of Algorithm.
func (s *NosqlCreateResponseHiddenRemarkEncrypted) GetAlgorithm() OptString {
	return s.Algorithm
}

// GetIV returns the value of IV.
func (s *NosqlCreateResponseHiddenRemarkEncrypted) GetIV() OptString {
	return s.IV
}

// GetMD5 returns the value of MD5.
func (s *NosqlCreateResponseHiddenRemarkEncrypted) GetMD5() OptString {
	return s.MD5
}

// GetAssociative returns the value of Associative.
func (s *NosqlCreateResponseHiddenRemarkEncrypted) GetAssociative() OptBool {
	return s.Associative
}

// GetData returns the value of Data.
func (s *NosqlCreateResponseHiddenRemarkEncrypted) GetData() OptString {
	return s.Data
}

// SetAlgorithm sets the value of Algorithm.
func (s *NosqlCreateResponseHiddenRemarkEncrypted) SetAlgorithm(val OptString) {
	s.Algorithm = val
}

// SetIV sets the value of IV.
func (s *NosqlCreateResponseHiddenRemarkEncrypted) SetIV(val OptString) {
	s.IV = val
}

// SetMD5 sets the value of MD5.
func (s *NosqlCreateResponseHiddenRemarkEncrypted) SetMD5(val OptString) {
	s.MD5 = val
}

// SetAssociative sets the value of Associative.
func (s *NosqlCreateResponseHiddenRemarkEncrypted) SetAssociative(val OptBool) {
	s.Associative = val
}

// SetData sets the value of Data.
func (s *NosqlCreateResponseHiddenRemarkEncrypted) SetData(val OptString) {
	s.Data = val
}

type NosqlCreateResponseHiddenRemarkPlanSpec struct {
	Note         OptNosqlCreateResponseHiddenRemarkPlanSpecNote `json:"Note"`
	ServiceClass OptString                                      `json:"ServiceClass"`
}

// GetNote returns the value of Note.
func (s *NosqlCreateResponseHiddenRemarkPlanSpec) GetNote() OptNosqlCreateResponseHiddenRemarkPlanSpecNote {
	return s.Note
}

// GetServiceClass returns the value of ServiceClass.
func (s *NosqlCreateResponseHiddenRemarkPlanSpec) GetServiceClass() OptString {
	return s.ServiceClass
}

// SetNote sets the value of Note.
func (s *NosqlCreateResponseHiddenRemarkPlanSpec) SetNote(val OptNosqlCreateResponseHiddenRemarkPlanSpecNote) {
	s.Note = val
}

// SetServiceClass sets the value of ServiceClass.
func (s *NosqlCreateResponseHiddenRemarkPlanSpec) SetServiceClass(val OptString) {
	s.ServiceClass = val
}

type NosqlCreateResponseHiddenRemarkPlanSpecNote struct {
	ID OptString `json:"ID"`
}

// GetID returns the value of ID.
func (s *NosqlCreateResponseHiddenRemarkPlanSpecNote) GetID() OptString {
	return s.ID
}

// SetID sets the value of ID.
func (s *NosqlCreateResponseHiddenRemarkPlanSpecNote) SetID(val OptString) {
	s.ID = val
}

// Ref: #/components/schemas/NosqlGetParameter
type NosqlGetParameter struct {
	// 設定項目ID.
	SettingItemId string `json:"settingItemId"`
	// 設定項目名.
	SettingItem string `json:"settingItem"`
	// デフォルト値.
	DefaultValue OptString `json:"defaultValue"`
	// 説明.
	Description string `json:"description"`
	// パラメータオプション.
	ParameterOptions []string `json:"parameterOptions"`
	// 設定値.
	SettingValue OptString `json:"settingValue"`
}

// GetSettingItemId returns the value of SettingItemId.
func (s *NosqlGetParameter) GetSettingItemId() string {
	return s.SettingItemId
}

// GetSettingItem returns the value of SettingItem.
func (s *NosqlGetParameter) GetSettingItem() string {
	return s.SettingItem
}

// GetDefaultValue returns the value of DefaultValue.
func (s *NosqlGetParameter) GetDefaultValue() OptString {
	return s.DefaultValue
}

// GetDescription returns the value of Description.
func (s *NosqlGetParameter) GetDescription() string {
	return s.Description
}

// GetParameterOptions returns the value of ParameterOptions.
func (s *NosqlGetParameter) GetParameterOptions() []string {
	return s.ParameterOptions
}

// GetSettingValue returns the value of SettingValue.
func (s *NosqlGetParameter) GetSettingValue() OptString {
	return s.SettingValue
}

// SetSettingItemId sets the value of SettingItemId.
func (s *NosqlGetParameter) SetSettingItemId(val string) {
	s.SettingItemId = val
}

// SetSettingItem sets the value of SettingItem.
func (s *NosqlGetParameter) SetSettingItem(val string) {
	s.SettingItem = val
}

// SetDefaultValue sets the value of DefaultValue.
func (s *NosqlGetParameter) SetDefaultValue(val OptString) {
	s.DefaultValue = val
}

// SetDescription sets the value of Description.
func (s *NosqlGetParameter) SetDescription(val string) {
	s.Description = val
}

// SetParameterOptions sets the value of ParameterOptions.
func (s *NosqlGetParameter) SetParameterOptions(val []string) {
	s.ParameterOptions = val
}

// SetSettingValue sets the value of SettingValue.
func (s *NosqlGetParameter) SetSettingValue(val OptString) {
	s.SettingValue = val
}

// Ref: #/components/schemas/NosqlGetResponse
type NosqlGetResponse struct {
	Appliance GetNosqlAppliance `json:"Appliance"`
	IsOk      OptIsOk           `json:"is_ok"`
}

// GetAppliance returns the value of Appliance.
func (s *NosqlGetResponse) GetAppliance() GetNosqlAppliance {
	return s.Appliance
}

// GetIsOk returns the value of IsOk.
func (s *NosqlGetResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetAppliance sets the value of Appliance.
func (s *NosqlGetResponse) SetAppliance(val GetNosqlAppliance) {
	s.Appliance = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlGetResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*NosqlGetResponse) getDBRes() {}

// Ref: #/components/schemas/NosqlGetVersionResponse
type NosqlGetVersionResponse struct {
	Nosql OptNosqlGetVersionResponseNosql `json:"nosql"`
	// 成功のレスポンス.
	IsOk OptBool `json:"is_ok"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlGetVersionResponse) GetNosql() OptNosqlGetVersionResponseNosql {
	return s.Nosql
}

// GetIsOk returns the value of IsOk.
func (s *NosqlGetVersionResponse) GetIsOk() OptBool {
	return s.IsOk
}

// SetNosql sets the value of Nosql.
func (s *NosqlGetVersionResponse) SetNosql(val OptNosqlGetVersionResponseNosql) {
	s.Nosql = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlGetVersionResponse) SetIsOk(val OptBool) {
	s.IsOk = val
}

func (*NosqlGetVersionResponse) getVersionRes() {}

type NosqlGetVersionResponseNosql struct {
	// 現在のNoSQLのバージョン.
	DatabaseVersion string `json:"DatabaseVersion"`
	// 更新可能なバージョンのリスト.
	UpgradableVersions []NosqlGetVersionResponseNosqlUpgradableVersionsItem `json:"UpgradableVersions"`
}

// GetDatabaseVersion returns the value of DatabaseVersion.
func (s *NosqlGetVersionResponseNosql) GetDatabaseVersion() string {
	return s.DatabaseVersion
}

// GetUpgradableVersions returns the value of UpgradableVersions.
func (s *NosqlGetVersionResponseNosql) GetUpgradableVersions() []NosqlGetVersionResponseNosqlUpgradableVersionsItem {
	return s.UpgradableVersions
}

// SetDatabaseVersion sets the value of DatabaseVersion.
func (s *NosqlGetVersionResponseNosql) SetDatabaseVersion(val string) {
	s.DatabaseVersion = val
}

// SetUpgradableVersions sets the value of UpgradableVersions.
func (s *NosqlGetVersionResponseNosql) SetUpgradableVersions(val []NosqlGetVersionResponseNosqlUpgradableVersionsItem) {
	s.UpgradableVersions = val
}

type NosqlGetVersionResponseNosqlUpgradableVersionsItem struct {
	// 更新可能なバージョン.
	Version string `json:"version"`
}

// GetVersion returns the value of Version.
func (s *NosqlGetVersionResponseNosqlUpgradableVersionsItem) GetVersion() string {
	return s.Version
}

// SetVersion sets the value of Version.
func (s *NosqlGetVersionResponseNosqlUpgradableVersionsItem) SetVersion(val string) {
	s.Version = val
}

// Ref: #/components/schemas/NosqlIsOkResponse
type NosqlIsOkResponse struct {
	Nosql OptNosqlIsOkResponseNosql `json:"Nosql"`
	IsOk  OptIsOk                   `json:"is_ok"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlIsOkResponse) GetNosql() OptNosqlIsOkResponseNosql {
	return s.Nosql
}

// GetIsOk returns the value of IsOk.
func (s *NosqlIsOkResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetNosql sets the value of Nosql.
func (s *NosqlIsOkResponse) SetNosql(val OptNosqlIsOkResponseNosql) {
	s.Nosql = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlIsOkResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*NosqlIsOkResponse) updateConfigDBRes() {}

type NosqlIsOkResponseNosql struct {
	IsOk OptIsOk `json:"is_ok"`
}

// GetIsOk returns the value of IsOk.
func (s *NosqlIsOkResponseNosql) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetIsOk sets the value of IsOk.
func (s *NosqlIsOkResponseNosql) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

// Ref: #/components/schemas/NosqlListResponse
type NosqlListResponse struct {
	From       int                 `json:"From"`
	Count      int                 `json:"Count"`
	Total      int                 `json:"Total"`
	Appliances []GetNosqlAppliance `json:"Appliances"`
	IsOk       OptIsOk             `json:"is_ok"`
}

// GetFrom returns the value of From.
func (s *NosqlListResponse) GetFrom() int {
	return s.From
}

// GetCount returns the value of Count.
func (s *NosqlListResponse) GetCount() int {
	return s.Count
}

// GetTotal returns the value of Total.
func (s *NosqlListResponse) GetTotal() int {
	return s.Total
}

// GetAppliances returns the value of Appliances.
func (s *NosqlListResponse) GetAppliances() []GetNosqlAppliance {
	return s.Appliances
}

// GetIsOk returns the value of IsOk.
func (s *NosqlListResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetFrom sets the value of From.
func (s *NosqlListResponse) SetFrom(val int) {
	s.From = val
}

// SetCount sets the value of Count.
func (s *NosqlListResponse) SetCount(val int) {
	s.Count = val
}

// SetTotal sets the value of Total.
func (s *NosqlListResponse) SetTotal(val int) {
	s.Total = val
}

// SetAppliances sets the value of Appliances.
func (s *NosqlListResponse) SetAppliances(val []GetNosqlAppliance) {
	s.Appliances = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlListResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*NosqlListResponse) listDBRes() {}

// ノードのアプライアンス情報.
// Ref: #/components/schemas/NosqlNodeAppliance
type NosqlNodeAppliance struct {
	// アプライアンスID.
	ID           string       `json:"ID"`
	Availability Availability `json:"Availability"`
	// ゾーン情報.
	Zone OptNosqlNodeApplianceZone `json:"Zone"`
	// ノードの詳細情報.
	Nodes []NosqldbNodeStatus `json:"Nodes"`
}

// GetID returns the value of ID.
func (s *NosqlNodeAppliance) GetID() string {
	return s.ID
}

// GetAvailability returns the value of Availability.
func (s *NosqlNodeAppliance) GetAvailability() Availability {
	return s.Availability
}

// GetZone returns the value of Zone.
func (s *NosqlNodeAppliance) GetZone() OptNosqlNodeApplianceZone {
	return s.Zone
}

// GetNodes returns the value of Nodes.
func (s *NosqlNodeAppliance) GetNodes() []NosqldbNodeStatus {
	return s.Nodes
}

// SetID sets the value of ID.
func (s *NosqlNodeAppliance) SetID(val string) {
	s.ID = val
}

// SetAvailability sets the value of Availability.
func (s *NosqlNodeAppliance) SetAvailability(val Availability) {
	s.Availability = val
}

// SetZone sets the value of Zone.
func (s *NosqlNodeAppliance) SetZone(val OptNosqlNodeApplianceZone) {
	s.Zone = val
}

// SetNodes sets the value of Nodes.
func (s *NosqlNodeAppliance) SetNodes(val []NosqldbNodeStatus) {
	s.Nodes = val
}

// ゾーン情報.
type NosqlNodeApplianceZone struct {
	// ゾーン名.
	Name OptString `json:"Name"`
}

// GetName returns the value of Name.
func (s *NosqlNodeApplianceZone) GetName() OptString {
	return s.Name
}

// SetName sets the value of Name.
func (s *NosqlNodeApplianceZone) SetName(val OptString) {
	s.Name = val
}

// Ref: #/components/schemas/NosqlOkResponse
type NosqlOkResponse struct {
	Nosql OptNosqlOkResponseNosql `json:"nosql"`
	IsOk  OptIsOk                 `json:"is_ok"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlOkResponse) GetNosql() OptNosqlOkResponseNosql {
	return s.Nosql
}

// GetIsOk returns the value of IsOk.
func (s *NosqlOkResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetNosql sets the value of Nosql.
func (s *NosqlOkResponse) SetNosql(val OptNosqlOkResponseNosql) {
	s.Nosql = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlOkResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*NosqlOkResponse) createBackupRes()  {}
func (*NosqlOkResponse) deleteBackupRes()  {}
func (*NosqlOkResponse) restoreBackupRes() {}

type NosqlOkResponseNosql struct {
	IsOk OptIsOk `json:"is_ok"`
}

// GetIsOk returns the value of IsOk.
func (s *NosqlOkResponseNosql) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetIsOk sets the value of IsOk.
func (s *NosqlOkResponseNosql) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

// Ref: #/components/schemas/NosqlPutParameter
type NosqlPutParameter struct {
	// 設定項目ID.
	SettingItemId string `json:"settingItemId"`
	// 設定値.
	SettingValue string `json:"settingValue"`
}

// GetSettingItemId returns the value of SettingItemId.
func (s *NosqlPutParameter) GetSettingItemId() string {
	return s.SettingItemId
}

// GetSettingValue returns the value of SettingValue.
func (s *NosqlPutParameter) GetSettingValue() string {
	return s.SettingValue
}

// SetSettingItemId sets the value of SettingItemId.
func (s *NosqlPutParameter) SetSettingItemId(val string) {
	s.SettingItemId = val
}

// SetSettingValue sets the value of SettingValue.
func (s *NosqlPutParameter) SetSettingValue(val string) {
	s.SettingValue = val
}

// Ref: #/components/schemas/NosqlPutVersionRequest
type NosqlPutVersionRequest struct {
	Nosql NosqlVersion `json:"nosql"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlPutVersionRequest) GetNosql() NosqlVersion {
	return s.Nosql
}

// SetNosql sets the value of Nosql.
func (s *NosqlPutVersionRequest) SetNosql(val NosqlVersion) {
	s.Nosql = val
}

// Ref: #/components/schemas/NosqlPutVersionResponse
type NosqlPutVersionResponse struct {
	Nosql OptNosqlVersion `json:"nosql"`
	IsOk  OptIsOk         `json:"is_ok"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlPutVersionResponse) GetNosql() OptNosqlVersion {
	return s.Nosql
}

// GetIsOk returns the value of IsOk.
func (s *NosqlPutVersionResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetNosql sets the value of Nosql.
func (s *NosqlPutVersionResponse) SetNosql(val OptNosqlVersion) {
	s.Nosql = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlPutVersionResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*NosqlPutVersionResponse) putVersionRes() {}

// Ref: #/components/schemas/NosqlRemark
type NosqlRemark struct {
	Nosql   NosqlRemarkNosql         `json:"Nosql"`
	Servers []NosqlRemarkServersItem `json:"Servers"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlRemark) GetNosql() NosqlRemarkNosql {
	return s.Nosql
}

// GetServers returns the value of Servers.
func (s *NosqlRemark) GetServers() []NosqlRemarkServersItem {
	return s.Servers
}

// SetNosql sets the value of Nosql.
func (s *NosqlRemark) SetNosql(val NosqlRemarkNosql) {
	s.Nosql = val
}

// SetServers sets the value of Servers.
func (s *NosqlRemark) SetServers(val []NosqlRemarkServersItem) {
	s.Servers = val
}

type NosqlRemarkNosql struct {
	// プライマリノード情報。
	// **ノード追加時必須**
	// ノード追加を行う場合は、対象となる既存NoSQLのアプライアンス情報を設定してください。.
	PrimaryNodes OptNosqlRemarkNosqlPrimaryNodes `json:"PrimaryNodes"`
	// データベースに使用するエンジン
	// **新規作成時必須**.
	DatabaseEngine OptNosqlRemarkNosqlDatabaseEngine `json:"DatabaseEngine"`
	// データベースバージョン
	// **新規作成時必須**.
	DatabaseVersion OptString `json:"DatabaseVersion"`
	// デフォルトユーザ名
	// **新規作成時必須**.
	DefaultUser OptString `json:"DefaultUser"`
	// ディスクサイズ(MB)
	// **新規作成時必須**.
	DiskSize OptNosqlRemarkNosqlDiskSize `json:"DiskSize"`
	// メモリ(MB)
	// **新規作成時必須**.
	Memory OptNosqlRemarkNosqlMemory `json:"Memory"`
	// ノード数
	// **新規作成時・ノード追加時必須**
	// 新規作成時は3、ノード追加時は2を指定してください。.
	Nodes int `json:"Nodes"`
	// ポート
	// **新規作成時必須**.
	Port OptInt `json:"Port"`
	// ストレージ
	// **新規作成時必須**.
	Storage OptNosqlRemarkNosqlStorage `json:"Storage"`
	// 仮想コア
	// **新規作成時必須**.
	Virtualcore OptNosqlRemarkNosqlVirtualcore `json:"Virtualcore"`
	// ゾーン
	// **新規作成時・ノード追加時必須**.
	Zone string `json:"Zone"`
}

// GetPrimaryNodes returns the value of PrimaryNodes.
func (s *NosqlRemarkNosql) GetPrimaryNodes() OptNosqlRemarkNosqlPrimaryNodes {
	return s.PrimaryNodes
}

// GetDatabaseEngine returns the value of DatabaseEngine.
func (s *NosqlRemarkNosql) GetDatabaseEngine() OptNosqlRemarkNosqlDatabaseEngine {
	return s.DatabaseEngine
}

// GetDatabaseVersion returns the value of DatabaseVersion.
func (s *NosqlRemarkNosql) GetDatabaseVersion() OptString {
	return s.DatabaseVersion
}

// GetDefaultUser returns the value of DefaultUser.
func (s *NosqlRemarkNosql) GetDefaultUser() OptString {
	return s.DefaultUser
}

// GetDiskSize returns the value of DiskSize.
func (s *NosqlRemarkNosql) GetDiskSize() OptNosqlRemarkNosqlDiskSize {
	return s.DiskSize
}

// GetMemory returns the value of Memory.
func (s *NosqlRemarkNosql) GetMemory() OptNosqlRemarkNosqlMemory {
	return s.Memory
}

// GetNodes returns the value of Nodes.
func (s *NosqlRemarkNosql) GetNodes() int {
	return s.Nodes
}

// GetPort returns the value of Port.
func (s *NosqlRemarkNosql) GetPort() OptInt {
	return s.Port
}

// GetStorage returns the value of Storage.
func (s *NosqlRemarkNosql) GetStorage() OptNosqlRemarkNosqlStorage {
	return s.Storage
}

// GetVirtualcore returns the value of Virtualcore.
func (s *NosqlRemarkNosql) GetVirtualcore() OptNosqlRemarkNosqlVirtualcore {
	return s.Virtualcore
}

// GetZone returns the value of Zone.
func (s *NosqlRemarkNosql) GetZone() string {
	return s.Zone
}

// SetPrimaryNodes sets the value of PrimaryNodes.
func (s *NosqlRemarkNosql) SetPrimaryNodes(val OptNosqlRemarkNosqlPrimaryNodes) {
	s.PrimaryNodes = val
}

// SetDatabaseEngine sets the value of DatabaseEngine.
func (s *NosqlRemarkNosql) SetDatabaseEngine(val OptNosqlRemarkNosqlDatabaseEngine) {
	s.DatabaseEngine = val
}

// SetDatabaseVersion sets the value of DatabaseVersion.
func (s *NosqlRemarkNosql) SetDatabaseVersion(val OptString) {
	s.DatabaseVersion = val
}

// SetDefaultUser sets the value of DefaultUser.
func (s *NosqlRemarkNosql) SetDefaultUser(val OptString) {
	s.DefaultUser = val
}

// SetDiskSize sets the value of DiskSize.
func (s *NosqlRemarkNosql) SetDiskSize(val OptNosqlRemarkNosqlDiskSize) {
	s.DiskSize = val
}

// SetMemory sets the value of Memory.
func (s *NosqlRemarkNosql) SetMemory(val OptNosqlRemarkNosqlMemory) {
	s.Memory = val
}

// SetNodes sets the value of Nodes.
func (s *NosqlRemarkNosql) SetNodes(val int) {
	s.Nodes = val
}

// SetPort sets the value of Port.
func (s *NosqlRemarkNosql) SetPort(val OptInt) {
	s.Port = val
}

// SetStorage sets the value of Storage.
func (s *NosqlRemarkNosql) SetStorage(val OptNosqlRemarkNosqlStorage) {
	s.Storage = val
}

// SetVirtualcore sets the value of Virtualcore.
func (s *NosqlRemarkNosql) SetVirtualcore(val OptNosqlRemarkNosqlVirtualcore) {
	s.Virtualcore = val
}

// SetZone sets the value of Zone.
func (s *NosqlRemarkNosql) SetZone(val string) {
	s.Zone = val
}

// データベースに使用するエンジン
// **新規作成時必須**.
type NosqlRemarkNosqlDatabaseEngine string

const (
	NosqlRemarkNosqlDatabaseEngineCassandra NosqlRemarkNosqlDatabaseEngine = "Cassandra"
)

// AllValues returns all NosqlRemarkNosqlDatabaseEngine values.
func (NosqlRemarkNosqlDatabaseEngine) AllValues() []NosqlRemarkNosqlDatabaseEngine {
	return []NosqlRemarkNosqlDatabaseEngine{
		NosqlRemarkNosqlDatabaseEngineCassandra,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlRemarkNosqlDatabaseEngine) MarshalText() ([]byte, error) {
	switch s {
	case NosqlRemarkNosqlDatabaseEngineCassandra:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlRemarkNosqlDatabaseEngine) UnmarshalText(data []byte) error {
	switch NosqlRemarkNosqlDatabaseEngine(data) {
	case NosqlRemarkNosqlDatabaseEngineCassandra:
		*s = NosqlRemarkNosqlDatabaseEngineCassandra
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ディスクサイズ(MB)
// **新規作成時必須**.
type NosqlRemarkNosqlDiskSize int

const (
	NosqlRemarkNosqlDiskSize102400 NosqlRemarkNosqlDiskSize = 102400
)

// AllValues returns all NosqlRemarkNosqlDiskSize values.
func (NosqlRemarkNosqlDiskSize) AllValues() []NosqlRemarkNosqlDiskSize {
	return []NosqlRemarkNosqlDiskSize{
		NosqlRemarkNosqlDiskSize102400,
	}
}

// メモリ(MB)
// **新規作成時必須**.
type NosqlRemarkNosqlMemory int

const (
	NosqlRemarkNosqlMemory8192 NosqlRemarkNosqlMemory = 8192
)

// AllValues returns all NosqlRemarkNosqlMemory values.
func (NosqlRemarkNosqlMemory) AllValues() []NosqlRemarkNosqlMemory {
	return []NosqlRemarkNosqlMemory{
		NosqlRemarkNosqlMemory8192,
	}
}

// プライマリノード情報。
// **ノード追加時必須**
// ノード追加を行う場合は、対象となる既存NoSQLのアプライアンス情報を設定してください。.
type NosqlRemarkNosqlPrimaryNodes struct {
	// 既存のNoSQLのアプライアンス情報
	// **ノード追加時必須**.
	Appliance NosqlRemarkNosqlPrimaryNodesAppliance `json:"Appliance"`
}

// GetAppliance returns the value of Appliance.
func (s *NosqlRemarkNosqlPrimaryNodes) GetAppliance() NosqlRemarkNosqlPrimaryNodesAppliance {
	return s.Appliance
}

// SetAppliance sets the value of Appliance.
func (s *NosqlRemarkNosqlPrimaryNodes) SetAppliance(val NosqlRemarkNosqlPrimaryNodesAppliance) {
	s.Appliance = val
}

// 既存のNoSQLのアプライアンス情報
// **ノード追加時必須**.
type NosqlRemarkNosqlPrimaryNodesAppliance struct {
	// 既存のNoSQLのアプライアンスID
	// **ノード追加時必須**.
	ID string `json:"ID"`
	// 既存のNoSQLのゾーン
	// **ノード追加時必須**.
	Zone NosqlRemarkNosqlPrimaryNodesApplianceZone `json:"Zone"`
}

// GetID returns the value of ID.
func (s *NosqlRemarkNosqlPrimaryNodesAppliance) GetID() string {
	return s.ID
}

// GetZone returns the value of Zone.
func (s *NosqlRemarkNosqlPrimaryNodesAppliance) GetZone() NosqlRemarkNosqlPrimaryNodesApplianceZone {
	return s.Zone
}

// SetID sets the value of ID.
func (s *NosqlRemarkNosqlPrimaryNodesAppliance) SetID(val string) {
	s.ID = val
}

// SetZone sets the value of Zone.
func (s *NosqlRemarkNosqlPrimaryNodesAppliance) SetZone(val NosqlRemarkNosqlPrimaryNodesApplianceZone) {
	s.Zone = val
}

// 既存のNoSQLのゾーン
// **ノード追加時必須**.
type NosqlRemarkNosqlPrimaryNodesApplianceZone struct {
	// 既存のNoSQLのゾーン情報
	// **ノード追加時必須**.
	Name string `json:"Name"`
}

// GetName returns the value of Name.
func (s *NosqlRemarkNosqlPrimaryNodesApplianceZone) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *NosqlRemarkNosqlPrimaryNodesApplianceZone) SetName(val string) {
	s.Name = val
}

// ストレージ
// **新規作成時必須**.
type NosqlRemarkNosqlStorage string

const (
	NosqlRemarkNosqlStorageSSD NosqlRemarkNosqlStorage = "SSD"
)

// AllValues returns all NosqlRemarkNosqlStorage values.
func (NosqlRemarkNosqlStorage) AllValues() []NosqlRemarkNosqlStorage {
	return []NosqlRemarkNosqlStorage{
		NosqlRemarkNosqlStorageSSD,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlRemarkNosqlStorage) MarshalText() ([]byte, error) {
	switch s {
	case NosqlRemarkNosqlStorageSSD:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlRemarkNosqlStorage) UnmarshalText(data []byte) error {
	switch NosqlRemarkNosqlStorage(data) {
	case NosqlRemarkNosqlStorageSSD:
		*s = NosqlRemarkNosqlStorageSSD
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 仮想コア
// **新規作成時必須**.
type NosqlRemarkNosqlVirtualcore int

const (
	NosqlRemarkNosqlVirtualcore3 NosqlRemarkNosqlVirtualcore = 3
)

// AllValues returns all NosqlRemarkNosqlVirtualcore values.
func (NosqlRemarkNosqlVirtualcore) AllValues() []NosqlRemarkNosqlVirtualcore {
	return []NosqlRemarkNosqlVirtualcore{
		NosqlRemarkNosqlVirtualcore3,
	}
}

type NosqlRemarkServersItem struct {
	// ユーザ側スイッチに接続するIPアドレス
	// **新規作成時・ノード追加時必須**
	// ※ノード数分指定する.
	UserIPAddress netip.Addr `json:"UserIPAddress"`
}

// GetUserIPAddress returns the value of UserIPAddress.
func (s *NosqlRemarkServersItem) GetUserIPAddress() netip.Addr {
	return s.UserIPAddress
}

// SetUserIPAddress sets the value of UserIPAddress.
func (s *NosqlRemarkServersItem) SetUserIPAddress(val netip.Addr) {
	s.UserIPAddress = val
}

// Ref: #/components/schemas/NosqlRepairRequest
type NosqlRepairRequest struct {
	Nosql OptNosqlRepairRequestNosql `json:"nosql"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlRepairRequest) GetNosql() OptNosqlRepairRequestNosql {
	return s.Nosql
}

// SetNosql sets the value of Nosql.
func (s *NosqlRepairRequest) SetNosql(val OptNosqlRepairRequestNosql) {
	s.Nosql = val
}

func (*NosqlRepairRequest) postNoSQLRepairRes() {}

type NosqlRepairRequestNosql struct {
	// リペアタイプ
	// | 値          | 説明      | 実行コマンド                 |
	// |-------------|-----------|-----------------------------|
	// | Incremental | 増分リペア | nodetool repair -pr         |
	// | Full        | 完全リペア | nodetool repair --full -pr  |.
	RepairType OptNosqlRepairRequestNosqlRepairType `json:"repairType"`
}

// GetRepairType returns the value of RepairType.
func (s *NosqlRepairRequestNosql) GetRepairType() OptNosqlRepairRequestNosqlRepairType {
	return s.RepairType
}

// SetRepairType sets the value of RepairType.
func (s *NosqlRepairRequestNosql) SetRepairType(val OptNosqlRepairRequestNosqlRepairType) {
	s.RepairType = val
}

// リペアタイプ
// | 値          | 説明      | 実行コマンド                 |
// |-------------|-----------|-----------------------------|
// | Incremental | 増分リペア | nodetool repair -pr         |
// | Full        | 完全リペア | nodetool repair --full -pr  |.
type NosqlRepairRequestNosqlRepairType string

const (
	NosqlRepairRequestNosqlRepairTypeIncremental NosqlRepairRequestNosqlRepairType = "Incremental"
	NosqlRepairRequestNosqlRepairTypeFull        NosqlRepairRequestNosqlRepairType = "Full"
)

// AllValues returns all NosqlRepairRequestNosqlRepairType values.
func (NosqlRepairRequestNosqlRepairType) AllValues() []NosqlRepairRequestNosqlRepairType {
	return []NosqlRepairRequestNosqlRepairType{
		NosqlRepairRequestNosqlRepairTypeIncremental,
		NosqlRepairRequestNosqlRepairTypeFull,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlRepairRequestNosqlRepairType) MarshalText() ([]byte, error) {
	switch s {
	case NosqlRepairRequestNosqlRepairTypeIncremental:
		return []byte(s), nil
	case NosqlRepairRequestNosqlRepairTypeFull:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlRepairRequestNosqlRepairType) UnmarshalText(data []byte) error {
	switch NosqlRepairRequestNosqlRepairType(data) {
	case NosqlRepairRequestNosqlRepairTypeIncremental:
		*s = NosqlRepairRequestNosqlRepairTypeIncremental
		return nil
	case NosqlRepairRequestNosqlRepairTypeFull:
		*s = NosqlRepairRequestNosqlRepairTypeFull
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/NosqlSettings
type NosqlSettings struct {
	// バックアップ情報.
	Backup OptNilNosqlSettingsBackup `json:"Backup"`
	// 送信元ネットワークアドレス.
	SourceNetwork []string `json:"SourceNetwork"`
	// 予備IPアドレス
	// **新規作成時必須**
	// ※デッドノード発生時、ノード切替を行う際に使用する予備のIPアドレス.
	ReserveIPAddress OptIPv4 `json:"ReserveIPAddress"`
	// 定期リペア設定.
	Repair OptNilNosqlSettingsRepair `json:"Repair"`
}

// GetBackup returns the value of Backup.
func (s *NosqlSettings) GetBackup() OptNilNosqlSettingsBackup {
	return s.Backup
}

// GetSourceNetwork returns the value of SourceNetwork.
func (s *NosqlSettings) GetSourceNetwork() []string {
	return s.SourceNetwork
}

// GetReserveIPAddress returns the value of ReserveIPAddress.
func (s *NosqlSettings) GetReserveIPAddress() OptIPv4 {
	return s.ReserveIPAddress
}

// GetRepair returns the value of Repair.
func (s *NosqlSettings) GetRepair() OptNilNosqlSettingsRepair {
	return s.Repair
}

// SetBackup sets the value of Backup.
func (s *NosqlSettings) SetBackup(val OptNilNosqlSettingsBackup) {
	s.Backup = val
}

// SetSourceNetwork sets the value of SourceNetwork.
func (s *NosqlSettings) SetSourceNetwork(val []string) {
	s.SourceNetwork = val
}

// SetReserveIPAddress sets the value of ReserveIPAddress.
func (s *NosqlSettings) SetReserveIPAddress(val OptIPv4) {
	s.ReserveIPAddress = val
}

// SetRepair sets the value of Repair.
func (s *NosqlSettings) SetRepair(val OptNilNosqlSettingsRepair) {
	s.Repair = val
}

// バックアップ情報.
type NosqlSettingsBackup struct {
	// バックアップ先（NFS URL形式）.
	Connect string `json:"Connect"`
	// バックアップスケジュール.
	DayOfWeek OptNilNosqlSettingsBackupDayOfWeekItemArray `json:"DayOfWeek"`
	// バックアップする時間.
	Time OptNilString `json:"Time"`
	// バックアップ数（1から8まで）.
	Rotate OptInt `json:"Rotate"`
}

// GetConnect returns the value of Connect.
func (s *NosqlSettingsBackup) GetConnect() string {
	return s.Connect
}

// GetDayOfWeek returns the value of DayOfWeek.
func (s *NosqlSettingsBackup) GetDayOfWeek() OptNilNosqlSettingsBackupDayOfWeekItemArray {
	return s.DayOfWeek
}

// GetTime returns the value of Time.
func (s *NosqlSettingsBackup) GetTime() OptNilString {
	return s.Time
}

// GetRotate returns the value of Rotate.
func (s *NosqlSettingsBackup) GetRotate() OptInt {
	return s.Rotate
}

// SetConnect sets the value of Connect.
func (s *NosqlSettingsBackup) SetConnect(val string) {
	s.Connect = val
}

// SetDayOfWeek sets the value of DayOfWeek.
func (s *NosqlSettingsBackup) SetDayOfWeek(val OptNilNosqlSettingsBackupDayOfWeekItemArray) {
	s.DayOfWeek = val
}

// SetTime sets the value of Time.
func (s *NosqlSettingsBackup) SetTime(val OptNilString) {
	s.Time = val
}

// SetRotate sets the value of Rotate.
func (s *NosqlSettingsBackup) SetRotate(val OptInt) {
	s.Rotate = val
}

type NosqlSettingsBackupDayOfWeekItem string

const (
	NosqlSettingsBackupDayOfWeekItemSun NosqlSettingsBackupDayOfWeekItem = "sun"
	NosqlSettingsBackupDayOfWeekItemMon NosqlSettingsBackupDayOfWeekItem = "mon"
	NosqlSettingsBackupDayOfWeekItemTue NosqlSettingsBackupDayOfWeekItem = "tue"
	NosqlSettingsBackupDayOfWeekItemWed NosqlSettingsBackupDayOfWeekItem = "wed"
	NosqlSettingsBackupDayOfWeekItemThu NosqlSettingsBackupDayOfWeekItem = "thu"
	NosqlSettingsBackupDayOfWeekItemFri NosqlSettingsBackupDayOfWeekItem = "fri"
	NosqlSettingsBackupDayOfWeekItemSat NosqlSettingsBackupDayOfWeekItem = "sat"
)

// AllValues returns all NosqlSettingsBackupDayOfWeekItem values.
func (NosqlSettingsBackupDayOfWeekItem) AllValues() []NosqlSettingsBackupDayOfWeekItem {
	return []NosqlSettingsBackupDayOfWeekItem{
		NosqlSettingsBackupDayOfWeekItemSun,
		NosqlSettingsBackupDayOfWeekItemMon,
		NosqlSettingsBackupDayOfWeekItemTue,
		NosqlSettingsBackupDayOfWeekItemWed,
		NosqlSettingsBackupDayOfWeekItemThu,
		NosqlSettingsBackupDayOfWeekItemFri,
		NosqlSettingsBackupDayOfWeekItemSat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlSettingsBackupDayOfWeekItem) MarshalText() ([]byte, error) {
	switch s {
	case NosqlSettingsBackupDayOfWeekItemSun:
		return []byte(s), nil
	case NosqlSettingsBackupDayOfWeekItemMon:
		return []byte(s), nil
	case NosqlSettingsBackupDayOfWeekItemTue:
		return []byte(s), nil
	case NosqlSettingsBackupDayOfWeekItemWed:
		return []byte(s), nil
	case NosqlSettingsBackupDayOfWeekItemThu:
		return []byte(s), nil
	case NosqlSettingsBackupDayOfWeekItemFri:
		return []byte(s), nil
	case NosqlSettingsBackupDayOfWeekItemSat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlSettingsBackupDayOfWeekItem) UnmarshalText(data []byte) error {
	switch NosqlSettingsBackupDayOfWeekItem(data) {
	case NosqlSettingsBackupDayOfWeekItemSun:
		*s = NosqlSettingsBackupDayOfWeekItemSun
		return nil
	case NosqlSettingsBackupDayOfWeekItemMon:
		*s = NosqlSettingsBackupDayOfWeekItemMon
		return nil
	case NosqlSettingsBackupDayOfWeekItemTue:
		*s = NosqlSettingsBackupDayOfWeekItemTue
		return nil
	case NosqlSettingsBackupDayOfWeekItemWed:
		*s = NosqlSettingsBackupDayOfWeekItemWed
		return nil
	case NosqlSettingsBackupDayOfWeekItemThu:
		*s = NosqlSettingsBackupDayOfWeekItemThu
		return nil
	case NosqlSettingsBackupDayOfWeekItemFri:
		*s = NosqlSettingsBackupDayOfWeekItemFri
		return nil
	case NosqlSettingsBackupDayOfWeekItemSat:
		*s = NosqlSettingsBackupDayOfWeekItemSat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 定期リペア設定.
type NosqlSettingsRepair struct {
	// 増分リペア設定.
	Incremental OptNosqlSettingsRepairIncremental `json:"Incremental"`
	// 完全リペア設定.
	Full OptNosqlSettingsRepairFull `json:"Full"`
}

// GetIncremental returns the value of Incremental.
func (s *NosqlSettingsRepair) GetIncremental() OptNosqlSettingsRepairIncremental {
	return s.Incremental
}

// GetFull returns the value of Full.
func (s *NosqlSettingsRepair) GetFull() OptNosqlSettingsRepairFull {
	return s.Full
}

// SetIncremental sets the value of Incremental.
func (s *NosqlSettingsRepair) SetIncremental(val OptNosqlSettingsRepairIncremental) {
	s.Incremental = val
}

// SetFull sets the value of Full.
func (s *NosqlSettingsRepair) SetFull(val OptNosqlSettingsRepairFull) {
	s.Full = val
}

// 完全リペア設定.
type NosqlSettingsRepairFull struct {
	// 7日ごとの実行間隔（日数）.
	Interval NosqlSettingsRepairFullInterval `json:"Interval"`
	// 実行曜日.
	DayOfWeek NosqlSettingsRepairFullDayOfWeek `json:"DayOfWeek"`
	// 実行時間.
	Time string `json:"Time"`
}

// GetInterval returns the value of Interval.
func (s *NosqlSettingsRepairFull) GetInterval() NosqlSettingsRepairFullInterval {
	return s.Interval
}

// GetDayOfWeek returns the value of DayOfWeek.
func (s *NosqlSettingsRepairFull) GetDayOfWeek() NosqlSettingsRepairFullDayOfWeek {
	return s.DayOfWeek
}

// GetTime returns the value of Time.
func (s *NosqlSettingsRepairFull) GetTime() string {
	return s.Time
}

// SetInterval sets the value of Interval.
func (s *NosqlSettingsRepairFull) SetInterval(val NosqlSettingsRepairFullInterval) {
	s.Interval = val
}

// SetDayOfWeek sets the value of DayOfWeek.
func (s *NosqlSettingsRepairFull) SetDayOfWeek(val NosqlSettingsRepairFullDayOfWeek) {
	s.DayOfWeek = val
}

// SetTime sets the value of Time.
func (s *NosqlSettingsRepairFull) SetTime(val string) {
	s.Time = val
}

// 実行曜日.
type NosqlSettingsRepairFullDayOfWeek string

const (
	NosqlSettingsRepairFullDayOfWeekSun NosqlSettingsRepairFullDayOfWeek = "sun"
	NosqlSettingsRepairFullDayOfWeekMon NosqlSettingsRepairFullDayOfWeek = "mon"
	NosqlSettingsRepairFullDayOfWeekTue NosqlSettingsRepairFullDayOfWeek = "tue"
	NosqlSettingsRepairFullDayOfWeekWed NosqlSettingsRepairFullDayOfWeek = "wed"
	NosqlSettingsRepairFullDayOfWeekThu NosqlSettingsRepairFullDayOfWeek = "thu"
	NosqlSettingsRepairFullDayOfWeekFri NosqlSettingsRepairFullDayOfWeek = "fri"
	NosqlSettingsRepairFullDayOfWeekSat NosqlSettingsRepairFullDayOfWeek = "sat"
)

// AllValues returns all NosqlSettingsRepairFullDayOfWeek values.
func (NosqlSettingsRepairFullDayOfWeek) AllValues() []NosqlSettingsRepairFullDayOfWeek {
	return []NosqlSettingsRepairFullDayOfWeek{
		NosqlSettingsRepairFullDayOfWeekSun,
		NosqlSettingsRepairFullDayOfWeekMon,
		NosqlSettingsRepairFullDayOfWeekTue,
		NosqlSettingsRepairFullDayOfWeekWed,
		NosqlSettingsRepairFullDayOfWeekThu,
		NosqlSettingsRepairFullDayOfWeekFri,
		NosqlSettingsRepairFullDayOfWeekSat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlSettingsRepairFullDayOfWeek) MarshalText() ([]byte, error) {
	switch s {
	case NosqlSettingsRepairFullDayOfWeekSun:
		return []byte(s), nil
	case NosqlSettingsRepairFullDayOfWeekMon:
		return []byte(s), nil
	case NosqlSettingsRepairFullDayOfWeekTue:
		return []byte(s), nil
	case NosqlSettingsRepairFullDayOfWeekWed:
		return []byte(s), nil
	case NosqlSettingsRepairFullDayOfWeekThu:
		return []byte(s), nil
	case NosqlSettingsRepairFullDayOfWeekFri:
		return []byte(s), nil
	case NosqlSettingsRepairFullDayOfWeekSat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlSettingsRepairFullDayOfWeek) UnmarshalText(data []byte) error {
	switch NosqlSettingsRepairFullDayOfWeek(data) {
	case NosqlSettingsRepairFullDayOfWeekSun:
		*s = NosqlSettingsRepairFullDayOfWeekSun
		return nil
	case NosqlSettingsRepairFullDayOfWeekMon:
		*s = NosqlSettingsRepairFullDayOfWeekMon
		return nil
	case NosqlSettingsRepairFullDayOfWeekTue:
		*s = NosqlSettingsRepairFullDayOfWeekTue
		return nil
	case NosqlSettingsRepairFullDayOfWeekWed:
		*s = NosqlSettingsRepairFullDayOfWeekWed
		return nil
	case NosqlSettingsRepairFullDayOfWeekThu:
		*s = NosqlSettingsRepairFullDayOfWeekThu
		return nil
	case NosqlSettingsRepairFullDayOfWeekFri:
		*s = NosqlSettingsRepairFullDayOfWeekFri
		return nil
	case NosqlSettingsRepairFullDayOfWeekSat:
		*s = NosqlSettingsRepairFullDayOfWeekSat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 7日ごとの実行間隔（日数）.
type NosqlSettingsRepairFullInterval int

const (
	NosqlSettingsRepairFullInterval7  NosqlSettingsRepairFullInterval = 7
	NosqlSettingsRepairFullInterval14 NosqlSettingsRepairFullInterval = 14
	NosqlSettingsRepairFullInterval21 NosqlSettingsRepairFullInterval = 21
	NosqlSettingsRepairFullInterval28 NosqlSettingsRepairFullInterval = 28
)

// AllValues returns all NosqlSettingsRepairFullInterval values.
func (NosqlSettingsRepairFullInterval) AllValues() []NosqlSettingsRepairFullInterval {
	return []NosqlSettingsRepairFullInterval{
		NosqlSettingsRepairFullInterval7,
		NosqlSettingsRepairFullInterval14,
		NosqlSettingsRepairFullInterval21,
		NosqlSettingsRepairFullInterval28,
	}
}

// 増分リペア設定.
type NosqlSettingsRepairIncremental struct {
	// 実行曜日.
	DaysOfWeek []NosqlSettingsRepairIncrementalDaysOfWeekItem `json:"DaysOfWeek"`
	// 実行時間.
	Time string `json:"Time"`
}

// GetDaysOfWeek returns the value of DaysOfWeek.
func (s *NosqlSettingsRepairIncremental) GetDaysOfWeek() []NosqlSettingsRepairIncrementalDaysOfWeekItem {
	return s.DaysOfWeek
}

// GetTime returns the value of Time.
func (s *NosqlSettingsRepairIncremental) GetTime() string {
	return s.Time
}

// SetDaysOfWeek sets the value of DaysOfWeek.
func (s *NosqlSettingsRepairIncremental) SetDaysOfWeek(val []NosqlSettingsRepairIncrementalDaysOfWeekItem) {
	s.DaysOfWeek = val
}

// SetTime sets the value of Time.
func (s *NosqlSettingsRepairIncremental) SetTime(val string) {
	s.Time = val
}

type NosqlSettingsRepairIncrementalDaysOfWeekItem string

const (
	NosqlSettingsRepairIncrementalDaysOfWeekItemSun NosqlSettingsRepairIncrementalDaysOfWeekItem = "sun"
	NosqlSettingsRepairIncrementalDaysOfWeekItemMon NosqlSettingsRepairIncrementalDaysOfWeekItem = "mon"
	NosqlSettingsRepairIncrementalDaysOfWeekItemTue NosqlSettingsRepairIncrementalDaysOfWeekItem = "tue"
	NosqlSettingsRepairIncrementalDaysOfWeekItemWed NosqlSettingsRepairIncrementalDaysOfWeekItem = "wed"
	NosqlSettingsRepairIncrementalDaysOfWeekItemThu NosqlSettingsRepairIncrementalDaysOfWeekItem = "thu"
	NosqlSettingsRepairIncrementalDaysOfWeekItemFri NosqlSettingsRepairIncrementalDaysOfWeekItem = "fri"
	NosqlSettingsRepairIncrementalDaysOfWeekItemSat NosqlSettingsRepairIncrementalDaysOfWeekItem = "sat"
)

// AllValues returns all NosqlSettingsRepairIncrementalDaysOfWeekItem values.
func (NosqlSettingsRepairIncrementalDaysOfWeekItem) AllValues() []NosqlSettingsRepairIncrementalDaysOfWeekItem {
	return []NosqlSettingsRepairIncrementalDaysOfWeekItem{
		NosqlSettingsRepairIncrementalDaysOfWeekItemSun,
		NosqlSettingsRepairIncrementalDaysOfWeekItemMon,
		NosqlSettingsRepairIncrementalDaysOfWeekItemTue,
		NosqlSettingsRepairIncrementalDaysOfWeekItemWed,
		NosqlSettingsRepairIncrementalDaysOfWeekItemThu,
		NosqlSettingsRepairIncrementalDaysOfWeekItemFri,
		NosqlSettingsRepairIncrementalDaysOfWeekItemSat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlSettingsRepairIncrementalDaysOfWeekItem) MarshalText() ([]byte, error) {
	switch s {
	case NosqlSettingsRepairIncrementalDaysOfWeekItemSun:
		return []byte(s), nil
	case NosqlSettingsRepairIncrementalDaysOfWeekItemMon:
		return []byte(s), nil
	case NosqlSettingsRepairIncrementalDaysOfWeekItemTue:
		return []byte(s), nil
	case NosqlSettingsRepairIncrementalDaysOfWeekItemWed:
		return []byte(s), nil
	case NosqlSettingsRepairIncrementalDaysOfWeekItemThu:
		return []byte(s), nil
	case NosqlSettingsRepairIncrementalDaysOfWeekItemFri:
		return []byte(s), nil
	case NosqlSettingsRepairIncrementalDaysOfWeekItemSat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlSettingsRepairIncrementalDaysOfWeekItem) UnmarshalText(data []byte) error {
	switch NosqlSettingsRepairIncrementalDaysOfWeekItem(data) {
	case NosqlSettingsRepairIncrementalDaysOfWeekItemSun:
		*s = NosqlSettingsRepairIncrementalDaysOfWeekItemSun
		return nil
	case NosqlSettingsRepairIncrementalDaysOfWeekItemMon:
		*s = NosqlSettingsRepairIncrementalDaysOfWeekItemMon
		return nil
	case NosqlSettingsRepairIncrementalDaysOfWeekItemTue:
		*s = NosqlSettingsRepairIncrementalDaysOfWeekItemTue
		return nil
	case NosqlSettingsRepairIncrementalDaysOfWeekItemWed:
		*s = NosqlSettingsRepairIncrementalDaysOfWeekItemWed
		return nil
	case NosqlSettingsRepairIncrementalDaysOfWeekItemThu:
		*s = NosqlSettingsRepairIncrementalDaysOfWeekItemThu
		return nil
	case NosqlSettingsRepairIncrementalDaysOfWeekItemFri:
		*s = NosqlSettingsRepairIncrementalDaysOfWeekItemFri
		return nil
	case NosqlSettingsRepairIncrementalDaysOfWeekItemSat:
		*s = NosqlSettingsRepairIncrementalDaysOfWeekItemSat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/NosqlStatusResponse
type NosqlStatusResponse struct {
	Appliance OptNosqlStatusResponseAppliance `json:"Appliance"`
	IsOk      OptIsOk                         `json:"is_ok"`
}

// GetAppliance returns the value of Appliance.
func (s *NosqlStatusResponse) GetAppliance() OptNosqlStatusResponseAppliance {
	return s.Appliance
}

// GetIsOk returns the value of IsOk.
func (s *NosqlStatusResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetAppliance sets the value of Appliance.
func (s *NosqlStatusResponse) SetAppliance(val OptNosqlStatusResponseAppliance) {
	s.Appliance = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlStatusResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*NosqlStatusResponse) confirmStatusDBRes() {}

type NosqlStatusResponseAppliance struct {
	ID OptString `json:"ID"`
	// NoSQLのステータスレスポンス.
	SettingsResponse OptNosqlStatusResponseApplianceSettingsResponse `json:"SettingsResponse"`
}

// GetID returns the value of ID.
func (s *NosqlStatusResponseAppliance) GetID() OptString {
	return s.ID
}

// GetSettingsResponse returns the value of SettingsResponse.
func (s *NosqlStatusResponseAppliance) GetSettingsResponse() OptNosqlStatusResponseApplianceSettingsResponse {
	return s.SettingsResponse
}

// SetID sets the value of ID.
func (s *NosqlStatusResponseAppliance) SetID(val OptString) {
	s.ID = val
}

// SetSettingsResponse sets the value of SettingsResponse.
func (s *NosqlStatusResponseAppliance) SetSettingsResponse(val OptNosqlStatusResponseApplianceSettingsResponse) {
	s.SettingsResponse = val
}

// NoSQLのステータスレスポンス.
type NosqlStatusResponseApplianceSettingsResponse struct {
	Nosql OptNosqlStatusResponseApplianceSettingsResponseNosql `json:"Nosql"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlStatusResponseApplianceSettingsResponse) GetNosql() OptNosqlStatusResponseApplianceSettingsResponseNosql {
	return s.Nosql
}

// SetNosql sets the value of Nosql.
func (s *NosqlStatusResponseApplianceSettingsResponse) SetNosql(val OptNosqlStatusResponseApplianceSettingsResponseNosql) {
	s.Nosql = val
}

type NosqlStatusResponseApplianceSettingsResponseNosql struct {
	// NoSQLの現在のバージョン.
	DatabaseVersion OptString `json:"DatabaseVersion"`
	// NoSQLの更新可能な最新のバージョン.
	UpgradeVersion OptString `json:"UpgradeVersion"`
	// ジョブ情報.
	Jobs []NosqlStatusResponseApplianceSettingsResponseNosqlJobsItem `json:"Jobs"`
	// プライマリノード情報.
	PrimaryNodes OptNosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes `json:"PrimaryNodes"`
	// 追加されたノードの情報.
	AddNodes []NosqlStatusResponseApplianceSettingsResponseNosqlAddNodesItem `json:"AddNodes"`
}

// GetDatabaseVersion returns the value of DatabaseVersion.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) GetDatabaseVersion() OptString {
	return s.DatabaseVersion
}

// GetUpgradeVersion returns the value of UpgradeVersion.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) GetUpgradeVersion() OptString {
	return s.UpgradeVersion
}

// GetJobs returns the value of Jobs.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) GetJobs() []NosqlStatusResponseApplianceSettingsResponseNosqlJobsItem {
	return s.Jobs
}

// GetPrimaryNodes returns the value of PrimaryNodes.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) GetPrimaryNodes() OptNosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes {
	return s.PrimaryNodes
}

// GetAddNodes returns the value of AddNodes.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) GetAddNodes() []NosqlStatusResponseApplianceSettingsResponseNosqlAddNodesItem {
	return s.AddNodes
}

// SetDatabaseVersion sets the value of DatabaseVersion.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) SetDatabaseVersion(val OptString) {
	s.DatabaseVersion = val
}

// SetUpgradeVersion sets the value of UpgradeVersion.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) SetUpgradeVersion(val OptString) {
	s.UpgradeVersion = val
}

// SetJobs sets the value of Jobs.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) SetJobs(val []NosqlStatusResponseApplianceSettingsResponseNosqlJobsItem) {
	s.Jobs = val
}

// SetPrimaryNodes sets the value of PrimaryNodes.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) SetPrimaryNodes(val OptNosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes) {
	s.PrimaryNodes = val
}

// SetAddNodes sets the value of AddNodes.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) SetAddNodes(val []NosqlStatusResponseApplianceSettingsResponseNosqlAddNodesItem) {
	s.AddNodes = val
}

type NosqlStatusResponseApplianceSettingsResponseNosqlAddNodesItem struct {
	Appliance NosqlNodeAppliance `json:"Appliance"`
}

// GetAppliance returns the value of Appliance.
func (s *NosqlStatusResponseApplianceSettingsResponseNosqlAddNodesItem) GetAppliance() NosqlNodeAppliance {
	return s.Appliance
}

// SetAppliance sets the value of Appliance.
func (s *NosqlStatusResponseApplianceSettingsResponseNosqlAddNodesItem) SetAppliance(val NosqlNodeAppliance) {
	s.Appliance = val
}

type NosqlStatusResponseApplianceSettingsResponseNosqlJobsItem struct {
	// ジョブタイプ.
	JobType OptString `json:"JobType"`
	// ジョブステータス.
	JobStatus OptString `json:"JobStatus"`
}

// GetJobType returns the value of JobType.
func (s *NosqlStatusResponseApplianceSettingsResponseNosqlJobsItem) GetJobType() OptString {
	return s.JobType
}

// GetJobStatus returns the value of JobStatus.
func (s *NosqlStatusResponseApplianceSettingsResponseNosqlJobsItem) GetJobStatus() OptString {
	return s.JobStatus
}

// SetJobType sets the value of JobType.
func (s *NosqlStatusResponseApplianceSettingsResponseNosqlJobsItem) SetJobType(val OptString) {
	s.JobType = val
}

// SetJobStatus sets the value of JobStatus.
func (s *NosqlStatusResponseApplianceSettingsResponseNosqlJobsItem) SetJobStatus(val OptString) {
	s.JobStatus = val
}

// プライマリノード情報.
type NosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes struct {
	Appliance OptNosqlNodeAppliance `json:"Appliance"`
}

// GetAppliance returns the value of Appliance.
func (s *NosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes) GetAppliance() OptNosqlNodeAppliance {
	return s.Appliance
}

// SetAppliance sets the value of Appliance.
func (s *NosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes) SetAppliance(val OptNosqlNodeAppliance) {
	s.Appliance = val
}

// Ref: #/components/schemas/NosqlSuccessResponse
type NosqlSuccessResponse struct {
	Appliance OptNosqlAppliance `json:"Appliance"`
	Success   OptSuccess        `json:"Success"`
	IsOk      OptIsOk           `json:"is_ok"`
}

// GetAppliance returns the value of Appliance.
func (s *NosqlSuccessResponse) GetAppliance() OptNosqlAppliance {
	return s.Appliance
}

// GetSuccess returns the value of Success.
func (s *NosqlSuccessResponse) GetSuccess() OptSuccess {
	return s.Success
}

// GetIsOk returns the value of IsOk.
func (s *NosqlSuccessResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetAppliance sets the value of Appliance.
func (s *NosqlSuccessResponse) SetAppliance(val OptNosqlAppliance) {
	s.Appliance = val
}

// SetSuccess sets the value of Success.
func (s *NosqlSuccessResponse) SetSuccess(val OptSuccess) {
	s.Success = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlSuccessResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*NosqlSuccessResponse) deleteDBRes() {}
func (*NosqlSuccessResponse) updateDBRes() {}

// Ref: #/components/schemas/NosqlUpdateRequest
type NosqlUpdateRequest struct {
	Appliance NosqlUpdateRequestAppliance `json:"Appliance"`
}

// GetAppliance returns the value of Appliance.
func (s *NosqlUpdateRequest) GetAppliance() NosqlUpdateRequestAppliance {
	return s.Appliance
}

// SetAppliance sets the value of Appliance.
func (s *NosqlUpdateRequest) SetAppliance(val NosqlUpdateRequestAppliance) {
	s.Appliance = val
}

// Merged schema.
type NosqlUpdateRequestAppliance struct {
	// クラス
	// **新規作成時・ノード追加時必須**.
	Class OptString `json:"Class"`
	// NoSQLの名前
	// **新規作成時・ノード追加時必須**.
	Name OptString `json:"Name"`
	// NoSQLの説明.
	Description OptString  `json:"Description"`
	Tags        OptNilTags `json:"Tags"`
	// アプライアンスID.
	ID       string                              `json:"ID"`
	Settings NosqlUpdateRequestApplianceSettings `json:"Settings"`
}

// GetClass returns the value of Class.
func (s *NosqlUpdateRequestAppliance) GetClass() OptString {
	return s.Class
}

// GetName returns the value of Name.
func (s *NosqlUpdateRequestAppliance) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *NosqlUpdateRequestAppliance) GetDescription() OptString {
	return s.Description
}

// GetTags returns the value of Tags.
func (s *NosqlUpdateRequestAppliance) GetTags() OptNilTags {
	return s.Tags
}

// GetID returns the value of ID.
func (s *NosqlUpdateRequestAppliance) GetID() string {
	return s.ID
}

// GetSettings returns the value of Settings.
func (s *NosqlUpdateRequestAppliance) GetSettings() NosqlUpdateRequestApplianceSettings {
	return s.Settings
}

// SetClass sets the value of Class.
func (s *NosqlUpdateRequestAppliance) SetClass(val OptString) {
	s.Class = val
}

// SetName sets the value of Name.
func (s *NosqlUpdateRequestAppliance) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *NosqlUpdateRequestAppliance) SetDescription(val OptString) {
	s.Description = val
}

// SetTags sets the value of Tags.
func (s *NosqlUpdateRequestAppliance) SetTags(val OptNilTags) {
	s.Tags = val
}

// SetID sets the value of ID.
func (s *NosqlUpdateRequestAppliance) SetID(val string) {
	s.ID = val
}

// SetSettings sets the value of Settings.
func (s *NosqlUpdateRequestAppliance) SetSettings(val NosqlUpdateRequestApplianceSettings) {
	s.Settings = val
}

// Merged schema.
type NosqlUpdateRequestApplianceSettings struct {
	// バックアップ情報.
	Backup OptNilNosqlUpdateRequestApplianceSettingsBackup `json:"Backup"`
	// 送信元ネットワークアドレス.
	SourceNetwork []string `json:"SourceNetwork"`
	// 予備IPアドレス
	// **新規作成時必須**
	// ※デッドノード発生時、ノード切替を行う際に使用する予備のIPアドレス.
	ReserveIPAddress OptIPv4 `json:"ReserveIPAddress"`
	// 定期リペア設定.
	Repair   OptNilNosqlUpdateRequestApplianceSettingsRepair `json:"Repair"`
	Password OptPassword                                     `json:"Password"`
}

// GetBackup returns the value of Backup.
func (s *NosqlUpdateRequestApplianceSettings) GetBackup() OptNilNosqlUpdateRequestApplianceSettingsBackup {
	return s.Backup
}

// GetSourceNetwork returns the value of SourceNetwork.
func (s *NosqlUpdateRequestApplianceSettings) GetSourceNetwork() []string {
	return s.SourceNetwork
}

// GetReserveIPAddress returns the value of ReserveIPAddress.
func (s *NosqlUpdateRequestApplianceSettings) GetReserveIPAddress() OptIPv4 {
	return s.ReserveIPAddress
}

// GetRepair returns the value of Repair.
func (s *NosqlUpdateRequestApplianceSettings) GetRepair() OptNilNosqlUpdateRequestApplianceSettingsRepair {
	return s.Repair
}

// GetPassword returns the value of Password.
func (s *NosqlUpdateRequestApplianceSettings) GetPassword() OptPassword {
	return s.Password
}

// SetBackup sets the value of Backup.
func (s *NosqlUpdateRequestApplianceSettings) SetBackup(val OptNilNosqlUpdateRequestApplianceSettingsBackup) {
	s.Backup = val
}

// SetSourceNetwork sets the value of SourceNetwork.
func (s *NosqlUpdateRequestApplianceSettings) SetSourceNetwork(val []string) {
	s.SourceNetwork = val
}

// SetReserveIPAddress sets the value of ReserveIPAddress.
func (s *NosqlUpdateRequestApplianceSettings) SetReserveIPAddress(val OptIPv4) {
	s.ReserveIPAddress = val
}

// SetRepair sets the value of Repair.
func (s *NosqlUpdateRequestApplianceSettings) SetRepair(val OptNilNosqlUpdateRequestApplianceSettingsRepair) {
	s.Repair = val
}

// SetPassword sets the value of Password.
func (s *NosqlUpdateRequestApplianceSettings) SetPassword(val OptPassword) {
	s.Password = val
}

// バックアップ情報.
type NosqlUpdateRequestApplianceSettingsBackup struct {
	// バックアップ先（NFS URL形式）.
	Connect string `json:"Connect"`
	// バックアップスケジュール.
	DayOfWeek OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray `json:"DayOfWeek"`
	// バックアップする時間.
	Time OptNilString `json:"Time"`
	// バックアップ数（1から8まで）.
	Rotate OptInt `json:"Rotate"`
}

// GetConnect returns the value of Connect.
func (s *NosqlUpdateRequestApplianceSettingsBackup) GetConnect() string {
	return s.Connect
}

// GetDayOfWeek returns the value of DayOfWeek.
func (s *NosqlUpdateRequestApplianceSettingsBackup) GetDayOfWeek() OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray {
	return s.DayOfWeek
}

// GetTime returns the value of Time.
func (s *NosqlUpdateRequestApplianceSettingsBackup) GetTime() OptNilString {
	return s.Time
}

// GetRotate returns the value of Rotate.
func (s *NosqlUpdateRequestApplianceSettingsBackup) GetRotate() OptInt {
	return s.Rotate
}

// SetConnect sets the value of Connect.
func (s *NosqlUpdateRequestApplianceSettingsBackup) SetConnect(val string) {
	s.Connect = val
}

// SetDayOfWeek sets the value of DayOfWeek.
func (s *NosqlUpdateRequestApplianceSettingsBackup) SetDayOfWeek(val OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray) {
	s.DayOfWeek = val
}

// SetTime sets the value of Time.
func (s *NosqlUpdateRequestApplianceSettingsBackup) SetTime(val OptNilString) {
	s.Time = val
}

// SetRotate sets the value of Rotate.
func (s *NosqlUpdateRequestApplianceSettingsBackup) SetRotate(val OptInt) {
	s.Rotate = val
}

type NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem string

const (
	NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSun NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem = "sun"
	NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemMon NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem = "mon"
	NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemTue NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem = "tue"
	NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemWed NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem = "wed"
	NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemThu NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem = "thu"
	NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemFri NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem = "fri"
	NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSat NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem = "sat"
)

// AllValues returns all NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem values.
func (NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem) AllValues() []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem {
	return []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem{
		NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSun,
		NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemMon,
		NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemTue,
		NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemWed,
		NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemThu,
		NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemFri,
		NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem) MarshalText() ([]byte, error) {
	switch s {
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSun:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemMon:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemTue:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemWed:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemThu:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemFri:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem) UnmarshalText(data []byte) error {
	switch NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem(data) {
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSun:
		*s = NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSun
		return nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemMon:
		*s = NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemMon
		return nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemTue:
		*s = NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemTue
		return nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemWed:
		*s = NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemWed
		return nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemThu:
		*s = NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemThu
		return nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemFri:
		*s = NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemFri
		return nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSat:
		*s = NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 定期リペア設定.
type NosqlUpdateRequestApplianceSettingsRepair struct {
	// 増分リペア設定.
	Incremental OptNosqlUpdateRequestApplianceSettingsRepairIncremental `json:"Incremental"`
	// 完全リペア設定.
	Full OptNosqlUpdateRequestApplianceSettingsRepairFull `json:"Full"`
}

// GetIncremental returns the value of Incremental.
func (s *NosqlUpdateRequestApplianceSettingsRepair) GetIncremental() OptNosqlUpdateRequestApplianceSettingsRepairIncremental {
	return s.Incremental
}

// GetFull returns the value of Full.
func (s *NosqlUpdateRequestApplianceSettingsRepair) GetFull() OptNosqlUpdateRequestApplianceSettingsRepairFull {
	return s.Full
}

// SetIncremental sets the value of Incremental.
func (s *NosqlUpdateRequestApplianceSettingsRepair) SetIncremental(val OptNosqlUpdateRequestApplianceSettingsRepairIncremental) {
	s.Incremental = val
}

// SetFull sets the value of Full.
func (s *NosqlUpdateRequestApplianceSettingsRepair) SetFull(val OptNosqlUpdateRequestApplianceSettingsRepairFull) {
	s.Full = val
}

// 完全リペア設定.
type NosqlUpdateRequestApplianceSettingsRepairFull struct {
	// 7日ごとの実行間隔（日数）.
	Interval NosqlUpdateRequestApplianceSettingsRepairFullInterval `json:"Interval"`
	// 実行曜日.
	DayOfWeek NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeek `json:"DayOfWeek"`
	// 実行時間.
	Time string `json:"Time"`
}

// GetInterval returns the value of Interval.
func (s *NosqlUpdateRequestApplianceSettingsRepairFull) GetInterval() NosqlUpdateRequestApplianceSettingsRepairFullInterval {
	return s.Interval
}

// GetDayOfWeek returns the value of DayOfWeek.
func (s *NosqlUpdateRequestApplianceSettingsRepairFull) GetDayOfWeek() NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeek {
	return s.DayOfWeek
}

// GetTime returns the value of Time.
func (s *NosqlUpdateRequestApplianceSettingsRepairFull) GetTime() string {
	return s.Time
}

// SetInterval sets the value of Interval.
func (s *NosqlUpdateRequestApplianceSettingsRepairFull) SetInterval(val NosqlUpdateRequestApplianceSettingsRepairFullInterval) {
	s.Interval = val
}

// SetDayOfWeek sets the value of DayOfWeek.
func (s *NosqlUpdateRequestApplianceSettingsRepairFull) SetDayOfWeek(val NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeek) {
	s.DayOfWeek = val
}

// SetTime sets the value of Time.
func (s *NosqlUpdateRequestApplianceSettingsRepairFull) SetTime(val string) {
	s.Time = val
}

// 実行曜日.
type NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeek string

const (
	NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekSun NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeek = "sun"
	NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekMon NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeek = "mon"
	NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekTue NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeek = "tue"
	NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekWed NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeek = "wed"
	NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekThu NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeek = "thu"
	NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekFri NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeek = "fri"
	NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekSat NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeek = "sat"
)

// AllValues returns all NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeek values.
func (NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeek) AllValues() []NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeek {
	return []NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeek{
		NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekSun,
		NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekMon,
		NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekTue,
		NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekWed,
		NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekThu,
		NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekFri,
		NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekSat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeek) MarshalText() ([]byte, error) {
	switch s {
	case NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekSun:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekMon:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekTue:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekWed:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekThu:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekFri:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekSat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeek) UnmarshalText(data []byte) error {
	switch NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeek(data) {
	case NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekSun:
		*s = NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekSun
		return nil
	case NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekMon:
		*s = NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekMon
		return nil
	case NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekTue:
		*s = NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekTue
		return nil
	case NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekWed:
		*s = NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekWed
		return nil
	case NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekThu:
		*s = NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekThu
		return nil
	case NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekFri:
		*s = NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekFri
		return nil
	case NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekSat:
		*s = NosqlUpdateRequestApplianceSettingsRepairFullDayOfWeekSat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 7日ごとの実行間隔（日数）.
type NosqlUpdateRequestApplianceSettingsRepairFullInterval int

const (
	NosqlUpdateRequestApplianceSettingsRepairFullInterval7  NosqlUpdateRequestApplianceSettingsRepairFullInterval = 7
	NosqlUpdateRequestApplianceSettingsRepairFullInterval14 NosqlUpdateRequestApplianceSettingsRepairFullInterval = 14
	NosqlUpdateRequestApplianceSettingsRepairFullInterval21 NosqlUpdateRequestApplianceSettingsRepairFullInterval = 21
	NosqlUpdateRequestApplianceSettingsRepairFullInterval28 NosqlUpdateRequestApplianceSettingsRepairFullInterval = 28
)

// AllValues returns all NosqlUpdateRequestApplianceSettingsRepairFullInterval values.
func (NosqlUpdateRequestApplianceSettingsRepairFullInterval) AllValues() []NosqlUpdateRequestApplianceSettingsRepairFullInterval {
	return []NosqlUpdateRequestApplianceSettingsRepairFullInterval{
		NosqlUpdateRequestApplianceSettingsRepairFullInterval7,
		NosqlUpdateRequestApplianceSettingsRepairFullInterval14,
		NosqlUpdateRequestApplianceSettingsRepairFullInterval21,
		NosqlUpdateRequestApplianceSettingsRepairFullInterval28,
	}
}

// 増分リペア設定.
type NosqlUpdateRequestApplianceSettingsRepairIncremental struct {
	// 実行曜日.
	DaysOfWeek []NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem `json:"DaysOfWeek"`
	// 実行時間.
	Time string `json:"Time"`
}

// GetDaysOfWeek returns the value of DaysOfWeek.
func (s *NosqlUpdateRequestApplianceSettingsRepairIncremental) GetDaysOfWeek() []NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem {
	return s.DaysOfWeek
}

// GetTime returns the value of Time.
func (s *NosqlUpdateRequestApplianceSettingsRepairIncremental) GetTime() string {
	return s.Time
}

// SetDaysOfWeek sets the value of DaysOfWeek.
func (s *NosqlUpdateRequestApplianceSettingsRepairIncremental) SetDaysOfWeek(val []NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem) {
	s.DaysOfWeek = val
}

// SetTime sets the value of Time.
func (s *NosqlUpdateRequestApplianceSettingsRepairIncremental) SetTime(val string) {
	s.Time = val
}

type NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem string

const (
	NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSun NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem = "sun"
	NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemMon NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem = "mon"
	NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemTue NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem = "tue"
	NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemWed NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem = "wed"
	NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemThu NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem = "thu"
	NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemFri NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem = "fri"
	NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSat NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem = "sat"
)

// AllValues returns all NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem values.
func (NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem) AllValues() []NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem {
	return []NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem{
		NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSun,
		NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemMon,
		NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemTue,
		NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemWed,
		NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemThu,
		NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemFri,
		NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem) MarshalText() ([]byte, error) {
	switch s {
	case NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSun:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemMon:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemTue:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemWed:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemThu:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemFri:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem) UnmarshalText(data []byte) error {
	switch NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItem(data) {
	case NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSun:
		*s = NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSun
		return nil
	case NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemMon:
		*s = NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemMon
		return nil
	case NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemTue:
		*s = NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemTue
		return nil
	case NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemWed:
		*s = NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemWed
		return nil
	case NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemThu:
		*s = NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemThu
		return nil
	case NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemFri:
		*s = NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemFri
		return nil
	case NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSat:
		*s = NosqlUpdateRequestApplianceSettingsRepairIncrementalDaysOfWeekItemSat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/NosqlVersion
type NosqlVersion struct {
	// NoSQLの更新可能なバージョン.
	Version OptString `json:"version"`
}

// GetVersion returns the value of Version.
func (s *NosqlVersion) GetVersion() OptString {
	return s.Version
}

// SetVersion sets the value of Version.
func (s *NosqlVersion) SetVersion(val OptString) {
	s.Version = val
}

// Ref: #/components/schemas/NosqldbNodeStatus
type NosqldbNodeStatus struct {
	// ノードの通番.
	Index OptInt `json:"Index"`
	// ユーザ側スイッチに接続するIPアドレス.
	UserIPAddress OptIPv4 `json:"UserIPAddress"`
	// ノードタイプ
	// | 値 | 説明         |
	// |----|--------------|
	// | 0  | 正常         |
	// | 1  | デッドノード |
	// | 2  | 予備IPサーバ |.
	NodeType OptNosqldbNodeStatusNodeType `json:"NodeType"`
}

// GetIndex returns the value of Index.
func (s *NosqldbNodeStatus) GetIndex() OptInt {
	return s.Index
}

// GetUserIPAddress returns the value of UserIPAddress.
func (s *NosqldbNodeStatus) GetUserIPAddress() OptIPv4 {
	return s.UserIPAddress
}

// GetNodeType returns the value of NodeType.
func (s *NosqldbNodeStatus) GetNodeType() OptNosqldbNodeStatusNodeType {
	return s.NodeType
}

// SetIndex sets the value of Index.
func (s *NosqldbNodeStatus) SetIndex(val OptInt) {
	s.Index = val
}

// SetUserIPAddress sets the value of UserIPAddress.
func (s *NosqldbNodeStatus) SetUserIPAddress(val OptIPv4) {
	s.UserIPAddress = val
}

// SetNodeType sets the value of NodeType.
func (s *NosqldbNodeStatus) SetNodeType(val OptNosqldbNodeStatusNodeType) {
	s.NodeType = val
}

// ノードタイプ
// | 値 | 説明         |
// |----|--------------|
// | 0  | 正常         |
// | 1  | デッドノード |
// | 2  | 予備IPサーバ |.
type NosqldbNodeStatusNodeType string

const (
	NosqldbNodeStatusNodeType0 NosqldbNodeStatusNodeType = "0"
	NosqldbNodeStatusNodeType1 NosqldbNodeStatusNodeType = "1"
	NosqldbNodeStatusNodeType2 NosqldbNodeStatusNodeType = "2"
)

// AllValues returns all NosqldbNodeStatusNodeType values.
func (NosqldbNodeStatusNodeType) AllValues() []NosqldbNodeStatusNodeType {
	return []NosqldbNodeStatusNodeType{
		NosqldbNodeStatusNodeType0,
		NosqldbNodeStatusNodeType1,
		NosqldbNodeStatusNodeType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqldbNodeStatusNodeType) MarshalText() ([]byte, error) {
	switch s {
	case NosqldbNodeStatusNodeType0:
		return []byte(s), nil
	case NosqldbNodeStatusNodeType1:
		return []byte(s), nil
	case NosqldbNodeStatusNodeType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqldbNodeStatusNodeType) UnmarshalText(data []byte) error {
	switch NosqldbNodeStatusNodeType(data) {
	case NosqldbNodeStatusNodeType0:
		*s = NosqldbNodeStatusNodeType0
		return nil
	case NosqldbNodeStatusNodeType1:
		*s = NosqldbNodeStatusNodeType1
		return nil
	case NosqldbNodeStatusNodeType2:
		*s = NosqldbNodeStatusNodeType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// エラーレスポンス.
type NotFoundResponse struct {
	// エラーのレスポンス(true:エラー).
	IsFatal OptBool `json:"is_fatal"`
	// 追跡コード.
	Serial OptString `json:"serial"`
	// ステータス.
	Status OptString `json:"status"`
	// エラーコード.
	ErrorCode OptString `json:"error_code"`
	// エラーメッセージ.
	ErrorMsg OptString `json:"error_msg"`
}

// GetIsFatal returns the value of IsFatal.
func (s *NotFoundResponse) GetIsFatal() OptBool {
	return s.IsFatal
}

// GetSerial returns the value of Serial.
func (s *NotFoundResponse) GetSerial() OptString {
	return s.Serial
}

// GetStatus returns the value of Status.
func (s *NotFoundResponse) GetStatus() OptString {
	return s.Status
}

// GetErrorCode returns the value of ErrorCode.
func (s *NotFoundResponse) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetErrorMsg returns the value of ErrorMsg.
func (s *NotFoundResponse) GetErrorMsg() OptString {
	return s.ErrorMsg
}

// SetIsFatal sets the value of IsFatal.
func (s *NotFoundResponse) SetIsFatal(val OptBool) {
	s.IsFatal = val
}

// SetSerial sets the value of Serial.
func (s *NotFoundResponse) SetSerial(val OptString) {
	s.Serial = val
}

// SetStatus sets the value of Status.
func (s *NotFoundResponse) SetStatus(val OptString) {
	s.Status = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *NotFoundResponse) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetErrorMsg sets the value of ErrorMsg.
func (s *NotFoundResponse) SetErrorMsg(val OptString) {
	s.ErrorMsg = val
}

func (*NotFoundResponse) createBackupRes()         {}
func (*NotFoundResponse) deleteAppliancePowerRes() {}
func (*NotFoundResponse) deleteBackupRes()         {}
func (*NotFoundResponse) deleteDBRes()             {}
func (*NotFoundResponse) getDBRes()                {}
func (*NotFoundResponse) getNoSQLNodeHealthRes()   {}
func (*NotFoundResponse) postNoSQLRepairRes()      {}
func (*NotFoundResponse) putAppliancePowerRes()    {}
func (*NotFoundResponse) recoverNoSQLNodeRes()     {}
func (*NotFoundResponse) restoreBackupRes()        {}
func (*NotFoundResponse) updateDBRes()             {}

// NewOptAvailability returns new OptAvailability with value set to v.
func NewOptAvailability(v Availability) OptAvailability {
	return OptAvailability{
		Value: v,
		Set:   true,
	}
}

// OptAvailability is optional Availability.
type OptAvailability struct {
	Value Availability
	Set   bool
}

// IsSet returns true if OptAvailability was set.
func (o OptAvailability) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAvailability) Reset() {
	var v Availability
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAvailability) SetTo(v Availability) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAvailability) Get() (v Availability, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAvailability) Or(d Availability) Availability {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNosqlApplianceInterfacesItemSwitch returns new OptGetNosqlApplianceInterfacesItemSwitch with value set to v.
func NewOptGetNosqlApplianceInterfacesItemSwitch(v GetNosqlApplianceInterfacesItemSwitch) OptGetNosqlApplianceInterfacesItemSwitch {
	return OptGetNosqlApplianceInterfacesItemSwitch{
		Value: v,
		Set:   true,
	}
}

// OptGetNosqlApplianceInterfacesItemSwitch is optional GetNosqlApplianceInterfacesItemSwitch.
type OptGetNosqlApplianceInterfacesItemSwitch struct {
	Value GetNosqlApplianceInterfacesItemSwitch
	Set   bool
}

// IsSet returns true if OptGetNosqlApplianceInterfacesItemSwitch was set.
func (o OptGetNosqlApplianceInterfacesItemSwitch) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNosqlApplianceInterfacesItemSwitch) Reset() {
	var v GetNosqlApplianceInterfacesItemSwitch
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNosqlApplianceInterfacesItemSwitch) SetTo(v GetNosqlApplianceInterfacesItemSwitch) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNosqlApplianceInterfacesItemSwitch) Get() (v GetNosqlApplianceInterfacesItemSwitch, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNosqlApplianceInterfacesItemSwitch) Or(d GetNosqlApplianceInterfacesItemSwitch) GetNosqlApplianceInterfacesItemSwitch {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNosqlApplianceInterfacesItemSwitchSubnetInternet returns new OptGetNosqlApplianceInterfacesItemSwitchSubnetInternet with value set to v.
func NewOptGetNosqlApplianceInterfacesItemSwitchSubnetInternet(v GetNosqlApplianceInterfacesItemSwitchSubnetInternet) OptGetNosqlApplianceInterfacesItemSwitchSubnetInternet {
	return OptGetNosqlApplianceInterfacesItemSwitchSubnetInternet{
		Value: v,
		Set:   true,
	}
}

// OptGetNosqlApplianceInterfacesItemSwitchSubnetInternet is optional GetNosqlApplianceInterfacesItemSwitchSubnetInternet.
type OptGetNosqlApplianceInterfacesItemSwitchSubnetInternet struct {
	Value GetNosqlApplianceInterfacesItemSwitchSubnetInternet
	Set   bool
}

// IsSet returns true if OptGetNosqlApplianceInterfacesItemSwitchSubnetInternet was set.
func (o OptGetNosqlApplianceInterfacesItemSwitchSubnetInternet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNosqlApplianceInterfacesItemSwitchSubnetInternet) Reset() {
	var v GetNosqlApplianceInterfacesItemSwitchSubnetInternet
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNosqlApplianceInterfacesItemSwitchSubnetInternet) SetTo(v GetNosqlApplianceInterfacesItemSwitchSubnetInternet) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNosqlApplianceInterfacesItemSwitchSubnetInternet) Get() (v GetNosqlApplianceInterfacesItemSwitchSubnetInternet, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNosqlApplianceInterfacesItemSwitchSubnetInternet) Or(d GetNosqlApplianceInterfacesItemSwitchSubnetInternet) GetNosqlApplianceInterfacesItemSwitchSubnetInternet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNosqlApplianceRemark returns new OptGetNosqlApplianceRemark with value set to v.
func NewOptGetNosqlApplianceRemark(v GetNosqlApplianceRemark) OptGetNosqlApplianceRemark {
	return OptGetNosqlApplianceRemark{
		Value: v,
		Set:   true,
	}
}

// OptGetNosqlApplianceRemark is optional GetNosqlApplianceRemark.
type OptGetNosqlApplianceRemark struct {
	Value GetNosqlApplianceRemark
	Set   bool
}

// IsSet returns true if OptGetNosqlApplianceRemark was set.
func (o OptGetNosqlApplianceRemark) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNosqlApplianceRemark) Reset() {
	var v GetNosqlApplianceRemark
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNosqlApplianceRemark) SetTo(v GetNosqlApplianceRemark) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNosqlApplianceRemark) Get() (v GetNosqlApplianceRemark, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNosqlApplianceRemark) Or(d GetNosqlApplianceRemark) GetNosqlApplianceRemark {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNosqlApplianceRemarkNosql returns new OptGetNosqlApplianceRemarkNosql with value set to v.
func NewOptGetNosqlApplianceRemarkNosql(v GetNosqlApplianceRemarkNosql) OptGetNosqlApplianceRemarkNosql {
	return OptGetNosqlApplianceRemarkNosql{
		Value: v,
		Set:   true,
	}
}

// OptGetNosqlApplianceRemarkNosql is optional GetNosqlApplianceRemarkNosql.
type OptGetNosqlApplianceRemarkNosql struct {
	Value GetNosqlApplianceRemarkNosql
	Set   bool
}

// IsSet returns true if OptGetNosqlApplianceRemarkNosql was set.
func (o OptGetNosqlApplianceRemarkNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNosqlApplianceRemarkNosql) Reset() {
	var v GetNosqlApplianceRemarkNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNosqlApplianceRemarkNosql) SetTo(v GetNosqlApplianceRemarkNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNosqlApplianceRemarkNosql) Get() (v GetNosqlApplianceRemarkNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNosqlApplianceRemarkNosql) Or(d GetNosqlApplianceRemarkNosql) GetNosqlApplianceRemarkNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNosqlApplianceRemarkNosqlDatabaseEngine returns new OptGetNosqlApplianceRemarkNosqlDatabaseEngine with value set to v.
func NewOptGetNosqlApplianceRemarkNosqlDatabaseEngine(v GetNosqlApplianceRemarkNosqlDatabaseEngine) OptGetNosqlApplianceRemarkNosqlDatabaseEngine {
	return OptGetNosqlApplianceRemarkNosqlDatabaseEngine{
		Value: v,
		Set:   true,
	}
}

// OptGetNosqlApplianceRemarkNosqlDatabaseEngine is optional GetNosqlApplianceRemarkNosqlDatabaseEngine.
type OptGetNosqlApplianceRemarkNosqlDatabaseEngine struct {
	Value GetNosqlApplianceRemarkNosqlDatabaseEngine
	Set   bool
}

// IsSet returns true if OptGetNosqlApplianceRemarkNosqlDatabaseEngine was set.
func (o OptGetNosqlApplianceRemarkNosqlDatabaseEngine) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNosqlApplianceRemarkNosqlDatabaseEngine) Reset() {
	var v GetNosqlApplianceRemarkNosqlDatabaseEngine
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNosqlApplianceRemarkNosqlDatabaseEngine) SetTo(v GetNosqlApplianceRemarkNosqlDatabaseEngine) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNosqlApplianceRemarkNosqlDatabaseEngine) Get() (v GetNosqlApplianceRemarkNosqlDatabaseEngine, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNosqlApplianceRemarkNosqlDatabaseEngine) Or(d GetNosqlApplianceRemarkNosqlDatabaseEngine) GetNosqlApplianceRemarkNosqlDatabaseEngine {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNosqlApplianceRemarkNosqlDiskSize returns new OptGetNosqlApplianceRemarkNosqlDiskSize with value set to v.
func NewOptGetNosqlApplianceRemarkNosqlDiskSize(v GetNosqlApplianceRemarkNosqlDiskSize) OptGetNosqlApplianceRemarkNosqlDiskSize {
	return OptGetNosqlApplianceRemarkNosqlDiskSize{
		Value: v,
		Set:   true,
	}
}

// OptGetNosqlApplianceRemarkNosqlDiskSize is optional GetNosqlApplianceRemarkNosqlDiskSize.
type OptGetNosqlApplianceRemarkNosqlDiskSize struct {
	Value GetNosqlApplianceRemarkNosqlDiskSize
	Set   bool
}

// IsSet returns true if OptGetNosqlApplianceRemarkNosqlDiskSize was set.
func (o OptGetNosqlApplianceRemarkNosqlDiskSize) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNosqlApplianceRemarkNosqlDiskSize) Reset() {
	var v GetNosqlApplianceRemarkNosqlDiskSize
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNosqlApplianceRemarkNosqlDiskSize) SetTo(v GetNosqlApplianceRemarkNosqlDiskSize) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNosqlApplianceRemarkNosqlDiskSize) Get() (v GetNosqlApplianceRemarkNosqlDiskSize, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNosqlApplianceRemarkNosqlDiskSize) Or(d GetNosqlApplianceRemarkNosqlDiskSize) GetNosqlApplianceRemarkNosqlDiskSize {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNosqlApplianceRemarkNosqlMemory returns new OptGetNosqlApplianceRemarkNosqlMemory with value set to v.
func NewOptGetNosqlApplianceRemarkNosqlMemory(v GetNosqlApplianceRemarkNosqlMemory) OptGetNosqlApplianceRemarkNosqlMemory {
	return OptGetNosqlApplianceRemarkNosqlMemory{
		Value: v,
		Set:   true,
	}
}

// OptGetNosqlApplianceRemarkNosqlMemory is optional GetNosqlApplianceRemarkNosqlMemory.
type OptGetNosqlApplianceRemarkNosqlMemory struct {
	Value GetNosqlApplianceRemarkNosqlMemory
	Set   bool
}

// IsSet returns true if OptGetNosqlApplianceRemarkNosqlMemory was set.
func (o OptGetNosqlApplianceRemarkNosqlMemory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNosqlApplianceRemarkNosqlMemory) Reset() {
	var v GetNosqlApplianceRemarkNosqlMemory
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNosqlApplianceRemarkNosqlMemory) SetTo(v GetNosqlApplianceRemarkNosqlMemory) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNosqlApplianceRemarkNosqlMemory) Get() (v GetNosqlApplianceRemarkNosqlMemory, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNosqlApplianceRemarkNosqlMemory) Or(d GetNosqlApplianceRemarkNosqlMemory) GetNosqlApplianceRemarkNosqlMemory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNosqlApplianceRemarkNosqlPrimaryNodes returns new OptGetNosqlApplianceRemarkNosqlPrimaryNodes with value set to v.
func NewOptGetNosqlApplianceRemarkNosqlPrimaryNodes(v GetNosqlApplianceRemarkNosqlPrimaryNodes) OptGetNosqlApplianceRemarkNosqlPrimaryNodes {
	return OptGetNosqlApplianceRemarkNosqlPrimaryNodes{
		Value: v,
		Set:   true,
	}
}

// OptGetNosqlApplianceRemarkNosqlPrimaryNodes is optional GetNosqlApplianceRemarkNosqlPrimaryNodes.
type OptGetNosqlApplianceRemarkNosqlPrimaryNodes struct {
	Value GetNosqlApplianceRemarkNosqlPrimaryNodes
	Set   bool
}

// IsSet returns true if OptGetNosqlApplianceRemarkNosqlPrimaryNodes was set.
func (o OptGetNosqlApplianceRemarkNosqlPrimaryNodes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNosqlApplianceRemarkNosqlPrimaryNodes) Reset() {
	var v GetNosqlApplianceRemarkNosqlPrimaryNodes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNosqlApplianceRemarkNosqlPrimaryNodes) SetTo(v GetNosqlApplianceRemarkNosqlPrimaryNodes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNosqlApplianceRemarkNosqlPrimaryNodes) Get() (v GetNosqlApplianceRemarkNosqlPrimaryNodes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNosqlApplianceRemarkNosqlPrimaryNodes) Or(d GetNosqlApplianceRemarkNosqlPrimaryNodes) GetNosqlApplianceRemarkNosqlPrimaryNodes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNosqlApplianceRemarkNosqlPrimaryNodesAppliance returns new OptGetNosqlApplianceRemarkNosqlPrimaryNodesAppliance with value set to v.
func NewOptGetNosqlApplianceRemarkNosqlPrimaryNodesAppliance(v GetNosqlApplianceRemarkNosqlPrimaryNodesAppliance) OptGetNosqlApplianceRemarkNosqlPrimaryNodesAppliance {
	return OptGetNosqlApplianceRemarkNosqlPrimaryNodesAppliance{
		Value: v,
		Set:   true,
	}
}

// OptGetNosqlApplianceRemarkNosqlPrimaryNodesAppliance is optional GetNosqlApplianceRemarkNosqlPrimaryNodesAppliance.
type OptGetNosqlApplianceRemarkNosqlPrimaryNodesAppliance struct {
	Value GetNosqlApplianceRemarkNosqlPrimaryNodesAppliance
	Set   bool
}

// IsSet returns true if OptGetNosqlApplianceRemarkNosqlPrimaryNodesAppliance was set.
func (o OptGetNosqlApplianceRemarkNosqlPrimaryNodesAppliance) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNosqlApplianceRemarkNosqlPrimaryNodesAppliance) Reset() {
	var v GetNosqlApplianceRemarkNosqlPrimaryNodesAppliance
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNosqlApplianceRemarkNosqlPrimaryNodesAppliance) SetTo(v GetNosqlApplianceRemarkNosqlPrimaryNodesAppliance) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNosqlApplianceRemarkNosqlPrimaryNodesAppliance) Get() (v GetNosqlApplianceRemarkNosqlPrimaryNodesAppliance, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNosqlApplianceRemarkNosqlPrimaryNodesAppliance) Or(d GetNosqlApplianceRemarkNosqlPrimaryNodesAppliance) GetNosqlApplianceRemarkNosqlPrimaryNodesAppliance {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone returns new OptGetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone with value set to v.
func NewOptGetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone(v GetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone) OptGetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone {
	return OptGetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone{
		Value: v,
		Set:   true,
	}
}

// OptGetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone is optional GetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone.
type OptGetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone struct {
	Value GetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone
	Set   bool
}

// IsSet returns true if OptGetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone was set.
func (o OptGetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone) Reset() {
	var v GetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone) SetTo(v GetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone) Get() (v GetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone) Or(d GetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone) GetNosqlApplianceRemarkNosqlPrimaryNodesApplianceZone {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNosqlApplianceRemarkNosqlStorage returns new OptGetNosqlApplianceRemarkNosqlStorage with value set to v.
func NewOptGetNosqlApplianceRemarkNosqlStorage(v GetNosqlApplianceRemarkNosqlStorage) OptGetNosqlApplianceRemarkNosqlStorage {
	return OptGetNosqlApplianceRemarkNosqlStorage{
		Value: v,
		Set:   true,
	}
}

// OptGetNosqlApplianceRemarkNosqlStorage is optional GetNosqlApplianceRemarkNosqlStorage.
type OptGetNosqlApplianceRemarkNosqlStorage struct {
	Value GetNosqlApplianceRemarkNosqlStorage
	Set   bool
}

// IsSet returns true if OptGetNosqlApplianceRemarkNosqlStorage was set.
func (o OptGetNosqlApplianceRemarkNosqlStorage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNosqlApplianceRemarkNosqlStorage) Reset() {
	var v GetNosqlApplianceRemarkNosqlStorage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNosqlApplianceRemarkNosqlStorage) SetTo(v GetNosqlApplianceRemarkNosqlStorage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNosqlApplianceRemarkNosqlStorage) Get() (v GetNosqlApplianceRemarkNosqlStorage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNosqlApplianceRemarkNosqlStorage) Or(d GetNosqlApplianceRemarkNosqlStorage) GetNosqlApplianceRemarkNosqlStorage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNosqlApplianceRemarkNosqlVirtualcore returns new OptGetNosqlApplianceRemarkNosqlVirtualcore with value set to v.
func NewOptGetNosqlApplianceRemarkNosqlVirtualcore(v GetNosqlApplianceRemarkNosqlVirtualcore) OptGetNosqlApplianceRemarkNosqlVirtualcore {
	return OptGetNosqlApplianceRemarkNosqlVirtualcore{
		Value: v,
		Set:   true,
	}
}

// OptGetNosqlApplianceRemarkNosqlVirtualcore is optional GetNosqlApplianceRemarkNosqlVirtualcore.
type OptGetNosqlApplianceRemarkNosqlVirtualcore struct {
	Value GetNosqlApplianceRemarkNosqlVirtualcore
	Set   bool
}

// IsSet returns true if OptGetNosqlApplianceRemarkNosqlVirtualcore was set.
func (o OptGetNosqlApplianceRemarkNosqlVirtualcore) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNosqlApplianceRemarkNosqlVirtualcore) Reset() {
	var v GetNosqlApplianceRemarkNosqlVirtualcore
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNosqlApplianceRemarkNosqlVirtualcore) SetTo(v GetNosqlApplianceRemarkNosqlVirtualcore) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNosqlApplianceRemarkNosqlVirtualcore) Get() (v GetNosqlApplianceRemarkNosqlVirtualcore, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNosqlApplianceRemarkNosqlVirtualcore) Or(d GetNosqlApplianceRemarkNosqlVirtualcore) GetNosqlApplianceRemarkNosqlVirtualcore {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNosqlApplianceRemarkZone returns new OptGetNosqlApplianceRemarkZone with value set to v.
func NewOptGetNosqlApplianceRemarkZone(v GetNosqlApplianceRemarkZone) OptGetNosqlApplianceRemarkZone {
	return OptGetNosqlApplianceRemarkZone{
		Value: v,
		Set:   true,
	}
}

// OptGetNosqlApplianceRemarkZone is optional GetNosqlApplianceRemarkZone.
type OptGetNosqlApplianceRemarkZone struct {
	Value GetNosqlApplianceRemarkZone
	Set   bool
}

// IsSet returns true if OptGetNosqlApplianceRemarkZone was set.
func (o OptGetNosqlApplianceRemarkZone) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNosqlApplianceRemarkZone) Reset() {
	var v GetNosqlApplianceRemarkZone
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNosqlApplianceRemarkZone) SetTo(v GetNosqlApplianceRemarkZone) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNosqlApplianceRemarkZone) Get() (v GetNosqlApplianceRemarkZone, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNosqlApplianceRemarkZone) Or(d GetNosqlApplianceRemarkZone) GetNosqlApplianceRemarkZone {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNosqlSettings returns new OptGetNosqlSettings with value set to v.
func NewOptGetNosqlSettings(v GetNosqlSettings) OptGetNosqlSettings {
	return OptGetNosqlSettings{
		Value: v,
		Set:   true,
	}
}

// OptGetNosqlSettings is optional GetNosqlSettings.
type OptGetNosqlSettings struct {
	Value GetNosqlSettings
	Set   bool
}

// IsSet returns true if OptGetNosqlSettings was set.
func (o OptGetNosqlSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNosqlSettings) Reset() {
	var v GetNosqlSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNosqlSettings) SetTo(v GetNosqlSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNosqlSettings) Get() (v GetNosqlSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNosqlSettings) Or(d GetNosqlSettings) GetNosqlSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNosqlSettingsRepairFull returns new OptGetNosqlSettingsRepairFull with value set to v.
func NewOptGetNosqlSettingsRepairFull(v GetNosqlSettingsRepairFull) OptGetNosqlSettingsRepairFull {
	return OptGetNosqlSettingsRepairFull{
		Value: v,
		Set:   true,
	}
}

// OptGetNosqlSettingsRepairFull is optional GetNosqlSettingsRepairFull.
type OptGetNosqlSettingsRepairFull struct {
	Value GetNosqlSettingsRepairFull
	Set   bool
}

// IsSet returns true if OptGetNosqlSettingsRepairFull was set.
func (o OptGetNosqlSettingsRepairFull) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNosqlSettingsRepairFull) Reset() {
	var v GetNosqlSettingsRepairFull
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNosqlSettingsRepairFull) SetTo(v GetNosqlSettingsRepairFull) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNosqlSettingsRepairFull) Get() (v GetNosqlSettingsRepairFull, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNosqlSettingsRepairFull) Or(d GetNosqlSettingsRepairFull) GetNosqlSettingsRepairFull {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNosqlSettingsRepairFullDayOfWeek returns new OptGetNosqlSettingsRepairFullDayOfWeek with value set to v.
func NewOptGetNosqlSettingsRepairFullDayOfWeek(v GetNosqlSettingsRepairFullDayOfWeek) OptGetNosqlSettingsRepairFullDayOfWeek {
	return OptGetNosqlSettingsRepairFullDayOfWeek{
		Value: v,
		Set:   true,
	}
}

// OptGetNosqlSettingsRepairFullDayOfWeek is optional GetNosqlSettingsRepairFullDayOfWeek.
type OptGetNosqlSettingsRepairFullDayOfWeek struct {
	Value GetNosqlSettingsRepairFullDayOfWeek
	Set   bool
}

// IsSet returns true if OptGetNosqlSettingsRepairFullDayOfWeek was set.
func (o OptGetNosqlSettingsRepairFullDayOfWeek) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNosqlSettingsRepairFullDayOfWeek) Reset() {
	var v GetNosqlSettingsRepairFullDayOfWeek
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNosqlSettingsRepairFullDayOfWeek) SetTo(v GetNosqlSettingsRepairFullDayOfWeek) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNosqlSettingsRepairFullDayOfWeek) Get() (v GetNosqlSettingsRepairFullDayOfWeek, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNosqlSettingsRepairFullDayOfWeek) Or(d GetNosqlSettingsRepairFullDayOfWeek) GetNosqlSettingsRepairFullDayOfWeek {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNosqlSettingsRepairFullInterval returns new OptGetNosqlSettingsRepairFullInterval with value set to v.
func NewOptGetNosqlSettingsRepairFullInterval(v GetNosqlSettingsRepairFullInterval) OptGetNosqlSettingsRepairFullInterval {
	return OptGetNosqlSettingsRepairFullInterval{
		Value: v,
		Set:   true,
	}
}

// OptGetNosqlSettingsRepairFullInterval is optional GetNosqlSettingsRepairFullInterval.
type OptGetNosqlSettingsRepairFullInterval struct {
	Value GetNosqlSettingsRepairFullInterval
	Set   bool
}

// IsSet returns true if OptGetNosqlSettingsRepairFullInterval was set.
func (o OptGetNosqlSettingsRepairFullInterval) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNosqlSettingsRepairFullInterval) Reset() {
	var v GetNosqlSettingsRepairFullInterval
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNosqlSettingsRepairFullInterval) SetTo(v GetNosqlSettingsRepairFullInterval) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNosqlSettingsRepairFullInterval) Get() (v GetNosqlSettingsRepairFullInterval, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNosqlSettingsRepairFullInterval) Or(d GetNosqlSettingsRepairFullInterval) GetNosqlSettingsRepairFullInterval {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNosqlSettingsRepairIncremental returns new OptGetNosqlSettingsRepairIncremental with value set to v.
func NewOptGetNosqlSettingsRepairIncremental(v GetNosqlSettingsRepairIncremental) OptGetNosqlSettingsRepairIncremental {
	return OptGetNosqlSettingsRepairIncremental{
		Value: v,
		Set:   true,
	}
}

// OptGetNosqlSettingsRepairIncremental is optional GetNosqlSettingsRepairIncremental.
type OptGetNosqlSettingsRepairIncremental struct {
	Value GetNosqlSettingsRepairIncremental
	Set   bool
}

// IsSet returns true if OptGetNosqlSettingsRepairIncremental was set.
func (o OptGetNosqlSettingsRepairIncremental) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNosqlSettingsRepairIncremental) Reset() {
	var v GetNosqlSettingsRepairIncremental
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNosqlSettingsRepairIncremental) SetTo(v GetNosqlSettingsRepairIncremental) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNosqlSettingsRepairIncremental) Get() (v GetNosqlSettingsRepairIncremental, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNosqlSettingsRepairIncremental) Or(d GetNosqlSettingsRepairIncremental) GetNosqlSettingsRepairIncremental {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetParameterResponseNosql returns new OptGetParameterResponseNosql with value set to v.
func NewOptGetParameterResponseNosql(v GetParameterResponseNosql) OptGetParameterResponseNosql {
	return OptGetParameterResponseNosql{
		Value: v,
		Set:   true,
	}
}

// OptGetParameterResponseNosql is optional GetParameterResponseNosql.
type OptGetParameterResponseNosql struct {
	Value GetParameterResponseNosql
	Set   bool
}

// IsSet returns true if OptGetParameterResponseNosql was set.
func (o OptGetParameterResponseNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetParameterResponseNosql) Reset() {
	var v GetParameterResponseNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetParameterResponseNosql) SetTo(v GetParameterResponseNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetParameterResponseNosql) Get() (v GetParameterResponseNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetParameterResponseNosql) Or(d GetParameterResponseNosql) GetParameterResponseNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPlan returns new OptGetPlan with value set to v.
func NewOptGetPlan(v GetPlan) OptGetPlan {
	return OptGetPlan{
		Value: v,
		Set:   true,
	}
}

// OptGetPlan is optional GetPlan.
type OptGetPlan struct {
	Value GetPlan
	Set   bool
}

// IsSet returns true if OptGetPlan was set.
func (o OptGetPlan) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPlan) Reset() {
	var v GetPlan
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPlan) SetTo(v GetPlan) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPlan) Get() (v GetPlan, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPlan) Or(d GetPlan) GetPlan {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetServiceClass returns new OptGetServiceClass with value set to v.
func NewOptGetServiceClass(v GetServiceClass) OptGetServiceClass {
	return OptGetServiceClass{
		Value: v,
		Set:   true,
	}
}

// OptGetServiceClass is optional GetServiceClass.
type OptGetServiceClass struct {
	Value GetServiceClass
	Set   bool
}

// IsSet returns true if OptGetServiceClass was set.
func (o OptGetServiceClass) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetServiceClass) Reset() {
	var v GetServiceClass
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetServiceClass) SetTo(v GetServiceClass) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetServiceClass) Get() (v GetServiceClass, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetServiceClass) Or(d GetServiceClass) GetServiceClass {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIPv4 returns new OptIPv4 with value set to v.
func NewOptIPv4(v netip.Addr) OptIPv4 {
	return OptIPv4{
		Value: v,
		Set:   true,
	}
}

// OptIPv4 is optional netip.Addr.
type OptIPv4 struct {
	Value netip.Addr
	Set   bool
}

// IsSet returns true if OptIPv4 was set.
func (o OptIPv4) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIPv4) Reset() {
	var v netip.Addr
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIPv4) SetTo(v netip.Addr) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIPv4) Get() (v netip.Addr, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIPv4) Or(d netip.Addr) netip.Addr {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstance returns new OptInstance with value set to v.
func NewOptInstance(v Instance) OptInstance {
	return OptInstance{
		Value: v,
		Set:   true,
	}
}

// OptInstance is optional Instance.
type OptInstance struct {
	Value Instance
	Set   bool
}

// IsSet returns true if OptInstance was set.
func (o OptInstance) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstance) Reset() {
	var v Instance
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstance) SetTo(v Instance) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstance) Get() (v Instance, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstance) Or(d Instance) Instance {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIsOk returns new OptIsOk with value set to v.
func NewOptIsOk(v IsOk) OptIsOk {
	return OptIsOk{
		Value: v,
		Set:   true,
	}
}

// OptIsOk is optional IsOk.
type OptIsOk struct {
	Value IsOk
	Set   bool
}

// IsSet returns true if OptIsOk was set.
func (o OptIsOk) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIsOk) Reset() {
	var v IsOk
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIsOk) SetTo(v IsOk) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIsOk) Get() (v IsOk, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIsOk) Or(d IsOk) IsOk {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDateTime returns new OptNilDateTime with value set to v.
func NewOptNilDateTime(v time.Time) OptNilDateTime {
	return OptNilDateTime{
		Value: v,
		Set:   true,
	}
}

// OptNilDateTime is optional nullable time.Time.
type OptNilDateTime struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDateTime was set.
func (o OptNilDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilDateTime) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilDateTime) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilGetNosqlApplianceDisk returns new OptNilGetNosqlApplianceDisk with value set to v.
func NewOptNilGetNosqlApplianceDisk(v GetNosqlApplianceDisk) OptNilGetNosqlApplianceDisk {
	return OptNilGetNosqlApplianceDisk{
		Value: v,
		Set:   true,
	}
}

// OptNilGetNosqlApplianceDisk is optional nullable GetNosqlApplianceDisk.
type OptNilGetNosqlApplianceDisk struct {
	Value GetNosqlApplianceDisk
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilGetNosqlApplianceDisk was set.
func (o OptNilGetNosqlApplianceDisk) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilGetNosqlApplianceDisk) Reset() {
	var v GetNosqlApplianceDisk
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilGetNosqlApplianceDisk) SetTo(v GetNosqlApplianceDisk) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilGetNosqlApplianceDisk) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilGetNosqlApplianceDisk) SetToNull() {
	o.Set = true
	o.Null = true
	var v GetNosqlApplianceDisk
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilGetNosqlApplianceDisk) Get() (v GetNosqlApplianceDisk, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilGetNosqlApplianceDisk) Or(d GetNosqlApplianceDisk) GetNosqlApplianceDisk {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilGetNosqlApplianceDiskEncryptionKey returns new OptNilGetNosqlApplianceDiskEncryptionKey with value set to v.
func NewOptNilGetNosqlApplianceDiskEncryptionKey(v GetNosqlApplianceDiskEncryptionKey) OptNilGetNosqlApplianceDiskEncryptionKey {
	return OptNilGetNosqlApplianceDiskEncryptionKey{
		Value: v,
		Set:   true,
	}
}

// OptNilGetNosqlApplianceDiskEncryptionKey is optional nullable GetNosqlApplianceDiskEncryptionKey.
type OptNilGetNosqlApplianceDiskEncryptionKey struct {
	Value GetNosqlApplianceDiskEncryptionKey
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilGetNosqlApplianceDiskEncryptionKey was set.
func (o OptNilGetNosqlApplianceDiskEncryptionKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilGetNosqlApplianceDiskEncryptionKey) Reset() {
	var v GetNosqlApplianceDiskEncryptionKey
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilGetNosqlApplianceDiskEncryptionKey) SetTo(v GetNosqlApplianceDiskEncryptionKey) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilGetNosqlApplianceDiskEncryptionKey) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilGetNosqlApplianceDiskEncryptionKey) SetToNull() {
	o.Set = true
	o.Null = true
	var v GetNosqlApplianceDiskEncryptionKey
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilGetNosqlApplianceDiskEncryptionKey) Get() (v GetNosqlApplianceDiskEncryptionKey, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilGetNosqlApplianceDiskEncryptionKey) Or(d GetNosqlApplianceDiskEncryptionKey) GetNosqlApplianceDiskEncryptionKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilGetNosqlApplianceInterfacesItemSwitchSubnet returns new OptNilGetNosqlApplianceInterfacesItemSwitchSubnet with value set to v.
func NewOptNilGetNosqlApplianceInterfacesItemSwitchSubnet(v GetNosqlApplianceInterfacesItemSwitchSubnet) OptNilGetNosqlApplianceInterfacesItemSwitchSubnet {
	return OptNilGetNosqlApplianceInterfacesItemSwitchSubnet{
		Value: v,
		Set:   true,
	}
}

// OptNilGetNosqlApplianceInterfacesItemSwitchSubnet is optional nullable GetNosqlApplianceInterfacesItemSwitchSubnet.
type OptNilGetNosqlApplianceInterfacesItemSwitchSubnet struct {
	Value GetNosqlApplianceInterfacesItemSwitchSubnet
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilGetNosqlApplianceInterfacesItemSwitchSubnet was set.
func (o OptNilGetNosqlApplianceInterfacesItemSwitchSubnet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilGetNosqlApplianceInterfacesItemSwitchSubnet) Reset() {
	var v GetNosqlApplianceInterfacesItemSwitchSubnet
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilGetNosqlApplianceInterfacesItemSwitchSubnet) SetTo(v GetNosqlApplianceInterfacesItemSwitchSubnet) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilGetNosqlApplianceInterfacesItemSwitchSubnet) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilGetNosqlApplianceInterfacesItemSwitchSubnet) SetToNull() {
	o.Set = true
	o.Null = true
	var v GetNosqlApplianceInterfacesItemSwitchSubnet
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilGetNosqlApplianceInterfacesItemSwitchSubnet) Get() (v GetNosqlApplianceInterfacesItemSwitchSubnet, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilGetNosqlApplianceInterfacesItemSwitchSubnet) Or(d GetNosqlApplianceInterfacesItemSwitchSubnet) GetNosqlApplianceInterfacesItemSwitchSubnet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilGetNosqlApplianceInterfacesItemSwitchUserSubnet returns new OptNilGetNosqlApplianceInterfacesItemSwitchUserSubnet with value set to v.
func NewOptNilGetNosqlApplianceInterfacesItemSwitchUserSubnet(v GetNosqlApplianceInterfacesItemSwitchUserSubnet) OptNilGetNosqlApplianceInterfacesItemSwitchUserSubnet {
	return OptNilGetNosqlApplianceInterfacesItemSwitchUserSubnet{
		Value: v,
		Set:   true,
	}
}

// OptNilGetNosqlApplianceInterfacesItemSwitchUserSubnet is optional nullable GetNosqlApplianceInterfacesItemSwitchUserSubnet.
type OptNilGetNosqlApplianceInterfacesItemSwitchUserSubnet struct {
	Value GetNosqlApplianceInterfacesItemSwitchUserSubnet
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilGetNosqlApplianceInterfacesItemSwitchUserSubnet was set.
func (o OptNilGetNosqlApplianceInterfacesItemSwitchUserSubnet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilGetNosqlApplianceInterfacesItemSwitchUserSubnet) Reset() {
	var v GetNosqlApplianceInterfacesItemSwitchUserSubnet
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilGetNosqlApplianceInterfacesItemSwitchUserSubnet) SetTo(v GetNosqlApplianceInterfacesItemSwitchUserSubnet) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilGetNosqlApplianceInterfacesItemSwitchUserSubnet) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilGetNosqlApplianceInterfacesItemSwitchUserSubnet) SetToNull() {
	o.Set = true
	o.Null = true
	var v GetNosqlApplianceInterfacesItemSwitchUserSubnet
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilGetNosqlApplianceInterfacesItemSwitchUserSubnet) Get() (v GetNosqlApplianceInterfacesItemSwitchUserSubnet, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilGetNosqlApplianceInterfacesItemSwitchUserSubnet) Or(d GetNosqlApplianceInterfacesItemSwitchUserSubnet) GetNosqlApplianceInterfacesItemSwitchUserSubnet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilGetNosqlSettingsBackup returns new OptNilGetNosqlSettingsBackup with value set to v.
func NewOptNilGetNosqlSettingsBackup(v GetNosqlSettingsBackup) OptNilGetNosqlSettingsBackup {
	return OptNilGetNosqlSettingsBackup{
		Value: v,
		Set:   true,
	}
}

// OptNilGetNosqlSettingsBackup is optional nullable GetNosqlSettingsBackup.
type OptNilGetNosqlSettingsBackup struct {
	Value GetNosqlSettingsBackup
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilGetNosqlSettingsBackup was set.
func (o OptNilGetNosqlSettingsBackup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilGetNosqlSettingsBackup) Reset() {
	var v GetNosqlSettingsBackup
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilGetNosqlSettingsBackup) SetTo(v GetNosqlSettingsBackup) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilGetNosqlSettingsBackup) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilGetNosqlSettingsBackup) SetToNull() {
	o.Set = true
	o.Null = true
	var v GetNosqlSettingsBackup
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilGetNosqlSettingsBackup) Get() (v GetNosqlSettingsBackup, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilGetNosqlSettingsBackup) Or(d GetNosqlSettingsBackup) GetNosqlSettingsBackup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilGetNosqlSettingsBackupDayOfWeekItemArray returns new OptNilGetNosqlSettingsBackupDayOfWeekItemArray with value set to v.
func NewOptNilGetNosqlSettingsBackupDayOfWeekItemArray(v []GetNosqlSettingsBackupDayOfWeekItem) OptNilGetNosqlSettingsBackupDayOfWeekItemArray {
	return OptNilGetNosqlSettingsBackupDayOfWeekItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilGetNosqlSettingsBackupDayOfWeekItemArray is optional nullable []GetNosqlSettingsBackupDayOfWeekItem.
type OptNilGetNosqlSettingsBackupDayOfWeekItemArray struct {
	Value []GetNosqlSettingsBackupDayOfWeekItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilGetNosqlSettingsBackupDayOfWeekItemArray was set.
func (o OptNilGetNosqlSettingsBackupDayOfWeekItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilGetNosqlSettingsBackupDayOfWeekItemArray) Reset() {
	var v []GetNosqlSettingsBackupDayOfWeekItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilGetNosqlSettingsBackupDayOfWeekItemArray) SetTo(v []GetNosqlSettingsBackupDayOfWeekItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilGetNosqlSettingsBackupDayOfWeekItemArray) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilGetNosqlSettingsBackupDayOfWeekItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []GetNosqlSettingsBackupDayOfWeekItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilGetNosqlSettingsBackupDayOfWeekItemArray) Get() (v []GetNosqlSettingsBackupDayOfWeekItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilGetNosqlSettingsBackupDayOfWeekItemArray) Or(d []GetNosqlSettingsBackupDayOfWeekItem) []GetNosqlSettingsBackupDayOfWeekItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilGetNosqlSettingsRepair returns new OptNilGetNosqlSettingsRepair with value set to v.
func NewOptNilGetNosqlSettingsRepair(v GetNosqlSettingsRepair) OptNilGetNosqlSettingsRepair {
	return OptNilGetNosqlSettingsRepair{
		Value: v,
		Set:   true,
	}
}

// OptNilGetNosqlSettingsRepair is optional nullable GetNosqlSettingsRepair.
type OptNilGetNosqlSettingsRepair struct {
	Value GetNosqlSettingsRepair
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilGetNosqlSettingsRepair was set.
func (o OptNilGetNosqlSettingsRepair) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilGetNosqlSettingsRepair) Reset() {
	var v GetNosqlSettingsRepair
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilGetNosqlSettingsRepair) SetTo(v GetNosqlSettingsRepair) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilGetNosqlSettingsRepair) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilGetNosqlSettingsRepair) SetToNull() {
	o.Set = true
	o.Null = true
	var v GetNosqlSettingsRepair
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilGetNosqlSettingsRepair) Get() (v GetNosqlSettingsRepair, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilGetNosqlSettingsRepair) Or(d GetNosqlSettingsRepair) GetNosqlSettingsRepair {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInstanceHost returns new OptNilInstanceHost with value set to v.
func NewOptNilInstanceHost(v InstanceHost) OptNilInstanceHost {
	return OptNilInstanceHost{
		Value: v,
		Set:   true,
	}
}

// OptNilInstanceHost is optional nullable InstanceHost.
type OptNilInstanceHost struct {
	Value InstanceHost
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInstanceHost was set.
func (o OptNilInstanceHost) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInstanceHost) Reset() {
	var v InstanceHost
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInstanceHost) SetTo(v InstanceHost) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilInstanceHost) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilInstanceHost) SetToNull() {
	o.Set = true
	o.Null = true
	var v InstanceHost
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInstanceHost) Get() (v InstanceHost, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInstanceHost) Or(d InstanceHost) InstanceHost {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlApplianceDisk returns new OptNilNosqlApplianceDisk with value set to v.
func NewOptNilNosqlApplianceDisk(v NosqlApplianceDisk) OptNilNosqlApplianceDisk {
	return OptNilNosqlApplianceDisk{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlApplianceDisk is optional nullable NosqlApplianceDisk.
type OptNilNosqlApplianceDisk struct {
	Value NosqlApplianceDisk
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlApplianceDisk was set.
func (o OptNilNosqlApplianceDisk) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlApplianceDisk) Reset() {
	var v NosqlApplianceDisk
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlApplianceDisk) SetTo(v NosqlApplianceDisk) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlApplianceDisk) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNosqlApplianceDisk) SetToNull() {
	o.Set = true
	o.Null = true
	var v NosqlApplianceDisk
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlApplianceDisk) Get() (v NosqlApplianceDisk, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlApplianceDisk) Or(d NosqlApplianceDisk) NosqlApplianceDisk {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlApplianceInterfacesItemSwitchSubnet returns new OptNilNosqlApplianceInterfacesItemSwitchSubnet with value set to v.
func NewOptNilNosqlApplianceInterfacesItemSwitchSubnet(v NosqlApplianceInterfacesItemSwitchSubnet) OptNilNosqlApplianceInterfacesItemSwitchSubnet {
	return OptNilNosqlApplianceInterfacesItemSwitchSubnet{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlApplianceInterfacesItemSwitchSubnet is optional nullable NosqlApplianceInterfacesItemSwitchSubnet.
type OptNilNosqlApplianceInterfacesItemSwitchSubnet struct {
	Value NosqlApplianceInterfacesItemSwitchSubnet
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlApplianceInterfacesItemSwitchSubnet was set.
func (o OptNilNosqlApplianceInterfacesItemSwitchSubnet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlApplianceInterfacesItemSwitchSubnet) Reset() {
	var v NosqlApplianceInterfacesItemSwitchSubnet
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlApplianceInterfacesItemSwitchSubnet) SetTo(v NosqlApplianceInterfacesItemSwitchSubnet) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlApplianceInterfacesItemSwitchSubnet) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNosqlApplianceInterfacesItemSwitchSubnet) SetToNull() {
	o.Set = true
	o.Null = true
	var v NosqlApplianceInterfacesItemSwitchSubnet
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlApplianceInterfacesItemSwitchSubnet) Get() (v NosqlApplianceInterfacesItemSwitchSubnet, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlApplianceInterfacesItemSwitchSubnet) Or(d NosqlApplianceInterfacesItemSwitchSubnet) NosqlApplianceInterfacesItemSwitchSubnet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlApplianceInterfacesItemSwitchUserSubnet returns new OptNilNosqlApplianceInterfacesItemSwitchUserSubnet with value set to v.
func NewOptNilNosqlApplianceInterfacesItemSwitchUserSubnet(v NosqlApplianceInterfacesItemSwitchUserSubnet) OptNilNosqlApplianceInterfacesItemSwitchUserSubnet {
	return OptNilNosqlApplianceInterfacesItemSwitchUserSubnet{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlApplianceInterfacesItemSwitchUserSubnet is optional nullable NosqlApplianceInterfacesItemSwitchUserSubnet.
type OptNilNosqlApplianceInterfacesItemSwitchUserSubnet struct {
	Value NosqlApplianceInterfacesItemSwitchUserSubnet
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlApplianceInterfacesItemSwitchUserSubnet was set.
func (o OptNilNosqlApplianceInterfacesItemSwitchUserSubnet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlApplianceInterfacesItemSwitchUserSubnet) Reset() {
	var v NosqlApplianceInterfacesItemSwitchUserSubnet
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlApplianceInterfacesItemSwitchUserSubnet) SetTo(v NosqlApplianceInterfacesItemSwitchUserSubnet) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlApplianceInterfacesItemSwitchUserSubnet) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNosqlApplianceInterfacesItemSwitchUserSubnet) SetToNull() {
	o.Set = true
	o.Null = true
	var v NosqlApplianceInterfacesItemSwitchUserSubnet
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlApplianceInterfacesItemSwitchUserSubnet) Get() (v NosqlApplianceInterfacesItemSwitchUserSubnet, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlApplianceInterfacesItemSwitchUserSubnet) Or(d NosqlApplianceInterfacesItemSwitchUserSubnet) NosqlApplianceInterfacesItemSwitchUserSubnet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlCreateRequestApplianceDisk returns new OptNilNosqlCreateRequestApplianceDisk with value set to v.
func NewOptNilNosqlCreateRequestApplianceDisk(v NosqlCreateRequestApplianceDisk) OptNilNosqlCreateRequestApplianceDisk {
	return OptNilNosqlCreateRequestApplianceDisk{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlCreateRequestApplianceDisk is optional nullable NosqlCreateRequestApplianceDisk.
type OptNilNosqlCreateRequestApplianceDisk struct {
	Value NosqlCreateRequestApplianceDisk
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlCreateRequestApplianceDisk was set.
func (o OptNilNosqlCreateRequestApplianceDisk) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlCreateRequestApplianceDisk) Reset() {
	var v NosqlCreateRequestApplianceDisk
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlCreateRequestApplianceDisk) SetTo(v NosqlCreateRequestApplianceDisk) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlCreateRequestApplianceDisk) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNosqlCreateRequestApplianceDisk) SetToNull() {
	o.Set = true
	o.Null = true
	var v NosqlCreateRequestApplianceDisk
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlCreateRequestApplianceDisk) Get() (v NosqlCreateRequestApplianceDisk, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlCreateRequestApplianceDisk) Or(d NosqlCreateRequestApplianceDisk) NosqlCreateRequestApplianceDisk {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlCreateRequestApplianceSettingsBackup returns new OptNilNosqlCreateRequestApplianceSettingsBackup with value set to v.
func NewOptNilNosqlCreateRequestApplianceSettingsBackup(v NosqlCreateRequestApplianceSettingsBackup) OptNilNosqlCreateRequestApplianceSettingsBackup {
	return OptNilNosqlCreateRequestApplianceSettingsBackup{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlCreateRequestApplianceSettingsBackup is optional nullable NosqlCreateRequestApplianceSettingsBackup.
type OptNilNosqlCreateRequestApplianceSettingsBackup struct {
	Value NosqlCreateRequestApplianceSettingsBackup
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlCreateRequestApplianceSettingsBackup was set.
func (o OptNilNosqlCreateRequestApplianceSettingsBackup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlCreateRequestApplianceSettingsBackup) Reset() {
	var v NosqlCreateRequestApplianceSettingsBackup
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlCreateRequestApplianceSettingsBackup) SetTo(v NosqlCreateRequestApplianceSettingsBackup) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlCreateRequestApplianceSettingsBackup) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNosqlCreateRequestApplianceSettingsBackup) SetToNull() {
	o.Set = true
	o.Null = true
	var v NosqlCreateRequestApplianceSettingsBackup
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlCreateRequestApplianceSettingsBackup) Get() (v NosqlCreateRequestApplianceSettingsBackup, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlCreateRequestApplianceSettingsBackup) Or(d NosqlCreateRequestApplianceSettingsBackup) NosqlCreateRequestApplianceSettingsBackup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray returns new OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray with value set to v.
func NewOptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray(v []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem) OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray {
	return OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray is optional nullable []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem.
type OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray struct {
	Value []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray was set.
func (o OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray) Reset() {
	var v []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray) SetTo(v []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray) IsNull() bool {
	return o.Null
}

// SetToNull sets value to null.
func (o *OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray) Get() (v []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray) Or(d []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem) []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlCreateRequestApplianceSettingsRepair returns new OptNilNosqlCreateRequestApplianceSettingsRepair with value set to v.
func NewOptNilNosqlCreateRequestApplianceSettingsRepair(v NosqlCreateRequestApplianceSettingsRepair) OptNilNosqlCreateRequestApplianceSettingsRepair {
	return OptNilNosqlCreateRequestApplianceSettingsRepair{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlCreateRequestApplianceSettingsRepair is optional nullable NosqlCreateRequestApplianceSettingsRepair.
type OptNilNosqlCreateRequestApplianceSettingsRepair struct {
	Value NosqlCreateRequestApplianceSettingsRepair
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlCreateRequestApplianceSettingsRepair was set.
func (o OptNilNosqlCreateRequestApplianceSettingsRepair) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlCreateRequestApplianceSettingsRepair) Reset() {
	var v NosqlCreateRequestApplianceSettingsRepair
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlCreateRequestApplianceSettingsRepair) SetTo(v NosqlCreateRequestApplianceSettingsRepair) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlCreateRequestApplianceSettingsRepair) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNosqlCreateRequestApplianceSettingsRepair) SetToNull() {
	o.Set = true
	o.Null = true
	var v NosqlCreateRequestApplianceSettingsRepair
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlCreateRequestApplianceSettingsRepair) Get() (v NosqlCreateRequestApplianceSettingsRepair, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlCreateRequestApplianceSettingsRepair) Or(d NosqlCreateRequestApplianceSettingsRepair) NosqlCreateRequestApplianceSettingsRepair {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlSettingsBackup returns new OptNilNosqlSettingsBackup with value set to v.
func NewOptNilNosqlSettingsBackup(v NosqlSettingsBackup) OptNilNosqlSettingsBackup {
	return OptNilNosqlSettingsBackup{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlSettingsBackup is optional nullable NosqlSettingsBackup.
type OptNilNosqlSettingsBackup struct {
	Value NosqlSettingsBackup
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlSettingsBackup was set.
func (o OptNilNosqlSettingsBackup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlSettingsBackup) Reset() {
	var v NosqlSettingsBackup
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlSettingsBackup) SetTo(v NosqlSettingsBackup) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlSettingsBackup) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNosqlSettingsBackup) SetToNull() {
	o.Set = true
	o.Null = true
	var v NosqlSettingsBackup
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlSettingsBackup) Get() (v NosqlSettingsBackup, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlSettingsBackup) Or(d NosqlSettingsBackup) NosqlSettingsBackup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlSettingsBackupDayOfWeekItemArray returns new OptNilNosqlSettingsBackupDayOfWeekItemArray with value set to v.
func NewOptNilNosqlSettingsBackupDayOfWeekItemArray(v []NosqlSettingsBackupDayOfWeekItem) OptNilNosqlSettingsBackupDayOfWeekItemArray {
	return OptNilNosqlSettingsBackupDayOfWeekItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlSettingsBackupDayOfWeekItemArray is optional nullable []NosqlSettingsBackupDayOfWeekItem.
type OptNilNosqlSettingsBackupDayOfWeekItemArray struct {
	Value []NosqlSettingsBackupDayOfWeekItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlSettingsBackupDayOfWeekItemArray was set.
func (o OptNilNosqlSettingsBackupDayOfWeekItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlSettingsBackupDayOfWeekItemArray) Reset() {
	var v []NosqlSettingsBackupDayOfWeekItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlSettingsBackupDayOfWeekItemArray) SetTo(v []NosqlSettingsBackupDayOfWeekItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlSettingsBackupDayOfWeekItemArray) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNosqlSettingsBackupDayOfWeekItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []NosqlSettingsBackupDayOfWeekItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlSettingsBackupDayOfWeekItemArray) Get() (v []NosqlSettingsBackupDayOfWeekItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlSettingsBackupDayOfWeekItemArray) Or(d []NosqlSettingsBackupDayOfWeekItem) []NosqlSettingsBackupDayOfWeekItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlSettingsRepair returns new OptNilNosqlSettingsRepair with value set to v.
func NewOptNilNosqlSettingsRepair(v NosqlSettingsRepair) OptNilNosqlSettingsRepair {
	return OptNilNosqlSettingsRepair{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlSettingsRepair is optional nullable NosqlSettingsRepair.
type OptNilNosqlSettingsRepair struct {
	Value NosqlSettingsRepair
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlSettingsRepair was set.
func (o OptNilNosqlSettingsRepair) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlSettingsRepair) Reset() {
	var v NosqlSettingsRepair
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlSettingsRepair) SetTo(v NosqlSettingsRepair) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlSettingsRepair) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNosqlSettingsRepair) SetToNull() {
	o.Set = true
	o.Null = true
	var v NosqlSettingsRepair
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlSettingsRepair) Get() (v NosqlSettingsRepair, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlSettingsRepair) Or(d NosqlSettingsRepair) NosqlSettingsRepair {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlUpdateRequestApplianceSettingsBackup returns new OptNilNosqlUpdateRequestApplianceSettingsBackup with value set to v.
func NewOptNilNosqlUpdateRequestApplianceSettingsBackup(v NosqlUpdateRequestApplianceSettingsBackup) OptNilNosqlUpdateRequestApplianceSettingsBackup {
	return OptNilNosqlUpdateRequestApplianceSettingsBackup{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlUpdateRequestApplianceSettingsBackup is optional nullable NosqlUpdateRequestApplianceSettingsBackup.
type OptNilNosqlUpdateRequestApplianceSettingsBackup struct {
	Value NosqlUpdateRequestApplianceSettingsBackup
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlUpdateRequestApplianceSettingsBackup was set.
func (o OptNilNosqlUpdateRequestApplianceSettingsBackup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlUpdateRequestApplianceSettingsBackup) Reset() {
	var v NosqlUpdateRequestApplianceSettingsBackup
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlUpdateRequestApplianceSettingsBackup) SetTo(v NosqlUpdateRequestApplianceSettingsBackup) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlUpdateRequestApplianceSettingsBackup) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNosqlUpdateRequestApplianceSettingsBackup) SetToNull() {
	o.Set = true
	o.Null = true
	var v NosqlUpdateRequestApplianceSettingsBackup
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlUpdateRequestApplianceSettingsBackup) Get() (v NosqlUpdateRequestApplianceSettingsBackup, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlUpdateRequestApplianceSettingsBackup) Or(d NosqlUpdateRequestApplianceSettingsBackup) NosqlUpdateRequestApplianceSettingsBackup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray returns new OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray with value set to v.
func NewOptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray(v []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem) OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray {
	return OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray is optional nullable []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem.
type OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray struct {
	Value []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray was set.
func (o OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray) Reset() {
	var v []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray) SetTo(v []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray) IsNull() bool {
	return o.Null
}

// SetToNull sets value to null.
func (o *OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray) Get() (v []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray) Or(d []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem) []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlUpdateRequestApplianceSettingsRepair returns new OptNilNosqlUpdateRequestApplianceSettingsRepair with value set to v.
func NewOptNilNosqlUpdateRequestApplianceSettingsRepair(v NosqlUpdateRequestApplianceSettingsRepair) OptNilNosqlUpdateRequestApplianceSettingsRepair {
	return OptNilNosqlUpdateRequestApplianceSettingsRepair{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlUpdateRequestApplianceSettingsRepair is optional nullable NosqlUpdateRequestApplianceSettingsRepair.
type OptNilNosqlUpdateRequestApplianceSettingsRepair struct {
	Value NosqlUpdateRequestApplianceSettingsRepair
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlUpdateRequestApplianceSettingsRepair was set.
func (o OptNilNosqlUpdateRequestApplianceSettingsRepair) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlUpdateRequestApplianceSettingsRepair) Reset() {
	var v NosqlUpdateRequestApplianceSettingsRepair
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlUpdateRequestApplianceSettingsRepair) SetTo(v NosqlUpdateRequestApplianceSettingsRepair) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlUpdateRequestApplianceSettingsRepair) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNosqlUpdateRequestApplianceSettingsRepair) SetToNull() {
	o.Set = true
	o.Null = true
	var v NosqlUpdateRequestApplianceSettingsRepair
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlUpdateRequestApplianceSettingsRepair) Get() (v NosqlUpdateRequestApplianceSettingsRepair, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlUpdateRequestApplianceSettingsRepair) Or(d NosqlUpdateRequestApplianceSettingsRepair) NosqlUpdateRequestApplianceSettingsRepair {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTags returns new OptNilTags with value set to v.
func NewOptNilTags(v Tags) OptNilTags {
	return OptNilTags{
		Value: v,
		Set:   true,
	}
}

// OptNilTags is optional nullable Tags.
type OptNilTags struct {
	Value Tags
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTags was set.
func (o OptNilTags) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTags) Reset() {
	var v Tags
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTags) SetTo(v Tags) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilTags) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilTags) SetToNull() {
	o.Set = true
	o.Null = true
	var v Tags
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTags) Get() (v Tags, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTags) Or(d Tags) Tags {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNodeHealthNosql returns new OptNodeHealthNosql with value set to v.
func NewOptNodeHealthNosql(v NodeHealthNosql) OptNodeHealthNosql {
	return OptNodeHealthNosql{
		Value: v,
		Set:   true,
	}
}

// OptNodeHealthNosql is optional NodeHealthNosql.
type OptNodeHealthNosql struct {
	Value NodeHealthNosql
	Set   bool
}

// IsSet returns true if OptNodeHealthNosql was set.
func (o OptNodeHealthNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNodeHealthNosql) Reset() {
	var v NodeHealthNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNodeHealthNosql) SetTo(v NodeHealthNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNodeHealthNosql) Get() (v NodeHealthNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNodeHealthNosql) Or(d NodeHealthNosql) NodeHealthNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNodeHealthNosqlStatus returns new OptNodeHealthNosqlStatus with value set to v.
func NewOptNodeHealthNosqlStatus(v NodeHealthNosqlStatus) OptNodeHealthNosqlStatus {
	return OptNodeHealthNosqlStatus{
		Value: v,
		Set:   true,
	}
}

// OptNodeHealthNosqlStatus is optional NodeHealthNosqlStatus.
type OptNodeHealthNosqlStatus struct {
	Value NodeHealthNosqlStatus
	Set   bool
}

// IsSet returns true if OptNodeHealthNosqlStatus was set.
func (o OptNodeHealthNosqlStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNodeHealthNosqlStatus) Reset() {
	var v NodeHealthNosqlStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNodeHealthNosqlStatus) SetTo(v NodeHealthNosqlStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNodeHealthNosqlStatus) Get() (v NodeHealthNosqlStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNodeHealthNosqlStatus) Or(d NodeHealthNosqlStatus) NodeHealthNosqlStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlAppliance returns new OptNosqlAppliance with value set to v.
func NewOptNosqlAppliance(v NosqlAppliance) OptNosqlAppliance {
	return OptNosqlAppliance{
		Value: v,
		Set:   true,
	}
}

// OptNosqlAppliance is optional NosqlAppliance.
type OptNosqlAppliance struct {
	Value NosqlAppliance
	Set   bool
}

// IsSet returns true if OptNosqlAppliance was set.
func (o OptNosqlAppliance) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlAppliance) Reset() {
	var v NosqlAppliance
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlAppliance) SetTo(v NosqlAppliance) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlAppliance) Get() (v NosqlAppliance, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlAppliance) Or(d NosqlAppliance) NosqlAppliance {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlApplianceDiskEncryptionKey returns new OptNosqlApplianceDiskEncryptionKey with value set to v.
func NewOptNosqlApplianceDiskEncryptionKey(v NosqlApplianceDiskEncryptionKey) OptNosqlApplianceDiskEncryptionKey {
	return OptNosqlApplianceDiskEncryptionKey{
		Value: v,
		Set:   true,
	}
}

// OptNosqlApplianceDiskEncryptionKey is optional NosqlApplianceDiskEncryptionKey.
type OptNosqlApplianceDiskEncryptionKey struct {
	Value NosqlApplianceDiskEncryptionKey
	Set   bool
}

// IsSet returns true if OptNosqlApplianceDiskEncryptionKey was set.
func (o OptNosqlApplianceDiskEncryptionKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlApplianceDiskEncryptionKey) Reset() {
	var v NosqlApplianceDiskEncryptionKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlApplianceDiskEncryptionKey) SetTo(v NosqlApplianceDiskEncryptionKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlApplianceDiskEncryptionKey) Get() (v NosqlApplianceDiskEncryptionKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlApplianceDiskEncryptionKey) Or(d NosqlApplianceDiskEncryptionKey) NosqlApplianceDiskEncryptionKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlApplianceInterfacesItemSwitch returns new OptNosqlApplianceInterfacesItemSwitch with value set to v.
func NewOptNosqlApplianceInterfacesItemSwitch(v NosqlApplianceInterfacesItemSwitch) OptNosqlApplianceInterfacesItemSwitch {
	return OptNosqlApplianceInterfacesItemSwitch{
		Value: v,
		Set:   true,
	}
}

// OptNosqlApplianceInterfacesItemSwitch is optional NosqlApplianceInterfacesItemSwitch.
type OptNosqlApplianceInterfacesItemSwitch struct {
	Value NosqlApplianceInterfacesItemSwitch
	Set   bool
}

// IsSet returns true if OptNosqlApplianceInterfacesItemSwitch was set.
func (o OptNosqlApplianceInterfacesItemSwitch) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlApplianceInterfacesItemSwitch) Reset() {
	var v NosqlApplianceInterfacesItemSwitch
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlApplianceInterfacesItemSwitch) SetTo(v NosqlApplianceInterfacesItemSwitch) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlApplianceInterfacesItemSwitch) Get() (v NosqlApplianceInterfacesItemSwitch, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlApplianceInterfacesItemSwitch) Or(d NosqlApplianceInterfacesItemSwitch) NosqlApplianceInterfacesItemSwitch {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlApplianceInterfacesItemSwitchSubnetInternet returns new OptNosqlApplianceInterfacesItemSwitchSubnetInternet with value set to v.
func NewOptNosqlApplianceInterfacesItemSwitchSubnetInternet(v NosqlApplianceInterfacesItemSwitchSubnetInternet) OptNosqlApplianceInterfacesItemSwitchSubnetInternet {
	return OptNosqlApplianceInterfacesItemSwitchSubnetInternet{
		Value: v,
		Set:   true,
	}
}

// OptNosqlApplianceInterfacesItemSwitchSubnetInternet is optional NosqlApplianceInterfacesItemSwitchSubnetInternet.
type OptNosqlApplianceInterfacesItemSwitchSubnetInternet struct {
	Value NosqlApplianceInterfacesItemSwitchSubnetInternet
	Set   bool
}

// IsSet returns true if OptNosqlApplianceInterfacesItemSwitchSubnetInternet was set.
func (o OptNosqlApplianceInterfacesItemSwitchSubnetInternet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlApplianceInterfacesItemSwitchSubnetInternet) Reset() {
	var v NosqlApplianceInterfacesItemSwitchSubnetInternet
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlApplianceInterfacesItemSwitchSubnetInternet) SetTo(v NosqlApplianceInterfacesItemSwitchSubnetInternet) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlApplianceInterfacesItemSwitchSubnetInternet) Get() (v NosqlApplianceInterfacesItemSwitchSubnetInternet, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlApplianceInterfacesItemSwitchSubnetInternet) Or(d NosqlApplianceInterfacesItemSwitchSubnetInternet) NosqlApplianceInterfacesItemSwitchSubnetInternet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlApplianceRemark returns new OptNosqlApplianceRemark with value set to v.
func NewOptNosqlApplianceRemark(v NosqlApplianceRemark) OptNosqlApplianceRemark {
	return OptNosqlApplianceRemark{
		Value: v,
		Set:   true,
	}
}

// OptNosqlApplianceRemark is optional NosqlApplianceRemark.
type OptNosqlApplianceRemark struct {
	Value NosqlApplianceRemark
	Set   bool
}

// IsSet returns true if OptNosqlApplianceRemark was set.
func (o OptNosqlApplianceRemark) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlApplianceRemark) Reset() {
	var v NosqlApplianceRemark
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlApplianceRemark) SetTo(v NosqlApplianceRemark) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlApplianceRemark) Get() (v NosqlApplianceRemark, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlApplianceRemark) Or(d NosqlApplianceRemark) NosqlApplianceRemark {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlApplianceRemarkNosqlDatabaseEngine returns new OptNosqlApplianceRemarkNosqlDatabaseEngine with value set to v.
func NewOptNosqlApplianceRemarkNosqlDatabaseEngine(v NosqlApplianceRemarkNosqlDatabaseEngine) OptNosqlApplianceRemarkNosqlDatabaseEngine {
	return OptNosqlApplianceRemarkNosqlDatabaseEngine{
		Value: v,
		Set:   true,
	}
}

// OptNosqlApplianceRemarkNosqlDatabaseEngine is optional NosqlApplianceRemarkNosqlDatabaseEngine.
type OptNosqlApplianceRemarkNosqlDatabaseEngine struct {
	Value NosqlApplianceRemarkNosqlDatabaseEngine
	Set   bool
}

// IsSet returns true if OptNosqlApplianceRemarkNosqlDatabaseEngine was set.
func (o OptNosqlApplianceRemarkNosqlDatabaseEngine) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlApplianceRemarkNosqlDatabaseEngine) Reset() {
	var v NosqlApplianceRemarkNosqlDatabaseEngine
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlApplianceRemarkNosqlDatabaseEngine) SetTo(v NosqlApplianceRemarkNosqlDatabaseEngine) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlApplianceRemarkNosqlDatabaseEngine) Get() (v NosqlApplianceRemarkNosqlDatabaseEngine, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlApplianceRemarkNosqlDatabaseEngine) Or(d NosqlApplianceRemarkNosqlDatabaseEngine) NosqlApplianceRemarkNosqlDatabaseEngine {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlApplianceRemarkNosqlDiskSize returns new OptNosqlApplianceRemarkNosqlDiskSize with value set to v.
func NewOptNosqlApplianceRemarkNosqlDiskSize(v NosqlApplianceRemarkNosqlDiskSize) OptNosqlApplianceRemarkNosqlDiskSize {
	return OptNosqlApplianceRemarkNosqlDiskSize{
		Value: v,
		Set:   true,
	}
}

// OptNosqlApplianceRemarkNosqlDiskSize is optional NosqlApplianceRemarkNosqlDiskSize.
type OptNosqlApplianceRemarkNosqlDiskSize struct {
	Value NosqlApplianceRemarkNosqlDiskSize
	Set   bool
}

// IsSet returns true if OptNosqlApplianceRemarkNosqlDiskSize was set.
func (o OptNosqlApplianceRemarkNosqlDiskSize) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlApplianceRemarkNosqlDiskSize) Reset() {
	var v NosqlApplianceRemarkNosqlDiskSize
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlApplianceRemarkNosqlDiskSize) SetTo(v NosqlApplianceRemarkNosqlDiskSize) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlApplianceRemarkNosqlDiskSize) Get() (v NosqlApplianceRemarkNosqlDiskSize, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlApplianceRemarkNosqlDiskSize) Or(d NosqlApplianceRemarkNosqlDiskSize) NosqlApplianceRemarkNosqlDiskSize {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlApplianceRemarkNosqlMemory returns new OptNosqlApplianceRemarkNosqlMemory with value set to v.
func NewOptNosqlApplianceRemarkNosqlMemory(v NosqlApplianceRemarkNosqlMemory) OptNosqlApplianceRemarkNosqlMemory {
	return OptNosqlApplianceRemarkNosqlMemory{
		Value: v,
		Set:   true,
	}
}

// OptNosqlApplianceRemarkNosqlMemory is optional NosqlApplianceRemarkNosqlMemory.
type OptNosqlApplianceRemarkNosqlMemory struct {
	Value NosqlApplianceRemarkNosqlMemory
	Set   bool
}

// IsSet returns true if OptNosqlApplianceRemarkNosqlMemory was set.
func (o OptNosqlApplianceRemarkNosqlMemory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlApplianceRemarkNosqlMemory) Reset() {
	var v NosqlApplianceRemarkNosqlMemory
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlApplianceRemarkNosqlMemory) SetTo(v NosqlApplianceRemarkNosqlMemory) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlApplianceRemarkNosqlMemory) Get() (v NosqlApplianceRemarkNosqlMemory, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlApplianceRemarkNosqlMemory) Or(d NosqlApplianceRemarkNosqlMemory) NosqlApplianceRemarkNosqlMemory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlApplianceRemarkNosqlPrimaryNodes returns new OptNosqlApplianceRemarkNosqlPrimaryNodes with value set to v.
func NewOptNosqlApplianceRemarkNosqlPrimaryNodes(v NosqlApplianceRemarkNosqlPrimaryNodes) OptNosqlApplianceRemarkNosqlPrimaryNodes {
	return OptNosqlApplianceRemarkNosqlPrimaryNodes{
		Value: v,
		Set:   true,
	}
}

// OptNosqlApplianceRemarkNosqlPrimaryNodes is optional NosqlApplianceRemarkNosqlPrimaryNodes.
type OptNosqlApplianceRemarkNosqlPrimaryNodes struct {
	Value NosqlApplianceRemarkNosqlPrimaryNodes
	Set   bool
}

// IsSet returns true if OptNosqlApplianceRemarkNosqlPrimaryNodes was set.
func (o OptNosqlApplianceRemarkNosqlPrimaryNodes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlApplianceRemarkNosqlPrimaryNodes) Reset() {
	var v NosqlApplianceRemarkNosqlPrimaryNodes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlApplianceRemarkNosqlPrimaryNodes) SetTo(v NosqlApplianceRemarkNosqlPrimaryNodes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlApplianceRemarkNosqlPrimaryNodes) Get() (v NosqlApplianceRemarkNosqlPrimaryNodes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlApplianceRemarkNosqlPrimaryNodes) Or(d NosqlApplianceRemarkNosqlPrimaryNodes) NosqlApplianceRemarkNosqlPrimaryNodes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlApplianceRemarkNosqlStorage returns new OptNosqlApplianceRemarkNosqlStorage with value set to v.
func NewOptNosqlApplianceRemarkNosqlStorage(v NosqlApplianceRemarkNosqlStorage) OptNosqlApplianceRemarkNosqlStorage {
	return OptNosqlApplianceRemarkNosqlStorage{
		Value: v,
		Set:   true,
	}
}

// OptNosqlApplianceRemarkNosqlStorage is optional NosqlApplianceRemarkNosqlStorage.
type OptNosqlApplianceRemarkNosqlStorage struct {
	Value NosqlApplianceRemarkNosqlStorage
	Set   bool
}

// IsSet returns true if OptNosqlApplianceRemarkNosqlStorage was set.
func (o OptNosqlApplianceRemarkNosqlStorage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlApplianceRemarkNosqlStorage) Reset() {
	var v NosqlApplianceRemarkNosqlStorage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlApplianceRemarkNosqlStorage) SetTo(v NosqlApplianceRemarkNosqlStorage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlApplianceRemarkNosqlStorage) Get() (v NosqlApplianceRemarkNosqlStorage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlApplianceRemarkNosqlStorage) Or(d NosqlApplianceRemarkNosqlStorage) NosqlApplianceRemarkNosqlStorage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlApplianceRemarkNosqlVirtualcore returns new OptNosqlApplianceRemarkNosqlVirtualcore with value set to v.
func NewOptNosqlApplianceRemarkNosqlVirtualcore(v NosqlApplianceRemarkNosqlVirtualcore) OptNosqlApplianceRemarkNosqlVirtualcore {
	return OptNosqlApplianceRemarkNosqlVirtualcore{
		Value: v,
		Set:   true,
	}
}

// OptNosqlApplianceRemarkNosqlVirtualcore is optional NosqlApplianceRemarkNosqlVirtualcore.
type OptNosqlApplianceRemarkNosqlVirtualcore struct {
	Value NosqlApplianceRemarkNosqlVirtualcore
	Set   bool
}

// IsSet returns true if OptNosqlApplianceRemarkNosqlVirtualcore was set.
func (o OptNosqlApplianceRemarkNosqlVirtualcore) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlApplianceRemarkNosqlVirtualcore) Reset() {
	var v NosqlApplianceRemarkNosqlVirtualcore
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlApplianceRemarkNosqlVirtualcore) SetTo(v NosqlApplianceRemarkNosqlVirtualcore) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlApplianceRemarkNosqlVirtualcore) Get() (v NosqlApplianceRemarkNosqlVirtualcore, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlApplianceRemarkNosqlVirtualcore) Or(d NosqlApplianceRemarkNosqlVirtualcore) NosqlApplianceRemarkNosqlVirtualcore {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlApplianceRemarkZone returns new OptNosqlApplianceRemarkZone with value set to v.
func NewOptNosqlApplianceRemarkZone(v NosqlApplianceRemarkZone) OptNosqlApplianceRemarkZone {
	return OptNosqlApplianceRemarkZone{
		Value: v,
		Set:   true,
	}
}

// OptNosqlApplianceRemarkZone is optional NosqlApplianceRemarkZone.
type OptNosqlApplianceRemarkZone struct {
	Value NosqlApplianceRemarkZone
	Set   bool
}

// IsSet returns true if OptNosqlApplianceRemarkZone was set.
func (o OptNosqlApplianceRemarkZone) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlApplianceRemarkZone) Reset() {
	var v NosqlApplianceRemarkZone
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlApplianceRemarkZone) SetTo(v NosqlApplianceRemarkZone) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlApplianceRemarkZone) Get() (v NosqlApplianceRemarkZone, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlApplianceRemarkZone) Or(d NosqlApplianceRemarkZone) NosqlApplianceRemarkZone {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlBackupResponseNosql returns new OptNosqlBackupResponseNosql with value set to v.
func NewOptNosqlBackupResponseNosql(v NosqlBackupResponseNosql) OptNosqlBackupResponseNosql {
	return OptNosqlBackupResponseNosql{
		Value: v,
		Set:   true,
	}
}

// OptNosqlBackupResponseNosql is optional NosqlBackupResponseNosql.
type OptNosqlBackupResponseNosql struct {
	Value NosqlBackupResponseNosql
	Set   bool
}

// IsSet returns true if OptNosqlBackupResponseNosql was set.
func (o OptNosqlBackupResponseNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlBackupResponseNosql) Reset() {
	var v NosqlBackupResponseNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlBackupResponseNosql) SetTo(v NosqlBackupResponseNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlBackupResponseNosql) Get() (v NosqlBackupResponseNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlBackupResponseNosql) Or(d NosqlBackupResponseNosql) NosqlBackupResponseNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlCreateRequestApplianceDiskEncryptionKey returns new OptNosqlCreateRequestApplianceDiskEncryptionKey with value set to v.
func NewOptNosqlCreateRequestApplianceDiskEncryptionKey(v NosqlCreateRequestApplianceDiskEncryptionKey) OptNosqlCreateRequestApplianceDiskEncryptionKey {
	return OptNosqlCreateRequestApplianceDiskEncryptionKey{
		Value: v,
		Set:   true,
	}
}

// OptNosqlCreateRequestApplianceDiskEncryptionKey is optional NosqlCreateRequestApplianceDiskEncryptionKey.
type OptNosqlCreateRequestApplianceDiskEncryptionKey struct {
	Value NosqlCreateRequestApplianceDiskEncryptionKey
	Set   bool
}

// IsSet returns true if OptNosqlCreateRequestApplianceDiskEncryptionKey was set.
func (o OptNosqlCreateRequestApplianceDiskEncryptionKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlCreateRequestApplianceDiskEncryptionKey) Reset() {
	var v NosqlCreateRequestApplianceDiskEncryptionKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlCreateRequestApplianceDiskEncryptionKey) SetTo(v NosqlCreateRequestApplianceDiskEncryptionKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlCreateRequestApplianceDiskEncryptionKey) Get() (v NosqlCreateRequestApplianceDiskEncryptionKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlCreateRequestApplianceDiskEncryptionKey) Or(d NosqlCreateRequestApplianceDiskEncryptionKey) NosqlCreateRequestApplianceDiskEncryptionKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlCreateRequestApplianceSettings returns new OptNosqlCreateRequestApplianceSettings with value set to v.
func NewOptNosqlCreateRequestApplianceSettings(v NosqlCreateRequestApplianceSettings) OptNosqlCreateRequestApplianceSettings {
	return OptNosqlCreateRequestApplianceSettings{
		Value: v,
		Set:   true,
	}
}

// OptNosqlCreateRequestApplianceSettings is optional NosqlCreateRequestApplianceSettings.
type OptNosqlCreateRequestApplianceSettings struct {
	Value NosqlCreateRequestApplianceSettings
	Set   bool
}

// IsSet returns true if OptNosqlCreateRequestApplianceSettings was set.
func (o OptNosqlCreateRequestApplianceSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlCreateRequestApplianceSettings) Reset() {
	var v NosqlCreateRequestApplianceSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlCreateRequestApplianceSettings) SetTo(v NosqlCreateRequestApplianceSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlCreateRequestApplianceSettings) Get() (v NosqlCreateRequestApplianceSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlCreateRequestApplianceSettings) Or(d NosqlCreateRequestApplianceSettings) NosqlCreateRequestApplianceSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlCreateRequestApplianceSettingsRepairFull returns new OptNosqlCreateRequestApplianceSettingsRepairFull with value set to v.
func NewOptNosqlCreateRequestApplianceSettingsRepairFull(v NosqlCreateRequestApplianceSettingsRepairFull) OptNosqlCreateRequestApplianceSettingsRepairFull {
	return OptNosqlCreateRequestApplianceSettingsRepairFull{
		Value: v,
		Set:   true,
	}
}

// OptNosqlCreateRequestApplianceSettingsRepairFull is optional NosqlCreateRequestApplianceSettingsRepairFull.
type OptNosqlCreateRequestApplianceSettingsRepairFull struct {
	Value NosqlCreateRequestApplianceSettingsRepairFull
	Set   bool
}

// IsSet returns true if OptNosqlCreateRequestApplianceSettingsRepairFull was set.
func (o OptNosqlCreateRequestApplianceSettingsRepairFull) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlCreateRequestApplianceSettingsRepairFull) Reset() {
	var v NosqlCreateRequestApplianceSettingsRepairFull
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlCreateRequestApplianceSettingsRepairFull) SetTo(v NosqlCreateRequestApplianceSettingsRepairFull) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlCreateRequestApplianceSettingsRepairFull) Get() (v NosqlCreateRequestApplianceSettingsRepairFull, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlCreateRequestApplianceSettingsRepairFull) Or(d NosqlCreateRequestApplianceSettingsRepairFull) NosqlCreateRequestApplianceSettingsRepairFull {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlCreateRequestApplianceSettingsRepairIncremental returns new OptNosqlCreateRequestApplianceSettingsRepairIncremental with value set to v.
func NewOptNosqlCreateRequestApplianceSettingsRepairIncremental(v NosqlCreateRequestApplianceSettingsRepairIncremental) OptNosqlCreateRequestApplianceSettingsRepairIncremental {
	return OptNosqlCreateRequestApplianceSettingsRepairIncremental{
		Value: v,
		Set:   true,
	}
}

// OptNosqlCreateRequestApplianceSettingsRepairIncremental is optional NosqlCreateRequestApplianceSettingsRepairIncremental.
type OptNosqlCreateRequestApplianceSettingsRepairIncremental struct {
	Value NosqlCreateRequestApplianceSettingsRepairIncremental
	Set   bool
}

// IsSet returns true if OptNosqlCreateRequestApplianceSettingsRepairIncremental was set.
func (o OptNosqlCreateRequestApplianceSettingsRepairIncremental) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlCreateRequestApplianceSettingsRepairIncremental) Reset() {
	var v NosqlCreateRequestApplianceSettingsRepairIncremental
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlCreateRequestApplianceSettingsRepairIncremental) SetTo(v NosqlCreateRequestApplianceSettingsRepairIncremental) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlCreateRequestApplianceSettingsRepairIncremental) Get() (v NosqlCreateRequestApplianceSettingsRepairIncremental, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlCreateRequestApplianceSettingsRepairIncremental) Or(d NosqlCreateRequestApplianceSettingsRepairIncremental) NosqlCreateRequestApplianceSettingsRepairIncremental {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet returns new OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet with value set to v.
func NewOptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet(v NosqlCreateRequestApplianceUserInterfacesItemUserSubnet) OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet {
	return OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet{
		Value: v,
		Set:   true,
	}
}

// OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet is optional NosqlCreateRequestApplianceUserInterfacesItemUserSubnet.
type OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet struct {
	Value NosqlCreateRequestApplianceUserInterfacesItemUserSubnet
	Set   bool
}

// IsSet returns true if OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet was set.
func (o OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet) Reset() {
	var v NosqlCreateRequestApplianceUserInterfacesItemUserSubnet
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet) SetTo(v NosqlCreateRequestApplianceUserInterfacesItemUserSubnet) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet) Get() (v NosqlCreateRequestApplianceUserInterfacesItemUserSubnet, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet) Or(d NosqlCreateRequestApplianceUserInterfacesItemUserSubnet) NosqlCreateRequestApplianceUserInterfacesItemUserSubnet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlCreateResponseAccount returns new OptNosqlCreateResponseAccount with value set to v.
func NewOptNosqlCreateResponseAccount(v NosqlCreateResponseAccount) OptNosqlCreateResponseAccount {
	return OptNosqlCreateResponseAccount{
		Value: v,
		Set:   true,
	}
}

// OptNosqlCreateResponseAccount is optional NosqlCreateResponseAccount.
type OptNosqlCreateResponseAccount struct {
	Value NosqlCreateResponseAccount
	Set   bool
}

// IsSet returns true if OptNosqlCreateResponseAccount was set.
func (o OptNosqlCreateResponseAccount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlCreateResponseAccount) Reset() {
	var v NosqlCreateResponseAccount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlCreateResponseAccount) SetTo(v NosqlCreateResponseAccount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlCreateResponseAccount) Get() (v NosqlCreateResponseAccount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlCreateResponseAccount) Or(d NosqlCreateResponseAccount) NosqlCreateResponseAccount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlCreateResponseHiddenRemark returns new OptNosqlCreateResponseHiddenRemark with value set to v.
func NewOptNosqlCreateResponseHiddenRemark(v NosqlCreateResponseHiddenRemark) OptNosqlCreateResponseHiddenRemark {
	return OptNosqlCreateResponseHiddenRemark{
		Value: v,
		Set:   true,
	}
}

// OptNosqlCreateResponseHiddenRemark is optional NosqlCreateResponseHiddenRemark.
type OptNosqlCreateResponseHiddenRemark struct {
	Value NosqlCreateResponseHiddenRemark
	Set   bool
}

// IsSet returns true if OptNosqlCreateResponseHiddenRemark was set.
func (o OptNosqlCreateResponseHiddenRemark) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlCreateResponseHiddenRemark) Reset() {
	var v NosqlCreateResponseHiddenRemark
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlCreateResponseHiddenRemark) SetTo(v NosqlCreateResponseHiddenRemark) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlCreateResponseHiddenRemark) Get() (v NosqlCreateResponseHiddenRemark, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlCreateResponseHiddenRemark) Or(d NosqlCreateResponseHiddenRemark) NosqlCreateResponseHiddenRemark {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlCreateResponseHiddenRemarkEncrypted returns new OptNosqlCreateResponseHiddenRemarkEncrypted with value set to v.
func NewOptNosqlCreateResponseHiddenRemarkEncrypted(v NosqlCreateResponseHiddenRemarkEncrypted) OptNosqlCreateResponseHiddenRemarkEncrypted {
	return OptNosqlCreateResponseHiddenRemarkEncrypted{
		Value: v,
		Set:   true,
	}
}

// OptNosqlCreateResponseHiddenRemarkEncrypted is optional NosqlCreateResponseHiddenRemarkEncrypted.
type OptNosqlCreateResponseHiddenRemarkEncrypted struct {
	Value NosqlCreateResponseHiddenRemarkEncrypted
	Set   bool
}

// IsSet returns true if OptNosqlCreateResponseHiddenRemarkEncrypted was set.
func (o OptNosqlCreateResponseHiddenRemarkEncrypted) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlCreateResponseHiddenRemarkEncrypted) Reset() {
	var v NosqlCreateResponseHiddenRemarkEncrypted
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlCreateResponseHiddenRemarkEncrypted) SetTo(v NosqlCreateResponseHiddenRemarkEncrypted) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlCreateResponseHiddenRemarkEncrypted) Get() (v NosqlCreateResponseHiddenRemarkEncrypted, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlCreateResponseHiddenRemarkEncrypted) Or(d NosqlCreateResponseHiddenRemarkEncrypted) NosqlCreateResponseHiddenRemarkEncrypted {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlCreateResponseHiddenRemarkPlanSpec returns new OptNosqlCreateResponseHiddenRemarkPlanSpec with value set to v.
func NewOptNosqlCreateResponseHiddenRemarkPlanSpec(v NosqlCreateResponseHiddenRemarkPlanSpec) OptNosqlCreateResponseHiddenRemarkPlanSpec {
	return OptNosqlCreateResponseHiddenRemarkPlanSpec{
		Value: v,
		Set:   true,
	}
}

// OptNosqlCreateResponseHiddenRemarkPlanSpec is optional NosqlCreateResponseHiddenRemarkPlanSpec.
type OptNosqlCreateResponseHiddenRemarkPlanSpec struct {
	Value NosqlCreateResponseHiddenRemarkPlanSpec
	Set   bool
}

// IsSet returns true if OptNosqlCreateResponseHiddenRemarkPlanSpec was set.
func (o OptNosqlCreateResponseHiddenRemarkPlanSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlCreateResponseHiddenRemarkPlanSpec) Reset() {
	var v NosqlCreateResponseHiddenRemarkPlanSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlCreateResponseHiddenRemarkPlanSpec) SetTo(v NosqlCreateResponseHiddenRemarkPlanSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlCreateResponseHiddenRemarkPlanSpec) Get() (v NosqlCreateResponseHiddenRemarkPlanSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlCreateResponseHiddenRemarkPlanSpec) Or(d NosqlCreateResponseHiddenRemarkPlanSpec) NosqlCreateResponseHiddenRemarkPlanSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlCreateResponseHiddenRemarkPlanSpecNote returns new OptNosqlCreateResponseHiddenRemarkPlanSpecNote with value set to v.
func NewOptNosqlCreateResponseHiddenRemarkPlanSpecNote(v NosqlCreateResponseHiddenRemarkPlanSpecNote) OptNosqlCreateResponseHiddenRemarkPlanSpecNote {
	return OptNosqlCreateResponseHiddenRemarkPlanSpecNote{
		Value: v,
		Set:   true,
	}
}

// OptNosqlCreateResponseHiddenRemarkPlanSpecNote is optional NosqlCreateResponseHiddenRemarkPlanSpecNote.
type OptNosqlCreateResponseHiddenRemarkPlanSpecNote struct {
	Value NosqlCreateResponseHiddenRemarkPlanSpecNote
	Set   bool
}

// IsSet returns true if OptNosqlCreateResponseHiddenRemarkPlanSpecNote was set.
func (o OptNosqlCreateResponseHiddenRemarkPlanSpecNote) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlCreateResponseHiddenRemarkPlanSpecNote) Reset() {
	var v NosqlCreateResponseHiddenRemarkPlanSpecNote
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlCreateResponseHiddenRemarkPlanSpecNote) SetTo(v NosqlCreateResponseHiddenRemarkPlanSpecNote) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlCreateResponseHiddenRemarkPlanSpecNote) Get() (v NosqlCreateResponseHiddenRemarkPlanSpecNote, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlCreateResponseHiddenRemarkPlanSpecNote) Or(d NosqlCreateResponseHiddenRemarkPlanSpecNote) NosqlCreateResponseHiddenRemarkPlanSpecNote {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlGetVersionResponseNosql returns new OptNosqlGetVersionResponseNosql with value set to v.
func NewOptNosqlGetVersionResponseNosql(v NosqlGetVersionResponseNosql) OptNosqlGetVersionResponseNosql {
	return OptNosqlGetVersionResponseNosql{
		Value: v,
		Set:   true,
	}
}

// OptNosqlGetVersionResponseNosql is optional NosqlGetVersionResponseNosql.
type OptNosqlGetVersionResponseNosql struct {
	Value NosqlGetVersionResponseNosql
	Set   bool
}

// IsSet returns true if OptNosqlGetVersionResponseNosql was set.
func (o OptNosqlGetVersionResponseNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlGetVersionResponseNosql) Reset() {
	var v NosqlGetVersionResponseNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlGetVersionResponseNosql) SetTo(v NosqlGetVersionResponseNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlGetVersionResponseNosql) Get() (v NosqlGetVersionResponseNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlGetVersionResponseNosql) Or(d NosqlGetVersionResponseNosql) NosqlGetVersionResponseNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlIsOkResponseNosql returns new OptNosqlIsOkResponseNosql with value set to v.
func NewOptNosqlIsOkResponseNosql(v NosqlIsOkResponseNosql) OptNosqlIsOkResponseNosql {
	return OptNosqlIsOkResponseNosql{
		Value: v,
		Set:   true,
	}
}

// OptNosqlIsOkResponseNosql is optional NosqlIsOkResponseNosql.
type OptNosqlIsOkResponseNosql struct {
	Value NosqlIsOkResponseNosql
	Set   bool
}

// IsSet returns true if OptNosqlIsOkResponseNosql was set.
func (o OptNosqlIsOkResponseNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlIsOkResponseNosql) Reset() {
	var v NosqlIsOkResponseNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlIsOkResponseNosql) SetTo(v NosqlIsOkResponseNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlIsOkResponseNosql) Get() (v NosqlIsOkResponseNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlIsOkResponseNosql) Or(d NosqlIsOkResponseNosql) NosqlIsOkResponseNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlNodeAppliance returns new OptNosqlNodeAppliance with value set to v.
func NewOptNosqlNodeAppliance(v NosqlNodeAppliance) OptNosqlNodeAppliance {
	return OptNosqlNodeAppliance{
		Value: v,
		Set:   true,
	}
}

// OptNosqlNodeAppliance is optional NosqlNodeAppliance.
type OptNosqlNodeAppliance struct {
	Value NosqlNodeAppliance
	Set   bool
}

// IsSet returns true if OptNosqlNodeAppliance was set.
func (o OptNosqlNodeAppliance) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlNodeAppliance) Reset() {
	var v NosqlNodeAppliance
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlNodeAppliance) SetTo(v NosqlNodeAppliance) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlNodeAppliance) Get() (v NosqlNodeAppliance, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlNodeAppliance) Or(d NosqlNodeAppliance) NosqlNodeAppliance {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlNodeApplianceZone returns new OptNosqlNodeApplianceZone with value set to v.
func NewOptNosqlNodeApplianceZone(v NosqlNodeApplianceZone) OptNosqlNodeApplianceZone {
	return OptNosqlNodeApplianceZone{
		Value: v,
		Set:   true,
	}
}

// OptNosqlNodeApplianceZone is optional NosqlNodeApplianceZone.
type OptNosqlNodeApplianceZone struct {
	Value NosqlNodeApplianceZone
	Set   bool
}

// IsSet returns true if OptNosqlNodeApplianceZone was set.
func (o OptNosqlNodeApplianceZone) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlNodeApplianceZone) Reset() {
	var v NosqlNodeApplianceZone
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlNodeApplianceZone) SetTo(v NosqlNodeApplianceZone) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlNodeApplianceZone) Get() (v NosqlNodeApplianceZone, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlNodeApplianceZone) Or(d NosqlNodeApplianceZone) NosqlNodeApplianceZone {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlOkResponseNosql returns new OptNosqlOkResponseNosql with value set to v.
func NewOptNosqlOkResponseNosql(v NosqlOkResponseNosql) OptNosqlOkResponseNosql {
	return OptNosqlOkResponseNosql{
		Value: v,
		Set:   true,
	}
}

// OptNosqlOkResponseNosql is optional NosqlOkResponseNosql.
type OptNosqlOkResponseNosql struct {
	Value NosqlOkResponseNosql
	Set   bool
}

// IsSet returns true if OptNosqlOkResponseNosql was set.
func (o OptNosqlOkResponseNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlOkResponseNosql) Reset() {
	var v NosqlOkResponseNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlOkResponseNosql) SetTo(v NosqlOkResponseNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlOkResponseNosql) Get() (v NosqlOkResponseNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlOkResponseNosql) Or(d NosqlOkResponseNosql) NosqlOkResponseNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlRemark returns new OptNosqlRemark with value set to v.
func NewOptNosqlRemark(v NosqlRemark) OptNosqlRemark {
	return OptNosqlRemark{
		Value: v,
		Set:   true,
	}
}

// OptNosqlRemark is optional NosqlRemark.
type OptNosqlRemark struct {
	Value NosqlRemark
	Set   bool
}

// IsSet returns true if OptNosqlRemark was set.
func (o OptNosqlRemark) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlRemark) Reset() {
	var v NosqlRemark
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlRemark) SetTo(v NosqlRemark) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlRemark) Get() (v NosqlRemark, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlRemark) Or(d NosqlRemark) NosqlRemark {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlRemarkNosqlDatabaseEngine returns new OptNosqlRemarkNosqlDatabaseEngine with value set to v.
func NewOptNosqlRemarkNosqlDatabaseEngine(v NosqlRemarkNosqlDatabaseEngine) OptNosqlRemarkNosqlDatabaseEngine {
	return OptNosqlRemarkNosqlDatabaseEngine{
		Value: v,
		Set:   true,
	}
}

// OptNosqlRemarkNosqlDatabaseEngine is optional NosqlRemarkNosqlDatabaseEngine.
type OptNosqlRemarkNosqlDatabaseEngine struct {
	Value NosqlRemarkNosqlDatabaseEngine
	Set   bool
}

// IsSet returns true if OptNosqlRemarkNosqlDatabaseEngine was set.
func (o OptNosqlRemarkNosqlDatabaseEngine) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlRemarkNosqlDatabaseEngine) Reset() {
	var v NosqlRemarkNosqlDatabaseEngine
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlRemarkNosqlDatabaseEngine) SetTo(v NosqlRemarkNosqlDatabaseEngine) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlRemarkNosqlDatabaseEngine) Get() (v NosqlRemarkNosqlDatabaseEngine, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlRemarkNosqlDatabaseEngine) Or(d NosqlRemarkNosqlDatabaseEngine) NosqlRemarkNosqlDatabaseEngine {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlRemarkNosqlDiskSize returns new OptNosqlRemarkNosqlDiskSize with value set to v.
func NewOptNosqlRemarkNosqlDiskSize(v NosqlRemarkNosqlDiskSize) OptNosqlRemarkNosqlDiskSize {
	return OptNosqlRemarkNosqlDiskSize{
		Value: v,
		Set:   true,
	}
}

// OptNosqlRemarkNosqlDiskSize is optional NosqlRemarkNosqlDiskSize.
type OptNosqlRemarkNosqlDiskSize struct {
	Value NosqlRemarkNosqlDiskSize
	Set   bool
}

// IsSet returns true if OptNosqlRemarkNosqlDiskSize was set.
func (o OptNosqlRemarkNosqlDiskSize) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlRemarkNosqlDiskSize) Reset() {
	var v NosqlRemarkNosqlDiskSize
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlRemarkNosqlDiskSize) SetTo(v NosqlRemarkNosqlDiskSize) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlRemarkNosqlDiskSize) Get() (v NosqlRemarkNosqlDiskSize, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlRemarkNosqlDiskSize) Or(d NosqlRemarkNosqlDiskSize) NosqlRemarkNosqlDiskSize {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlRemarkNosqlMemory returns new OptNosqlRemarkNosqlMemory with value set to v.
func NewOptNosqlRemarkNosqlMemory(v NosqlRemarkNosqlMemory) OptNosqlRemarkNosqlMemory {
	return OptNosqlRemarkNosqlMemory{
		Value: v,
		Set:   true,
	}
}

// OptNosqlRemarkNosqlMemory is optional NosqlRemarkNosqlMemory.
type OptNosqlRemarkNosqlMemory struct {
	Value NosqlRemarkNosqlMemory
	Set   bool
}

// IsSet returns true if OptNosqlRemarkNosqlMemory was set.
func (o OptNosqlRemarkNosqlMemory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlRemarkNosqlMemory) Reset() {
	var v NosqlRemarkNosqlMemory
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlRemarkNosqlMemory) SetTo(v NosqlRemarkNosqlMemory) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlRemarkNosqlMemory) Get() (v NosqlRemarkNosqlMemory, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlRemarkNosqlMemory) Or(d NosqlRemarkNosqlMemory) NosqlRemarkNosqlMemory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlRemarkNosqlPrimaryNodes returns new OptNosqlRemarkNosqlPrimaryNodes with value set to v.
func NewOptNosqlRemarkNosqlPrimaryNodes(v NosqlRemarkNosqlPrimaryNodes) OptNosqlRemarkNosqlPrimaryNodes {
	return OptNosqlRemarkNosqlPrimaryNodes{
		Value: v,
		Set:   true,
	}
}

// OptNosqlRemarkNosqlPrimaryNodes is optional NosqlRemarkNosqlPrimaryNodes.
type OptNosqlRemarkNosqlPrimaryNodes struct {
	Value NosqlRemarkNosqlPrimaryNodes
	Set   bool
}

// IsSet returns true if OptNosqlRemarkNosqlPrimaryNodes was set.
func (o OptNosqlRemarkNosqlPrimaryNodes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlRemarkNosqlPrimaryNodes) Reset() {
	var v NosqlRemarkNosqlPrimaryNodes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlRemarkNosqlPrimaryNodes) SetTo(v NosqlRemarkNosqlPrimaryNodes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlRemarkNosqlPrimaryNodes) Get() (v NosqlRemarkNosqlPrimaryNodes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlRemarkNosqlPrimaryNodes) Or(d NosqlRemarkNosqlPrimaryNodes) NosqlRemarkNosqlPrimaryNodes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlRemarkNosqlStorage returns new OptNosqlRemarkNosqlStorage with value set to v.
func NewOptNosqlRemarkNosqlStorage(v NosqlRemarkNosqlStorage) OptNosqlRemarkNosqlStorage {
	return OptNosqlRemarkNosqlStorage{
		Value: v,
		Set:   true,
	}
}

// OptNosqlRemarkNosqlStorage is optional NosqlRemarkNosqlStorage.
type OptNosqlRemarkNosqlStorage struct {
	Value NosqlRemarkNosqlStorage
	Set   bool
}

// IsSet returns true if OptNosqlRemarkNosqlStorage was set.
func (o OptNosqlRemarkNosqlStorage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlRemarkNosqlStorage) Reset() {
	var v NosqlRemarkNosqlStorage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlRemarkNosqlStorage) SetTo(v NosqlRemarkNosqlStorage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlRemarkNosqlStorage) Get() (v NosqlRemarkNosqlStorage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlRemarkNosqlStorage) Or(d NosqlRemarkNosqlStorage) NosqlRemarkNosqlStorage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlRemarkNosqlVirtualcore returns new OptNosqlRemarkNosqlVirtualcore with value set to v.
func NewOptNosqlRemarkNosqlVirtualcore(v NosqlRemarkNosqlVirtualcore) OptNosqlRemarkNosqlVirtualcore {
	return OptNosqlRemarkNosqlVirtualcore{
		Value: v,
		Set:   true,
	}
}

// OptNosqlRemarkNosqlVirtualcore is optional NosqlRemarkNosqlVirtualcore.
type OptNosqlRemarkNosqlVirtualcore struct {
	Value NosqlRemarkNosqlVirtualcore
	Set   bool
}

// IsSet returns true if OptNosqlRemarkNosqlVirtualcore was set.
func (o OptNosqlRemarkNosqlVirtualcore) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlRemarkNosqlVirtualcore) Reset() {
	var v NosqlRemarkNosqlVirtualcore
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlRemarkNosqlVirtualcore) SetTo(v NosqlRemarkNosqlVirtualcore) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlRemarkNosqlVirtualcore) Get() (v NosqlRemarkNosqlVirtualcore, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlRemarkNosqlVirtualcore) Or(d NosqlRemarkNosqlVirtualcore) NosqlRemarkNosqlVirtualcore {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlRepairRequestNosql returns new OptNosqlRepairRequestNosql with value set to v.
func NewOptNosqlRepairRequestNosql(v NosqlRepairRequestNosql) OptNosqlRepairRequestNosql {
	return OptNosqlRepairRequestNosql{
		Value: v,
		Set:   true,
	}
}

// OptNosqlRepairRequestNosql is optional NosqlRepairRequestNosql.
type OptNosqlRepairRequestNosql struct {
	Value NosqlRepairRequestNosql
	Set   bool
}

// IsSet returns true if OptNosqlRepairRequestNosql was set.
func (o OptNosqlRepairRequestNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlRepairRequestNosql) Reset() {
	var v NosqlRepairRequestNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlRepairRequestNosql) SetTo(v NosqlRepairRequestNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlRepairRequestNosql) Get() (v NosqlRepairRequestNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlRepairRequestNosql) Or(d NosqlRepairRequestNosql) NosqlRepairRequestNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlRepairRequestNosqlRepairType returns new OptNosqlRepairRequestNosqlRepairType with value set to v.
func NewOptNosqlRepairRequestNosqlRepairType(v NosqlRepairRequestNosqlRepairType) OptNosqlRepairRequestNosqlRepairType {
	return OptNosqlRepairRequestNosqlRepairType{
		Value: v,
		Set:   true,
	}
}

// OptNosqlRepairRequestNosqlRepairType is optional NosqlRepairRequestNosqlRepairType.
type OptNosqlRepairRequestNosqlRepairType struct {
	Value NosqlRepairRequestNosqlRepairType
	Set   bool
}

// IsSet returns true if OptNosqlRepairRequestNosqlRepairType was set.
func (o OptNosqlRepairRequestNosqlRepairType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlRepairRequestNosqlRepairType) Reset() {
	var v NosqlRepairRequestNosqlRepairType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlRepairRequestNosqlRepairType) SetTo(v NosqlRepairRequestNosqlRepairType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlRepairRequestNosqlRepairType) Get() (v NosqlRepairRequestNosqlRepairType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlRepairRequestNosqlRepairType) Or(d NosqlRepairRequestNosqlRepairType) NosqlRepairRequestNosqlRepairType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlSettings returns new OptNosqlSettings with value set to v.
func NewOptNosqlSettings(v NosqlSettings) OptNosqlSettings {
	return OptNosqlSettings{
		Value: v,
		Set:   true,
	}
}

// OptNosqlSettings is optional NosqlSettings.
type OptNosqlSettings struct {
	Value NosqlSettings
	Set   bool
}

// IsSet returns true if OptNosqlSettings was set.
func (o OptNosqlSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlSettings) Reset() {
	var v NosqlSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlSettings) SetTo(v NosqlSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlSettings) Get() (v NosqlSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlSettings) Or(d NosqlSettings) NosqlSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlSettingsRepairFull returns new OptNosqlSettingsRepairFull with value set to v.
func NewOptNosqlSettingsRepairFull(v NosqlSettingsRepairFull) OptNosqlSettingsRepairFull {
	return OptNosqlSettingsRepairFull{
		Value: v,
		Set:   true,
	}
}

// OptNosqlSettingsRepairFull is optional NosqlSettingsRepairFull.
type OptNosqlSettingsRepairFull struct {
	Value NosqlSettingsRepairFull
	Set   bool
}

// IsSet returns true if OptNosqlSettingsRepairFull was set.
func (o OptNosqlSettingsRepairFull) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlSettingsRepairFull) Reset() {
	var v NosqlSettingsRepairFull
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlSettingsRepairFull) SetTo(v NosqlSettingsRepairFull) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlSettingsRepairFull) Get() (v NosqlSettingsRepairFull, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlSettingsRepairFull) Or(d NosqlSettingsRepairFull) NosqlSettingsRepairFull {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlSettingsRepairIncremental returns new OptNosqlSettingsRepairIncremental with value set to v.
func NewOptNosqlSettingsRepairIncremental(v NosqlSettingsRepairIncremental) OptNosqlSettingsRepairIncremental {
	return OptNosqlSettingsRepairIncremental{
		Value: v,
		Set:   true,
	}
}

// OptNosqlSettingsRepairIncremental is optional NosqlSettingsRepairIncremental.
type OptNosqlSettingsRepairIncremental struct {
	Value NosqlSettingsRepairIncremental
	Set   bool
}

// IsSet returns true if OptNosqlSettingsRepairIncremental was set.
func (o OptNosqlSettingsRepairIncremental) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlSettingsRepairIncremental) Reset() {
	var v NosqlSettingsRepairIncremental
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlSettingsRepairIncremental) SetTo(v NosqlSettingsRepairIncremental) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlSettingsRepairIncremental) Get() (v NosqlSettingsRepairIncremental, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlSettingsRepairIncremental) Or(d NosqlSettingsRepairIncremental) NosqlSettingsRepairIncremental {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlStatusResponseAppliance returns new OptNosqlStatusResponseAppliance with value set to v.
func NewOptNosqlStatusResponseAppliance(v NosqlStatusResponseAppliance) OptNosqlStatusResponseAppliance {
	return OptNosqlStatusResponseAppliance{
		Value: v,
		Set:   true,
	}
}

// OptNosqlStatusResponseAppliance is optional NosqlStatusResponseAppliance.
type OptNosqlStatusResponseAppliance struct {
	Value NosqlStatusResponseAppliance
	Set   bool
}

// IsSet returns true if OptNosqlStatusResponseAppliance was set.
func (o OptNosqlStatusResponseAppliance) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlStatusResponseAppliance) Reset() {
	var v NosqlStatusResponseAppliance
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlStatusResponseAppliance) SetTo(v NosqlStatusResponseAppliance) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlStatusResponseAppliance) Get() (v NosqlStatusResponseAppliance, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlStatusResponseAppliance) Or(d NosqlStatusResponseAppliance) NosqlStatusResponseAppliance {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlStatusResponseApplianceSettingsResponse returns new OptNosqlStatusResponseApplianceSettingsResponse with value set to v.
func NewOptNosqlStatusResponseApplianceSettingsResponse(v NosqlStatusResponseApplianceSettingsResponse) OptNosqlStatusResponseApplianceSettingsResponse {
	return OptNosqlStatusResponseApplianceSettingsResponse{
		Value: v,
		Set:   true,
	}
}

// OptNosqlStatusResponseApplianceSettingsResponse is optional NosqlStatusResponseApplianceSettingsResponse.
type OptNosqlStatusResponseApplianceSettingsResponse struct {
	Value NosqlStatusResponseApplianceSettingsResponse
	Set   bool
}

// IsSet returns true if OptNosqlStatusResponseApplianceSettingsResponse was set.
func (o OptNosqlStatusResponseApplianceSettingsResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlStatusResponseApplianceSettingsResponse) Reset() {
	var v NosqlStatusResponseApplianceSettingsResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlStatusResponseApplianceSettingsResponse) SetTo(v NosqlStatusResponseApplianceSettingsResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlStatusResponseApplianceSettingsResponse) Get() (v NosqlStatusResponseApplianceSettingsResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlStatusResponseApplianceSettingsResponse) Or(d NosqlStatusResponseApplianceSettingsResponse) NosqlStatusResponseApplianceSettingsResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlStatusResponseApplianceSettingsResponseNosql returns new OptNosqlStatusResponseApplianceSettingsResponseNosql with value set to v.
func NewOptNosqlStatusResponseApplianceSettingsResponseNosql(v NosqlStatusResponseApplianceSettingsResponseNosql) OptNosqlStatusResponseApplianceSettingsResponseNosql {
	return OptNosqlStatusResponseApplianceSettingsResponseNosql{
		Value: v,
		Set:   true,
	}
}

// OptNosqlStatusResponseApplianceSettingsResponseNosql is optional NosqlStatusResponseApplianceSettingsResponseNosql.
type OptNosqlStatusResponseApplianceSettingsResponseNosql struct {
	Value NosqlStatusResponseApplianceSettingsResponseNosql
	Set   bool
}

// IsSet returns true if OptNosqlStatusResponseApplianceSettingsResponseNosql was set.
func (o OptNosqlStatusResponseApplianceSettingsResponseNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlStatusResponseApplianceSettingsResponseNosql) Reset() {
	var v NosqlStatusResponseApplianceSettingsResponseNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlStatusResponseApplianceSettingsResponseNosql) SetTo(v NosqlStatusResponseApplianceSettingsResponseNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlStatusResponseApplianceSettingsResponseNosql) Get() (v NosqlStatusResponseApplianceSettingsResponseNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlStatusResponseApplianceSettingsResponseNosql) Or(d NosqlStatusResponseApplianceSettingsResponseNosql) NosqlStatusResponseApplianceSettingsResponseNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes returns new OptNosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes with value set to v.
func NewOptNosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes(v NosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes) OptNosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes {
	return OptNosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes{
		Value: v,
		Set:   true,
	}
}

// OptNosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes is optional NosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes.
type OptNosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes struct {
	Value NosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes
	Set   bool
}

// IsSet returns true if OptNosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes was set.
func (o OptNosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes) Reset() {
	var v NosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes) SetTo(v NosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes) Get() (v NosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes) Or(d NosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes) NosqlStatusResponseApplianceSettingsResponseNosqlPrimaryNodes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlUpdateRequestApplianceSettingsRepairFull returns new OptNosqlUpdateRequestApplianceSettingsRepairFull with value set to v.
func NewOptNosqlUpdateRequestApplianceSettingsRepairFull(v NosqlUpdateRequestApplianceSettingsRepairFull) OptNosqlUpdateRequestApplianceSettingsRepairFull {
	return OptNosqlUpdateRequestApplianceSettingsRepairFull{
		Value: v,
		Set:   true,
	}
}

// OptNosqlUpdateRequestApplianceSettingsRepairFull is optional NosqlUpdateRequestApplianceSettingsRepairFull.
type OptNosqlUpdateRequestApplianceSettingsRepairFull struct {
	Value NosqlUpdateRequestApplianceSettingsRepairFull
	Set   bool
}

// IsSet returns true if OptNosqlUpdateRequestApplianceSettingsRepairFull was set.
func (o OptNosqlUpdateRequestApplianceSettingsRepairFull) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlUpdateRequestApplianceSettingsRepairFull) Reset() {
	var v NosqlUpdateRequestApplianceSettingsRepairFull
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlUpdateRequestApplianceSettingsRepairFull) SetTo(v NosqlUpdateRequestApplianceSettingsRepairFull) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlUpdateRequestApplianceSettingsRepairFull) Get() (v NosqlUpdateRequestApplianceSettingsRepairFull, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlUpdateRequestApplianceSettingsRepairFull) Or(d NosqlUpdateRequestApplianceSettingsRepairFull) NosqlUpdateRequestApplianceSettingsRepairFull {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlUpdateRequestApplianceSettingsRepairIncremental returns new OptNosqlUpdateRequestApplianceSettingsRepairIncremental with value set to v.
func NewOptNosqlUpdateRequestApplianceSettingsRepairIncremental(v NosqlUpdateRequestApplianceSettingsRepairIncremental) OptNosqlUpdateRequestApplianceSettingsRepairIncremental {
	return OptNosqlUpdateRequestApplianceSettingsRepairIncremental{
		Value: v,
		Set:   true,
	}
}

// OptNosqlUpdateRequestApplianceSettingsRepairIncremental is optional NosqlUpdateRequestApplianceSettingsRepairIncremental.
type OptNosqlUpdateRequestApplianceSettingsRepairIncremental struct {
	Value NosqlUpdateRequestApplianceSettingsRepairIncremental
	Set   bool
}

// IsSet returns true if OptNosqlUpdateRequestApplianceSettingsRepairIncremental was set.
func (o OptNosqlUpdateRequestApplianceSettingsRepairIncremental) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlUpdateRequestApplianceSettingsRepairIncremental) Reset() {
	var v NosqlUpdateRequestApplianceSettingsRepairIncremental
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlUpdateRequestApplianceSettingsRepairIncremental) SetTo(v NosqlUpdateRequestApplianceSettingsRepairIncremental) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlUpdateRequestApplianceSettingsRepairIncremental) Get() (v NosqlUpdateRequestApplianceSettingsRepairIncremental, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlUpdateRequestApplianceSettingsRepairIncremental) Or(d NosqlUpdateRequestApplianceSettingsRepairIncremental) NosqlUpdateRequestApplianceSettingsRepairIncremental {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlVersion returns new OptNosqlVersion with value set to v.
func NewOptNosqlVersion(v NosqlVersion) OptNosqlVersion {
	return OptNosqlVersion{
		Value: v,
		Set:   true,
	}
}

// OptNosqlVersion is optional NosqlVersion.
type OptNosqlVersion struct {
	Value NosqlVersion
	Set   bool
}

// IsSet returns true if OptNosqlVersion was set.
func (o OptNosqlVersion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlVersion) Reset() {
	var v NosqlVersion
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlVersion) SetTo(v NosqlVersion) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlVersion) Get() (v NosqlVersion, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlVersion) Or(d NosqlVersion) NosqlVersion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqldbNodeStatusNodeType returns new OptNosqldbNodeStatusNodeType with value set to v.
func NewOptNosqldbNodeStatusNodeType(v NosqldbNodeStatusNodeType) OptNosqldbNodeStatusNodeType {
	return OptNosqldbNodeStatusNodeType{
		Value: v,
		Set:   true,
	}
}

// OptNosqldbNodeStatusNodeType is optional NosqldbNodeStatusNodeType.
type OptNosqldbNodeStatusNodeType struct {
	Value NosqldbNodeStatusNodeType
	Set   bool
}

// IsSet returns true if OptNosqldbNodeStatusNodeType was set.
func (o OptNosqldbNodeStatusNodeType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqldbNodeStatusNodeType) Reset() {
	var v NosqldbNodeStatusNodeType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqldbNodeStatusNodeType) SetTo(v NosqldbNodeStatusNodeType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqldbNodeStatusNodeType) Get() (v NosqldbNodeStatusNodeType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqldbNodeStatusNodeType) Or(d NosqldbNodeStatusNodeType) NosqldbNodeStatusNodeType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPassword returns new OptPassword with value set to v.
func NewOptPassword(v Password) OptPassword {
	return OptPassword{
		Value: v,
		Set:   true,
	}
}

// OptPassword is optional Password.
type OptPassword struct {
	Value Password
	Set   bool
}

// IsSet returns true if OptPassword was set.
func (o OptPassword) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPassword) Reset() {
	var v Password
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPassword) SetTo(v Password) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPassword) Get() (v Password, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPassword) Or(d Password) Password {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlan returns new OptPlan with value set to v.
func NewOptPlan(v Plan) OptPlan {
	return OptPlan{
		Value: v,
		Set:   true,
	}
}

// OptPlan is optional Plan.
type OptPlan struct {
	Value Plan
	Set   bool
}

// IsSet returns true if OptPlan was set.
func (o OptPlan) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlan) Reset() {
	var v Plan
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlan) SetTo(v Plan) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlan) Get() (v Plan, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlan) Or(d Plan) Plan {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPutParameterResponseNosql returns new OptPutParameterResponseNosql with value set to v.
func NewOptPutParameterResponseNosql(v PutParameterResponseNosql) OptPutParameterResponseNosql {
	return OptPutParameterResponseNosql{
		Value: v,
		Set:   true,
	}
}

// OptPutParameterResponseNosql is optional PutParameterResponseNosql.
type OptPutParameterResponseNosql struct {
	Value PutParameterResponseNosql
	Set   bool
}

// IsSet returns true if OptPutParameterResponseNosql was set.
func (o OptPutParameterResponseNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPutParameterResponseNosql) Reset() {
	var v PutParameterResponseNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPutParameterResponseNosql) SetTo(v PutParameterResponseNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPutParameterResponseNosql) Get() (v PutParameterResponseNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPutParameterResponseNosql) Or(d PutParameterResponseNosql) PutParameterResponseNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServiceClass returns new OptServiceClass with value set to v.
func NewOptServiceClass(v ServiceClass) OptServiceClass {
	return OptServiceClass{
		Value: v,
		Set:   true,
	}
}

// OptServiceClass is optional ServiceClass.
type OptServiceClass struct {
	Value ServiceClass
	Set   bool
}

// IsSet returns true if OptServiceClass was set.
func (o OptServiceClass) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServiceClass) Reset() {
	var v ServiceClass
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServiceClass) SetTo(v ServiceClass) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServiceClass) Get() (v ServiceClass, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServiceClass) Or(d ServiceClass) ServiceClass {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSuccess returns new OptSuccess with value set to v.
func NewOptSuccess(v Success) OptSuccess {
	return OptSuccess{
		Value: v,
		Set:   true,
	}
}

// OptSuccess is optional Success.
type OptSuccess struct {
	Value Success
	Set   bool
}

// IsSet returns true if OptSuccess was set.
func (o OptSuccess) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSuccess) Reset() {
	var v Success
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSuccess) SetTo(v Success) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSuccess) Get() (v Success, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSuccess) Or(d Success) Success {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type Password string

// プラン
// **新規作成時・ノード追加時必須**.
// Ref: #/components/schemas/Plan
type Plan struct {
	// プランID
	// **新規作成時・ノード追加時必須**.
	ID OptInt `json:"ID"`
}

// GetID returns the value of ID.
func (s *Plan) GetID() OptInt {
	return s.ID
}

// SetID sets the value of ID.
func (s *Plan) SetID(val OptInt) {
	s.ID = val
}

// Ref: #/components/schemas/PutParameterRequest
type PutParameterRequest struct {
	Nosql PutParameterRequestNosql `json:"nosql"`
}

// GetNosql returns the value of Nosql.
func (s *PutParameterRequest) GetNosql() PutParameterRequestNosql {
	return s.Nosql
}

// SetNosql sets the value of Nosql.
func (s *PutParameterRequest) SetNosql(val PutParameterRequestNosql) {
	s.Nosql = val
}

type PutParameterRequestNosql struct {
	Parameters []NosqlPutParameter `json:"parameters"`
}

// GetParameters returns the value of Parameters.
func (s *PutParameterRequestNosql) GetParameters() []NosqlPutParameter {
	return s.Parameters
}

// SetParameters sets the value of Parameters.
func (s *PutParameterRequestNosql) SetParameters(val []NosqlPutParameter) {
	s.Parameters = val
}

// Ref: #/components/schemas/PutParameterResponse
type PutParameterResponse struct {
	Nosql OptPutParameterResponseNosql `json:"nosql"`
	IsOk  OptIsOk                      `json:"is_ok"`
}

// GetNosql returns the value of Nosql.
func (s *PutParameterResponse) GetNosql() OptPutParameterResponseNosql {
	return s.Nosql
}

// GetIsOk returns the value of IsOk.
func (s *PutParameterResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetNosql sets the value of Nosql.
func (s *PutParameterResponse) SetNosql(val OptPutParameterResponseNosql) {
	s.Nosql = val
}

// SetIsOk sets the value of IsOk.
func (s *PutParameterResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*PutParameterResponse) putParameterRes() {}

type PutParameterResponseNosql struct {
	Parameters []NosqlPutParameter `json:"parameters"`
}

// GetParameters returns the value of Parameters.
func (s *PutParameterResponseNosql) GetParameters() []NosqlPutParameter {
	return s.Parameters
}

// SetParameters sets the value of Parameters.
func (s *PutParameterResponseNosql) SetParameters(val []NosqlPutParameter) {
	s.Parameters = val
}

type RecoverNoSQLNodeAccepted SuccessResponse

func (*RecoverNoSQLNodeAccepted) recoverNoSQLNodeRes() {}

type RecoverNoSQLNodeOK SuccessResponse

func (*RecoverNoSQLNodeOK) recoverNoSQLNodeRes() {}

// エラーレスポンス.
type ServerErrorResponse struct {
	// エラーのレスポンス(true:エラー).
	IsFatal OptBool `json:"is_fatal"`
	// 追跡コード.
	Serial OptString `json:"serial"`
	// ステータス.
	Status OptString `json:"status"`
	// エラーコード.
	ErrorCode OptString `json:"error_code"`
	// エラーメッセージ.
	ErrorMsg OptString `json:"error_msg"`
}

// GetIsFatal returns the value of IsFatal.
func (s *ServerErrorResponse) GetIsFatal() OptBool {
	return s.IsFatal
}

// GetSerial returns the value of Serial.
func (s *ServerErrorResponse) GetSerial() OptString {
	return s.Serial
}

// GetStatus returns the value of Status.
func (s *ServerErrorResponse) GetStatus() OptString {
	return s.Status
}

// GetErrorCode returns the value of ErrorCode.
func (s *ServerErrorResponse) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetErrorMsg returns the value of ErrorMsg.
func (s *ServerErrorResponse) GetErrorMsg() OptString {
	return s.ErrorMsg
}

// SetIsFatal sets the value of IsFatal.
func (s *ServerErrorResponse) SetIsFatal(val OptBool) {
	s.IsFatal = val
}

// SetSerial sets the value of Serial.
func (s *ServerErrorResponse) SetSerial(val OptString) {
	s.Serial = val
}

// SetStatus sets the value of Status.
func (s *ServerErrorResponse) SetStatus(val OptString) {
	s.Status = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ServerErrorResponse) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetErrorMsg sets the value of ErrorMsg.
func (s *ServerErrorResponse) SetErrorMsg(val OptString) {
	s.ErrorMsg = val
}

func (*ServerErrorResponse) confirmStatusDBRes()        {}
func (*ServerErrorResponse) createBackupRes()           {}
func (*ServerErrorResponse) createDBRes()               {}
func (*ServerErrorResponse) deleteAppliancePowerRes()   {}
func (*ServerErrorResponse) deleteBackupRes()           {}
func (*ServerErrorResponse) deleteDBRes()               {}
func (*ServerErrorResponse) getBackupByApplianceIDRes() {}
func (*ServerErrorResponse) getDBRes()                  {}
func (*ServerErrorResponse) getNoSQLNodeHealthRes()     {}
func (*ServerErrorResponse) getParameterRes()           {}
func (*ServerErrorResponse) getVersionRes()             {}
func (*ServerErrorResponse) listDBRes()                 {}
func (*ServerErrorResponse) postNoSQLRepairRes()        {}
func (*ServerErrorResponse) putAppliancePowerRes()      {}
func (*ServerErrorResponse) putParameterRes()           {}
func (*ServerErrorResponse) putVersionRes()             {}
func (*ServerErrorResponse) recoverNoSQLNodeRes()       {}
func (*ServerErrorResponse) restoreBackupRes()          {}
func (*ServerErrorResponse) updateDBRes()               {}

type ServiceClass string

// Ref: #/components/schemas/Success
// Success represents sum type.
type Success struct {
	Type   SuccessType // switch on this field
	Bool   bool
	String string
}

// SuccessType is oneOf type of Success.
type SuccessType string

// Possible values for SuccessType.
const (
	BoolSuccess   SuccessType = "bool"
	StringSuccess SuccessType = "string"
)

// IsBool reports whether Success is bool.
func (s Success) IsBool() bool { return s.Type == BoolSuccess }

// IsString reports whether Success is string.
func (s Success) IsString() bool { return s.Type == StringSuccess }

// SetBool sets Success to bool.
func (s *Success) SetBool(v bool) {
	s.Type = BoolSuccess
	s.Bool = v
}

// GetBool returns bool and true boolean if Success is bool.
func (s Success) GetBool() (v bool, ok bool) {
	if !s.IsBool() {
		return v, false
	}
	return s.Bool, true
}

// NewBoolSuccess returns new Success from bool.
func NewBoolSuccess(v bool) Success {
	var s Success
	s.SetBool(v)
	return s
}

// SetString sets Success to string.
func (s *Success) SetString(v string) {
	s.Type = StringSuccess
	s.String = v
}

// GetString returns string and true boolean if Success is string.
func (s Success) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringSuccess returns new Success from string.
func NewStringSuccess(v string) Success {
	var s Success
	s.SetString(v)
	return s
}

// Ref: #/components/schemas/SuccessResponse
type SuccessResponse struct {
	Success OptSuccess `json:"Success"`
	IsOk    OptIsOk    `json:"is_ok"`
}

// GetSuccess returns the value of Success.
func (s *SuccessResponse) GetSuccess() OptSuccess {
	return s.Success
}

// GetIsOk returns the value of IsOk.
func (s *SuccessResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetSuccess sets the value of Success.
func (s *SuccessResponse) SetSuccess(val OptSuccess) {
	s.Success = val
}

// SetIsOk sets the value of IsOk.
func (s *SuccessResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*SuccessResponse) deleteAppliancePowerRes() {}
func (*SuccessResponse) putAppliancePowerRes()    {}

type Tags []string

// エラーレスポンス.
type UnauthorizedResponse struct {
	// エラーのレスポンス(true:エラー).
	IsFatal OptBool `json:"is_fatal"`
	// 追跡コード.
	Serial OptString `json:"serial"`
	// ステータス.
	Status OptString `json:"status"`
	// エラーコード.
	ErrorCode OptString `json:"error_code"`
	// エラーメッセージ.
	ErrorMsg OptString `json:"error_msg"`
}

// GetIsFatal returns the value of IsFatal.
func (s *UnauthorizedResponse) GetIsFatal() OptBool {
	return s.IsFatal
}

// GetSerial returns the value of Serial.
func (s *UnauthorizedResponse) GetSerial() OptString {
	return s.Serial
}

// GetStatus returns the value of Status.
func (s *UnauthorizedResponse) GetStatus() OptString {
	return s.Status
}

// GetErrorCode returns the value of ErrorCode.
func (s *UnauthorizedResponse) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetErrorMsg returns the value of ErrorMsg.
func (s *UnauthorizedResponse) GetErrorMsg() OptString {
	return s.ErrorMsg
}

// SetIsFatal sets the value of IsFatal.
func (s *UnauthorizedResponse) SetIsFatal(val OptBool) {
	s.IsFatal = val
}

// SetSerial sets the value of Serial.
func (s *UnauthorizedResponse) SetSerial(val OptString) {
	s.Serial = val
}

// SetStatus sets the value of Status.
func (s *UnauthorizedResponse) SetStatus(val OptString) {
	s.Status = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *UnauthorizedResponse) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetErrorMsg sets the value of ErrorMsg.
func (s *UnauthorizedResponse) SetErrorMsg(val OptString) {
	s.ErrorMsg = val
}

func (*UnauthorizedResponse) confirmStatusDBRes()        {}
func (*UnauthorizedResponse) createBackupRes()           {}
func (*UnauthorizedResponse) createDBRes()               {}
func (*UnauthorizedResponse) deleteAppliancePowerRes()   {}
func (*UnauthorizedResponse) deleteBackupRes()           {}
func (*UnauthorizedResponse) deleteDBRes()               {}
func (*UnauthorizedResponse) getBackupByApplianceIDRes() {}
func (*UnauthorizedResponse) getDBRes()                  {}
func (*UnauthorizedResponse) getNoSQLNodeHealthRes()     {}
func (*UnauthorizedResponse) getParameterRes()           {}
func (*UnauthorizedResponse) getVersionRes()             {}
func (*UnauthorizedResponse) listDBRes()                 {}
func (*UnauthorizedResponse) postNoSQLRepairRes()        {}
func (*UnauthorizedResponse) putAppliancePowerRes()      {}
func (*UnauthorizedResponse) putParameterRes()           {}
func (*UnauthorizedResponse) putVersionRes()             {}
func (*UnauthorizedResponse) recoverNoSQLNodeRes()       {}
func (*UnauthorizedResponse) restoreBackupRes()          {}
func (*UnauthorizedResponse) updateDBRes()               {}
