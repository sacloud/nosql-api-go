// Code generated by ogen, DO NOT EDIT.

package v1

import (
	"net/netip"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

type Availability string

// エラーレスポンス.
type BadRequestResponse struct {
	// エラーのレスポンス(true:エラー).
	IsFatal OptBool `json:"is_fatal"`
	// 追跡コード.
	Serial OptString `json:"serial"`
	// ステータス.
	Status OptString `json:"status"`
	// エラーコード.
	ErrorCode OptString `json:"error_code"`
	// エラーメッセージ.
	ErrorMsg OptString `json:"error_msg"`
}

// GetIsFatal returns the value of IsFatal.
func (s *BadRequestResponse) GetIsFatal() OptBool {
	return s.IsFatal
}

// GetSerial returns the value of Serial.
func (s *BadRequestResponse) GetSerial() OptString {
	return s.Serial
}

// GetStatus returns the value of Status.
func (s *BadRequestResponse) GetStatus() OptString {
	return s.Status
}

// GetErrorCode returns the value of ErrorCode.
func (s *BadRequestResponse) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetErrorMsg returns the value of ErrorMsg.
func (s *BadRequestResponse) GetErrorMsg() OptString {
	return s.ErrorMsg
}

// SetIsFatal sets the value of IsFatal.
func (s *BadRequestResponse) SetIsFatal(val OptBool) {
	s.IsFatal = val
}

// SetSerial sets the value of Serial.
func (s *BadRequestResponse) SetSerial(val OptString) {
	s.Serial = val
}

// SetStatus sets the value of Status.
func (s *BadRequestResponse) SetStatus(val OptString) {
	s.Status = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *BadRequestResponse) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetErrorMsg sets the value of ErrorMsg.
func (s *BadRequestResponse) SetErrorMsg(val OptString) {
	s.ErrorMsg = val
}

func (*BadRequestResponse) confirmStatusDBRes()        {}
func (*BadRequestResponse) createBackupRes()           {}
func (*BadRequestResponse) createDBRes()               {}
func (*BadRequestResponse) deleteAppliancePowerRes()   {}
func (*BadRequestResponse) deleteBackupRes()           {}
func (*BadRequestResponse) deleteDBRes()               {}
func (*BadRequestResponse) getBackupByApplianceIDRes() {}
func (*BadRequestResponse) getDBRes()                  {}
func (*BadRequestResponse) getParameterRes()           {}
func (*BadRequestResponse) getVersionRes()             {}
func (*BadRequestResponse) listDBRes()                 {}
func (*BadRequestResponse) putAppliancePowerRes()      {}
func (*BadRequestResponse) putParameterRes()           {}
func (*BadRequestResponse) putVersionRes()             {}
func (*BadRequestResponse) restoreBackupRes()          {}
func (*BadRequestResponse) updateConfigDBRes()         {}
func (*BadRequestResponse) updateDBRes()               {}

// エラーレスポンス.
type ConflictResponse struct {
	// エラーのレスポンス(true:エラー).
	IsFatal OptBool `json:"is_fatal"`
	// 追跡コード.
	Serial OptString `json:"serial"`
	// ステータス.
	Status OptString `json:"status"`
	// エラーコード.
	ErrorCode OptString `json:"error_code"`
	// エラーメッセージ.
	ErrorMsg OptString `json:"error_msg"`
}

// GetIsFatal returns the value of IsFatal.
func (s *ConflictResponse) GetIsFatal() OptBool {
	return s.IsFatal
}

// GetSerial returns the value of Serial.
func (s *ConflictResponse) GetSerial() OptString {
	return s.Serial
}

// GetStatus returns the value of Status.
func (s *ConflictResponse) GetStatus() OptString {
	return s.Status
}

// GetErrorCode returns the value of ErrorCode.
func (s *ConflictResponse) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetErrorMsg returns the value of ErrorMsg.
func (s *ConflictResponse) GetErrorMsg() OptString {
	return s.ErrorMsg
}

// SetIsFatal sets the value of IsFatal.
func (s *ConflictResponse) SetIsFatal(val OptBool) {
	s.IsFatal = val
}

// SetSerial sets the value of Serial.
func (s *ConflictResponse) SetSerial(val OptString) {
	s.Serial = val
}

// SetStatus sets the value of Status.
func (s *ConflictResponse) SetStatus(val OptString) {
	s.Status = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ConflictResponse) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetErrorMsg sets the value of ErrorMsg.
func (s *ConflictResponse) SetErrorMsg(val OptString) {
	s.ErrorMsg = val
}

func (*ConflictResponse) createDBRes() {}

// Ref: #/components/schemas/GetParameterResponse
type GetParameterResponse struct {
	Nosql OptGetParameterResponseNosql `json:"nosql"`
	IsOk  OptIsOk                      `json:"is_ok"`
}

// GetNosql returns the value of Nosql.
func (s *GetParameterResponse) GetNosql() OptGetParameterResponseNosql {
	return s.Nosql
}

// GetIsOk returns the value of IsOk.
func (s *GetParameterResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetNosql sets the value of Nosql.
func (s *GetParameterResponse) SetNosql(val OptGetParameterResponseNosql) {
	s.Nosql = val
}

// SetIsOk sets the value of IsOk.
func (s *GetParameterResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*GetParameterResponse) getParameterRes() {}

type GetParameterResponseNosql struct {
	Parameters []NosqlGetParameter `json:"parameters"`
}

// GetParameters returns the value of Parameters.
func (s *GetParameterResponseNosql) GetParameters() []NosqlGetParameter {
	return s.Parameters
}

// SetParameters sets the value of Parameters.
func (s *GetParameterResponseNosql) SetParameters(val []NosqlGetParameter) {
	s.Parameters = val
}

// Ref: #/components/schemas/Instance
type Instance struct {
	Status          OptString           `json:"Status"`
	StatusChangedAt OptDateTime         `json:"StatusChangedAt"`
	Host            OptNilInstanceHost  `json:"Host"`
	Hosts           []InstanceHostsItem `json:"Hosts"`
}

// GetStatus returns the value of Status.
func (s *Instance) GetStatus() OptString {
	return s.Status
}

// GetStatusChangedAt returns the value of StatusChangedAt.
func (s *Instance) GetStatusChangedAt() OptDateTime {
	return s.StatusChangedAt
}

// GetHost returns the value of Host.
func (s *Instance) GetHost() OptNilInstanceHost {
	return s.Host
}

// GetHosts returns the value of Hosts.
func (s *Instance) GetHosts() []InstanceHostsItem {
	return s.Hosts
}

// SetStatus sets the value of Status.
func (s *Instance) SetStatus(val OptString) {
	s.Status = val
}

// SetStatusChangedAt sets the value of StatusChangedAt.
func (s *Instance) SetStatusChangedAt(val OptDateTime) {
	s.StatusChangedAt = val
}

// SetHost sets the value of Host.
func (s *Instance) SetHost(val OptNilInstanceHost) {
	s.Host = val
}

// SetHosts sets the value of Hosts.
func (s *Instance) SetHosts(val []InstanceHostsItem) {
	s.Hosts = val
}

type InstanceHost struct {
	Name    OptString `json:"Name"`
	InfoURL OptString `json:"InfoURL"`
}

// GetName returns the value of Name.
func (s *InstanceHost) GetName() OptString {
	return s.Name
}

// GetInfoURL returns the value of InfoURL.
func (s *InstanceHost) GetInfoURL() OptString {
	return s.InfoURL
}

// SetName sets the value of Name.
func (s *InstanceHost) SetName(val OptString) {
	s.Name = val
}

// SetInfoURL sets the value of InfoURL.
func (s *InstanceHost) SetInfoURL(val OptString) {
	s.InfoURL = val
}

type InstanceHostsItem struct {
	Name    OptString `json:"Name"`
	InfoURL OptString `json:"InfoURL"`
}

// GetName returns the value of Name.
func (s *InstanceHostsItem) GetName() OptString {
	return s.Name
}

// GetInfoURL returns the value of InfoURL.
func (s *InstanceHostsItem) GetInfoURL() OptString {
	return s.InfoURL
}

// SetName sets the value of Name.
func (s *InstanceHostsItem) SetName(val OptString) {
	s.Name = val
}

// SetInfoURL sets the value of InfoURL.
func (s *InstanceHostsItem) SetInfoURL(val OptString) {
	s.InfoURL = val
}

type IsOk bool

// Merged schema.
// Ref: #/components/schemas/NosqlAppliance
type NosqlAppliance struct {
	// クラス.
	Class OptString `json:"Class"`
	// NoSQLの名前.
	Name OptString `json:"Name"`
	// NoSQLの説明.
	Description OptString  `json:"Description"`
	Tags        OptNilTags `json:"Tags"`
	// アプライアンスID.
	ID           string                         `json:"ID"`
	Plan         OptPlan                        `json:"Plan"`
	Settings     OptNosqlSettings               `json:"Settings"`
	SettingsHash OptString                      `json:"SettingsHash"`
	Remark       OptNosqlApplianceRemark        `json:"Remark"`
	Availability OptAvailability                `json:"Availability"`
	Instance     OptInstance                    `json:"Instance"`
	Disk         OptNilNosqlApplianceDisk       `json:"Disk"`
	ServiceClass OptServiceClass                `json:"ServiceClass"`
	Generation   OptInt                         `json:"Generation"`
	CreatedAt    OptDateTime                    `json:"CreatedAt"`
	Interfaces   []NosqlApplianceInterfacesItem `json:"Interfaces"`
}

// GetClass returns the value of Class.
func (s *NosqlAppliance) GetClass() OptString {
	return s.Class
}

// GetName returns the value of Name.
func (s *NosqlAppliance) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *NosqlAppliance) GetDescription() OptString {
	return s.Description
}

// GetTags returns the value of Tags.
func (s *NosqlAppliance) GetTags() OptNilTags {
	return s.Tags
}

// GetID returns the value of ID.
func (s *NosqlAppliance) GetID() string {
	return s.ID
}

// GetPlan returns the value of Plan.
func (s *NosqlAppliance) GetPlan() OptPlan {
	return s.Plan
}

// GetSettings returns the value of Settings.
func (s *NosqlAppliance) GetSettings() OptNosqlSettings {
	return s.Settings
}

// GetSettingsHash returns the value of SettingsHash.
func (s *NosqlAppliance) GetSettingsHash() OptString {
	return s.SettingsHash
}

// GetRemark returns the value of Remark.
func (s *NosqlAppliance) GetRemark() OptNosqlApplianceRemark {
	return s.Remark
}

// GetAvailability returns the value of Availability.
func (s *NosqlAppliance) GetAvailability() OptAvailability {
	return s.Availability
}

// GetInstance returns the value of Instance.
func (s *NosqlAppliance) GetInstance() OptInstance {
	return s.Instance
}

// GetDisk returns the value of Disk.
func (s *NosqlAppliance) GetDisk() OptNilNosqlApplianceDisk {
	return s.Disk
}

// GetServiceClass returns the value of ServiceClass.
func (s *NosqlAppliance) GetServiceClass() OptServiceClass {
	return s.ServiceClass
}

// GetGeneration returns the value of Generation.
func (s *NosqlAppliance) GetGeneration() OptInt {
	return s.Generation
}

// GetCreatedAt returns the value of CreatedAt.
func (s *NosqlAppliance) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetInterfaces returns the value of Interfaces.
func (s *NosqlAppliance) GetInterfaces() []NosqlApplianceInterfacesItem {
	return s.Interfaces
}

// SetClass sets the value of Class.
func (s *NosqlAppliance) SetClass(val OptString) {
	s.Class = val
}

// SetName sets the value of Name.
func (s *NosqlAppliance) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *NosqlAppliance) SetDescription(val OptString) {
	s.Description = val
}

// SetTags sets the value of Tags.
func (s *NosqlAppliance) SetTags(val OptNilTags) {
	s.Tags = val
}

// SetID sets the value of ID.
func (s *NosqlAppliance) SetID(val string) {
	s.ID = val
}

// SetPlan sets the value of Plan.
func (s *NosqlAppliance) SetPlan(val OptPlan) {
	s.Plan = val
}

// SetSettings sets the value of Settings.
func (s *NosqlAppliance) SetSettings(val OptNosqlSettings) {
	s.Settings = val
}

// SetSettingsHash sets the value of SettingsHash.
func (s *NosqlAppliance) SetSettingsHash(val OptString) {
	s.SettingsHash = val
}

// SetRemark sets the value of Remark.
func (s *NosqlAppliance) SetRemark(val OptNosqlApplianceRemark) {
	s.Remark = val
}

// SetAvailability sets the value of Availability.
func (s *NosqlAppliance) SetAvailability(val OptAvailability) {
	s.Availability = val
}

// SetInstance sets the value of Instance.
func (s *NosqlAppliance) SetInstance(val OptInstance) {
	s.Instance = val
}

// SetDisk sets the value of Disk.
func (s *NosqlAppliance) SetDisk(val OptNilNosqlApplianceDisk) {
	s.Disk = val
}

// SetServiceClass sets the value of ServiceClass.
func (s *NosqlAppliance) SetServiceClass(val OptServiceClass) {
	s.ServiceClass = val
}

// SetGeneration sets the value of Generation.
func (s *NosqlAppliance) SetGeneration(val OptInt) {
	s.Generation = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *NosqlAppliance) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetInterfaces sets the value of Interfaces.
func (s *NosqlAppliance) SetInterfaces(val []NosqlApplianceInterfacesItem) {
	s.Interfaces = val
}

type NosqlApplianceDisk struct {
	EncryptionAlgorithm OptString `json:"EncryptionAlgorithm"`
}

// GetEncryptionAlgorithm returns the value of EncryptionAlgorithm.
func (s *NosqlApplianceDisk) GetEncryptionAlgorithm() OptString {
	return s.EncryptionAlgorithm
}

// SetEncryptionAlgorithm sets the value of EncryptionAlgorithm.
func (s *NosqlApplianceDisk) SetEncryptionAlgorithm(val OptString) {
	s.EncryptionAlgorithm = val
}

type NosqlApplianceInterfacesItem struct {
	// IPアドレス.
	IPAddress OptNilString `json:"IPAddress"`
	// ユーザIPアドレス.
	UserIPAddress OptNilString `json:"UserIPAddress"`
	// ホスト名.
	HostName OptNilString `json:"HostName"`
	// スイッチ情報.
	Switch OptNosqlApplianceInterfacesItemSwitch `json:"Switch"`
}

// GetIPAddress returns the value of IPAddress.
func (s *NosqlApplianceInterfacesItem) GetIPAddress() OptNilString {
	return s.IPAddress
}

// GetUserIPAddress returns the value of UserIPAddress.
func (s *NosqlApplianceInterfacesItem) GetUserIPAddress() OptNilString {
	return s.UserIPAddress
}

// GetHostName returns the value of HostName.
func (s *NosqlApplianceInterfacesItem) GetHostName() OptNilString {
	return s.HostName
}

// GetSwitch returns the value of Switch.
func (s *NosqlApplianceInterfacesItem) GetSwitch() OptNosqlApplianceInterfacesItemSwitch {
	return s.Switch
}

// SetIPAddress sets the value of IPAddress.
func (s *NosqlApplianceInterfacesItem) SetIPAddress(val OptNilString) {
	s.IPAddress = val
}

// SetUserIPAddress sets the value of UserIPAddress.
func (s *NosqlApplianceInterfacesItem) SetUserIPAddress(val OptNilString) {
	s.UserIPAddress = val
}

// SetHostName sets the value of HostName.
func (s *NosqlApplianceInterfacesItem) SetHostName(val OptNilString) {
	s.HostName = val
}

// SetSwitch sets the value of Switch.
func (s *NosqlApplianceInterfacesItem) SetSwitch(val OptNosqlApplianceInterfacesItemSwitch) {
	s.Switch = val
}

// スイッチ情報.
type NosqlApplianceInterfacesItemSwitch struct {
	// スイッチID.
	ID string `json:"ID"`
	// スイッチ名.
	Name OptString `json:"name"`
	// スコープ(shared/user).
	Scope OptString `json:"Scope"`
	// サブネット情報.
	Subnet OptNilNosqlApplianceInterfacesItemSwitchSubnet `json:"Subnet"`
	// ユーザーサブネット情報.
	UserSubnet OptNosqlApplianceInterfacesItemSwitchUserSubnet `json:"UserSubnet"`
}

// GetID returns the value of ID.
func (s *NosqlApplianceInterfacesItemSwitch) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *NosqlApplianceInterfacesItemSwitch) GetName() OptString {
	return s.Name
}

// GetScope returns the value of Scope.
func (s *NosqlApplianceInterfacesItemSwitch) GetScope() OptString {
	return s.Scope
}

// GetSubnet returns the value of Subnet.
func (s *NosqlApplianceInterfacesItemSwitch) GetSubnet() OptNilNosqlApplianceInterfacesItemSwitchSubnet {
	return s.Subnet
}

// GetUserSubnet returns the value of UserSubnet.
func (s *NosqlApplianceInterfacesItemSwitch) GetUserSubnet() OptNosqlApplianceInterfacesItemSwitchUserSubnet {
	return s.UserSubnet
}

// SetID sets the value of ID.
func (s *NosqlApplianceInterfacesItemSwitch) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *NosqlApplianceInterfacesItemSwitch) SetName(val OptString) {
	s.Name = val
}

// SetScope sets the value of Scope.
func (s *NosqlApplianceInterfacesItemSwitch) SetScope(val OptString) {
	s.Scope = val
}

// SetSubnet sets the value of Subnet.
func (s *NosqlApplianceInterfacesItemSwitch) SetSubnet(val OptNilNosqlApplianceInterfacesItemSwitchSubnet) {
	s.Subnet = val
}

// SetUserSubnet sets the value of UserSubnet.
func (s *NosqlApplianceInterfacesItemSwitch) SetUserSubnet(val OptNosqlApplianceInterfacesItemSwitchUserSubnet) {
	s.UserSubnet = val
}

// サブネット情報.
type NosqlApplianceInterfacesItemSwitchSubnet struct {
	// ネットワークアドレス.
	NetworkAddress OptString `json:"NetworkAddress"`
	// ネットマスク.
	NetworkMaskLen OptInt `json:"NetworkMaskLen"`
	// ゲートウェイのアドレス.
	DefaultRoute OptNilString                                        `json:"DefaultRoute"`
	Internet     OptNosqlApplianceInterfacesItemSwitchSubnetInternet `json:"Internet"`
}

// GetNetworkAddress returns the value of NetworkAddress.
func (s *NosqlApplianceInterfacesItemSwitchSubnet) GetNetworkAddress() OptString {
	return s.NetworkAddress
}

// GetNetworkMaskLen returns the value of NetworkMaskLen.
func (s *NosqlApplianceInterfacesItemSwitchSubnet) GetNetworkMaskLen() OptInt {
	return s.NetworkMaskLen
}

// GetDefaultRoute returns the value of DefaultRoute.
func (s *NosqlApplianceInterfacesItemSwitchSubnet) GetDefaultRoute() OptNilString {
	return s.DefaultRoute
}

// GetInternet returns the value of Internet.
func (s *NosqlApplianceInterfacesItemSwitchSubnet) GetInternet() OptNosqlApplianceInterfacesItemSwitchSubnetInternet {
	return s.Internet
}

// SetNetworkAddress sets the value of NetworkAddress.
func (s *NosqlApplianceInterfacesItemSwitchSubnet) SetNetworkAddress(val OptString) {
	s.NetworkAddress = val
}

// SetNetworkMaskLen sets the value of NetworkMaskLen.
func (s *NosqlApplianceInterfacesItemSwitchSubnet) SetNetworkMaskLen(val OptInt) {
	s.NetworkMaskLen = val
}

// SetDefaultRoute sets the value of DefaultRoute.
func (s *NosqlApplianceInterfacesItemSwitchSubnet) SetDefaultRoute(val OptNilString) {
	s.DefaultRoute = val
}

// SetInternet sets the value of Internet.
func (s *NosqlApplianceInterfacesItemSwitchSubnet) SetInternet(val OptNosqlApplianceInterfacesItemSwitchSubnetInternet) {
	s.Internet = val
}

type NosqlApplianceInterfacesItemSwitchSubnetInternet struct {
	BandWidthMbps OptInt `json:"BandWidthMbps"`
}

// GetBandWidthMbps returns the value of BandWidthMbps.
func (s *NosqlApplianceInterfacesItemSwitchSubnetInternet) GetBandWidthMbps() OptInt {
	return s.BandWidthMbps
}

// SetBandWidthMbps sets the value of BandWidthMbps.
func (s *NosqlApplianceInterfacesItemSwitchSubnetInternet) SetBandWidthMbps(val OptInt) {
	s.BandWidthMbps = val
}

// ユーザーサブネット情報.
type NosqlApplianceInterfacesItemSwitchUserSubnet struct {
	// ゲートウェイのアドレス.
	DefaultRoute OptNilString `json:"DefaultRoute"`
	// ネットマスク.
	NetworkMaskLen OptInt `json:"NetworkMaskLen"`
}

// GetDefaultRoute returns the value of DefaultRoute.
func (s *NosqlApplianceInterfacesItemSwitchUserSubnet) GetDefaultRoute() OptNilString {
	return s.DefaultRoute
}

// GetNetworkMaskLen returns the value of NetworkMaskLen.
func (s *NosqlApplianceInterfacesItemSwitchUserSubnet) GetNetworkMaskLen() OptInt {
	return s.NetworkMaskLen
}

// SetDefaultRoute sets the value of DefaultRoute.
func (s *NosqlApplianceInterfacesItemSwitchUserSubnet) SetDefaultRoute(val OptNilString) {
	s.DefaultRoute = val
}

// SetNetworkMaskLen sets the value of NetworkMaskLen.
func (s *NosqlApplianceInterfacesItemSwitchUserSubnet) SetNetworkMaskLen(val OptInt) {
	s.NetworkMaskLen = val
}

// Merged schema.
type NosqlApplianceRemark struct {
	Nosql   OptNosqlApplianceRemarkNosql      `json:"Nosql"`
	Servers []NosqlApplianceRemarkServersItem `json:"Servers"`
	// ゾーン.
	Zone OptNosqlApplianceRemarkZone `json:"Zone"`
	// サービスクラス.
	ServiceClass OptString `json:"ServiceClass"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlApplianceRemark) GetNosql() OptNosqlApplianceRemarkNosql {
	return s.Nosql
}

// GetServers returns the value of Servers.
func (s *NosqlApplianceRemark) GetServers() []NosqlApplianceRemarkServersItem {
	return s.Servers
}

// GetZone returns the value of Zone.
func (s *NosqlApplianceRemark) GetZone() OptNosqlApplianceRemarkZone {
	return s.Zone
}

// GetServiceClass returns the value of ServiceClass.
func (s *NosqlApplianceRemark) GetServiceClass() OptString {
	return s.ServiceClass
}

// SetNosql sets the value of Nosql.
func (s *NosqlApplianceRemark) SetNosql(val OptNosqlApplianceRemarkNosql) {
	s.Nosql = val
}

// SetServers sets the value of Servers.
func (s *NosqlApplianceRemark) SetServers(val []NosqlApplianceRemarkServersItem) {
	s.Servers = val
}

// SetZone sets the value of Zone.
func (s *NosqlApplianceRemark) SetZone(val OptNosqlApplianceRemarkZone) {
	s.Zone = val
}

// SetServiceClass sets the value of ServiceClass.
func (s *NosqlApplianceRemark) SetServiceClass(val OptString) {
	s.ServiceClass = val
}

type NosqlApplianceRemarkNosql struct {
	// データベースに使用するエンジン.
	DatabaseEngine NosqlApplianceRemarkNosqlDatabaseEngine `json:"DatabaseEngine"`
	// データベースバージョン.
	DatabaseVersion string `json:"DatabaseVersion"`
	// デフォルトユーザー名.
	DefaultUser string `json:"DefaultUser"`
	// ディスクサイズ(MB).
	DiskSize NosqlApplianceRemarkNosqlDiskSize `json:"DiskSize"`
	// メモリ(MB).
	Memory NosqlApplianceRemarkNosqlMemory `json:"Memory"`
	// ノード数.
	Nodes int `json:"Nodes"`
	// ポート.
	Port int `json:"Port"`
	// ストレージ.
	Storage NosqlApplianceRemarkNosqlStorage `json:"Storage"`
	// 仮想コア.
	Virtualcore NosqlApplianceRemarkNosqlVirtualcore `json:"Virtualcore"`
	// ゾーン.
	Zone string `json:"Zone"`
}

// GetDatabaseEngine returns the value of DatabaseEngine.
func (s *NosqlApplianceRemarkNosql) GetDatabaseEngine() NosqlApplianceRemarkNosqlDatabaseEngine {
	return s.DatabaseEngine
}

// GetDatabaseVersion returns the value of DatabaseVersion.
func (s *NosqlApplianceRemarkNosql) GetDatabaseVersion() string {
	return s.DatabaseVersion
}

// GetDefaultUser returns the value of DefaultUser.
func (s *NosqlApplianceRemarkNosql) GetDefaultUser() string {
	return s.DefaultUser
}

// GetDiskSize returns the value of DiskSize.
func (s *NosqlApplianceRemarkNosql) GetDiskSize() NosqlApplianceRemarkNosqlDiskSize {
	return s.DiskSize
}

// GetMemory returns the value of Memory.
func (s *NosqlApplianceRemarkNosql) GetMemory() NosqlApplianceRemarkNosqlMemory {
	return s.Memory
}

// GetNodes returns the value of Nodes.
func (s *NosqlApplianceRemarkNosql) GetNodes() int {
	return s.Nodes
}

// GetPort returns the value of Port.
func (s *NosqlApplianceRemarkNosql) GetPort() int {
	return s.Port
}

// GetStorage returns the value of Storage.
func (s *NosqlApplianceRemarkNosql) GetStorage() NosqlApplianceRemarkNosqlStorage {
	return s.Storage
}

// GetVirtualcore returns the value of Virtualcore.
func (s *NosqlApplianceRemarkNosql) GetVirtualcore() NosqlApplianceRemarkNosqlVirtualcore {
	return s.Virtualcore
}

// GetZone returns the value of Zone.
func (s *NosqlApplianceRemarkNosql) GetZone() string {
	return s.Zone
}

// SetDatabaseEngine sets the value of DatabaseEngine.
func (s *NosqlApplianceRemarkNosql) SetDatabaseEngine(val NosqlApplianceRemarkNosqlDatabaseEngine) {
	s.DatabaseEngine = val
}

// SetDatabaseVersion sets the value of DatabaseVersion.
func (s *NosqlApplianceRemarkNosql) SetDatabaseVersion(val string) {
	s.DatabaseVersion = val
}

// SetDefaultUser sets the value of DefaultUser.
func (s *NosqlApplianceRemarkNosql) SetDefaultUser(val string) {
	s.DefaultUser = val
}

// SetDiskSize sets the value of DiskSize.
func (s *NosqlApplianceRemarkNosql) SetDiskSize(val NosqlApplianceRemarkNosqlDiskSize) {
	s.DiskSize = val
}

// SetMemory sets the value of Memory.
func (s *NosqlApplianceRemarkNosql) SetMemory(val NosqlApplianceRemarkNosqlMemory) {
	s.Memory = val
}

// SetNodes sets the value of Nodes.
func (s *NosqlApplianceRemarkNosql) SetNodes(val int) {
	s.Nodes = val
}

// SetPort sets the value of Port.
func (s *NosqlApplianceRemarkNosql) SetPort(val int) {
	s.Port = val
}

// SetStorage sets the value of Storage.
func (s *NosqlApplianceRemarkNosql) SetStorage(val NosqlApplianceRemarkNosqlStorage) {
	s.Storage = val
}

// SetVirtualcore sets the value of Virtualcore.
func (s *NosqlApplianceRemarkNosql) SetVirtualcore(val NosqlApplianceRemarkNosqlVirtualcore) {
	s.Virtualcore = val
}

// SetZone sets the value of Zone.
func (s *NosqlApplianceRemarkNosql) SetZone(val string) {
	s.Zone = val
}

// データベースに使用するエンジン.
type NosqlApplianceRemarkNosqlDatabaseEngine string

const (
	NosqlApplianceRemarkNosqlDatabaseEngineCassandra NosqlApplianceRemarkNosqlDatabaseEngine = "Cassandra"
)

// AllValues returns all NosqlApplianceRemarkNosqlDatabaseEngine values.
func (NosqlApplianceRemarkNosqlDatabaseEngine) AllValues() []NosqlApplianceRemarkNosqlDatabaseEngine {
	return []NosqlApplianceRemarkNosqlDatabaseEngine{
		NosqlApplianceRemarkNosqlDatabaseEngineCassandra,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlApplianceRemarkNosqlDatabaseEngine) MarshalText() ([]byte, error) {
	switch s {
	case NosqlApplianceRemarkNosqlDatabaseEngineCassandra:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlApplianceRemarkNosqlDatabaseEngine) UnmarshalText(data []byte) error {
	switch NosqlApplianceRemarkNosqlDatabaseEngine(data) {
	case NosqlApplianceRemarkNosqlDatabaseEngineCassandra:
		*s = NosqlApplianceRemarkNosqlDatabaseEngineCassandra
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ディスクサイズ(MB).
type NosqlApplianceRemarkNosqlDiskSize int

const (
	NosqlApplianceRemarkNosqlDiskSize102400 NosqlApplianceRemarkNosqlDiskSize = 102400
)

// AllValues returns all NosqlApplianceRemarkNosqlDiskSize values.
func (NosqlApplianceRemarkNosqlDiskSize) AllValues() []NosqlApplianceRemarkNosqlDiskSize {
	return []NosqlApplianceRemarkNosqlDiskSize{
		NosqlApplianceRemarkNosqlDiskSize102400,
	}
}

// メモリ(MB).
type NosqlApplianceRemarkNosqlMemory int

const (
	NosqlApplianceRemarkNosqlMemory8192 NosqlApplianceRemarkNosqlMemory = 8192
)

// AllValues returns all NosqlApplianceRemarkNosqlMemory values.
func (NosqlApplianceRemarkNosqlMemory) AllValues() []NosqlApplianceRemarkNosqlMemory {
	return []NosqlApplianceRemarkNosqlMemory{
		NosqlApplianceRemarkNosqlMemory8192,
	}
}

// ストレージ.
type NosqlApplianceRemarkNosqlStorage string

const (
	NosqlApplianceRemarkNosqlStorageSSD NosqlApplianceRemarkNosqlStorage = "SSD"
)

// AllValues returns all NosqlApplianceRemarkNosqlStorage values.
func (NosqlApplianceRemarkNosqlStorage) AllValues() []NosqlApplianceRemarkNosqlStorage {
	return []NosqlApplianceRemarkNosqlStorage{
		NosqlApplianceRemarkNosqlStorageSSD,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlApplianceRemarkNosqlStorage) MarshalText() ([]byte, error) {
	switch s {
	case NosqlApplianceRemarkNosqlStorageSSD:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlApplianceRemarkNosqlStorage) UnmarshalText(data []byte) error {
	switch NosqlApplianceRemarkNosqlStorage(data) {
	case NosqlApplianceRemarkNosqlStorageSSD:
		*s = NosqlApplianceRemarkNosqlStorageSSD
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 仮想コア.
type NosqlApplianceRemarkNosqlVirtualcore int

const (
	NosqlApplianceRemarkNosqlVirtualcore3 NosqlApplianceRemarkNosqlVirtualcore = 3
)

// AllValues returns all NosqlApplianceRemarkNosqlVirtualcore values.
func (NosqlApplianceRemarkNosqlVirtualcore) AllValues() []NosqlApplianceRemarkNosqlVirtualcore {
	return []NosqlApplianceRemarkNosqlVirtualcore{
		NosqlApplianceRemarkNosqlVirtualcore3,
	}
}

type NosqlApplianceRemarkServersItem struct {
	// ユーザIPアドレス
	// ※Node数分指定する.
	UserIPAddress netip.Addr `json:"UserIPAddress"`
}

// GetUserIPAddress returns the value of UserIPAddress.
func (s *NosqlApplianceRemarkServersItem) GetUserIPAddress() netip.Addr {
	return s.UserIPAddress
}

// SetUserIPAddress sets the value of UserIPAddress.
func (s *NosqlApplianceRemarkServersItem) SetUserIPAddress(val netip.Addr) {
	s.UserIPAddress = val
}

// ゾーン.
type NosqlApplianceRemarkZone struct {
	// ゾーンID.
	ID OptString `json:"ID"`
}

// GetID returns the value of ID.
func (s *NosqlApplianceRemarkZone) GetID() OptString {
	return s.ID
}

// SetID sets the value of ID.
func (s *NosqlApplianceRemarkZone) SetID(val OptString) {
	s.ID = val
}

// Ref: #/components/schemas/NosqlBackup
type NosqlBackup struct {
	// バックアップID.
	BackupId uuid.UUID `json:"backupId"`
	// バックアップ先.
	BackupDestination string `json:"backupDestination"`
	// バックアップ日時.
	BackupAt time.Time `json:"backupAt"`
	// バックアップ復元日時.
	RestoreAt OptDateTime `json:"restoreAt"`
	// バックアップサイズ.
	Size int64 `json:"size"`
	// バックアップ削除ステータス(0:未削除, 1:削除中, 2:削除完了, 9:削除失敗).
	DeleteStatus OptString `json:"deleteStatus"`
	// バックアップ復元ステータス(0:未復元, 1:復元中, 2:復元完了, 9:復元失敗).
	RestoreStatus OptString `json:"restoreStatus"`
}

// GetBackupId returns the value of BackupId.
func (s *NosqlBackup) GetBackupId() uuid.UUID {
	return s.BackupId
}

// GetBackupDestination returns the value of BackupDestination.
func (s *NosqlBackup) GetBackupDestination() string {
	return s.BackupDestination
}

// GetBackupAt returns the value of BackupAt.
func (s *NosqlBackup) GetBackupAt() time.Time {
	return s.BackupAt
}

// GetRestoreAt returns the value of RestoreAt.
func (s *NosqlBackup) GetRestoreAt() OptDateTime {
	return s.RestoreAt
}

// GetSize returns the value of Size.
func (s *NosqlBackup) GetSize() int64 {
	return s.Size
}

// GetDeleteStatus returns the value of DeleteStatus.
func (s *NosqlBackup) GetDeleteStatus() OptString {
	return s.DeleteStatus
}

// GetRestoreStatus returns the value of RestoreStatus.
func (s *NosqlBackup) GetRestoreStatus() OptString {
	return s.RestoreStatus
}

// SetBackupId sets the value of BackupId.
func (s *NosqlBackup) SetBackupId(val uuid.UUID) {
	s.BackupId = val
}

// SetBackupDestination sets the value of BackupDestination.
func (s *NosqlBackup) SetBackupDestination(val string) {
	s.BackupDestination = val
}

// SetBackupAt sets the value of BackupAt.
func (s *NosqlBackup) SetBackupAt(val time.Time) {
	s.BackupAt = val
}

// SetRestoreAt sets the value of RestoreAt.
func (s *NosqlBackup) SetRestoreAt(val OptDateTime) {
	s.RestoreAt = val
}

// SetSize sets the value of Size.
func (s *NosqlBackup) SetSize(val int64) {
	s.Size = val
}

// SetDeleteStatus sets the value of DeleteStatus.
func (s *NosqlBackup) SetDeleteStatus(val OptString) {
	s.DeleteStatus = val
}

// SetRestoreStatus sets the value of RestoreStatus.
func (s *NosqlBackup) SetRestoreStatus(val OptString) {
	s.RestoreStatus = val
}

// Ref: #/components/schemas/NosqlBackupResponse
type NosqlBackupResponse struct {
	Nosql OptNosqlBackupResponseNosql `json:"nosql"`
	IsOk  OptIsOk                     `json:"is_ok"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlBackupResponse) GetNosql() OptNosqlBackupResponseNosql {
	return s.Nosql
}

// GetIsOk returns the value of IsOk.
func (s *NosqlBackupResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetNosql sets the value of Nosql.
func (s *NosqlBackupResponse) SetNosql(val OptNosqlBackupResponseNosql) {
	s.Nosql = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlBackupResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*NosqlBackupResponse) getBackupByApplianceIDRes() {}

type NosqlBackupResponseNosql struct {
	// バックアップデータリスト.
	Backups []NosqlBackup `json:"backups"`
}

// GetBackups returns the value of Backups.
func (s *NosqlBackupResponseNosql) GetBackups() []NosqlBackup {
	return s.Backups
}

// SetBackups sets the value of Backups.
func (s *NosqlBackupResponseNosql) SetBackups(val []NosqlBackup) {
	s.Backups = val
}

// Ref: #/components/schemas/NosqlCreateRequest
type NosqlCreateRequest struct {
	Appliance NosqlCreateRequestAppliance `json:"Appliance"`
}

// GetAppliance returns the value of Appliance.
func (s *NosqlCreateRequest) GetAppliance() NosqlCreateRequestAppliance {
	return s.Appliance
}

// SetAppliance sets the value of Appliance.
func (s *NosqlCreateRequest) SetAppliance(val NosqlCreateRequestAppliance) {
	s.Appliance = val
}

// Merged schema.
type NosqlCreateRequestAppliance struct {
	// クラス.
	Class OptString `json:"Class"`
	// NoSQLの名前.
	Name string `json:"Name"`
	// NoSQLの説明.
	Description    OptString                                       `json:"Description"`
	Tags           OptNilTags                                      `json:"Tags"`
	ServiceClass   OptServiceClass                                 `json:"ServiceClass"`
	Plan           OptPlan                                         `json:"Plan"`
	Settings       NosqlCreateRequestApplianceSettings             `json:"Settings"`
	Remark         NosqlRemark                                     `json:"Remark"`
	UserInterfaces []NosqlCreateRequestApplianceUserInterfacesItem `json:"UserInterfaces"`
}

// GetClass returns the value of Class.
func (s *NosqlCreateRequestAppliance) GetClass() OptString {
	return s.Class
}

// GetName returns the value of Name.
func (s *NosqlCreateRequestAppliance) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *NosqlCreateRequestAppliance) GetDescription() OptString {
	return s.Description
}

// GetTags returns the value of Tags.
func (s *NosqlCreateRequestAppliance) GetTags() OptNilTags {
	return s.Tags
}

// GetServiceClass returns the value of ServiceClass.
func (s *NosqlCreateRequestAppliance) GetServiceClass() OptServiceClass {
	return s.ServiceClass
}

// GetPlan returns the value of Plan.
func (s *NosqlCreateRequestAppliance) GetPlan() OptPlan {
	return s.Plan
}

// GetSettings returns the value of Settings.
func (s *NosqlCreateRequestAppliance) GetSettings() NosqlCreateRequestApplianceSettings {
	return s.Settings
}

// GetRemark returns the value of Remark.
func (s *NosqlCreateRequestAppliance) GetRemark() NosqlRemark {
	return s.Remark
}

// GetUserInterfaces returns the value of UserInterfaces.
func (s *NosqlCreateRequestAppliance) GetUserInterfaces() []NosqlCreateRequestApplianceUserInterfacesItem {
	return s.UserInterfaces
}

// SetClass sets the value of Class.
func (s *NosqlCreateRequestAppliance) SetClass(val OptString) {
	s.Class = val
}

// SetName sets the value of Name.
func (s *NosqlCreateRequestAppliance) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *NosqlCreateRequestAppliance) SetDescription(val OptString) {
	s.Description = val
}

// SetTags sets the value of Tags.
func (s *NosqlCreateRequestAppliance) SetTags(val OptNilTags) {
	s.Tags = val
}

// SetServiceClass sets the value of ServiceClass.
func (s *NosqlCreateRequestAppliance) SetServiceClass(val OptServiceClass) {
	s.ServiceClass = val
}

// SetPlan sets the value of Plan.
func (s *NosqlCreateRequestAppliance) SetPlan(val OptPlan) {
	s.Plan = val
}

// SetSettings sets the value of Settings.
func (s *NosqlCreateRequestAppliance) SetSettings(val NosqlCreateRequestApplianceSettings) {
	s.Settings = val
}

// SetRemark sets the value of Remark.
func (s *NosqlCreateRequestAppliance) SetRemark(val NosqlRemark) {
	s.Remark = val
}

// SetUserInterfaces sets the value of UserInterfaces.
func (s *NosqlCreateRequestAppliance) SetUserInterfaces(val []NosqlCreateRequestApplianceUserInterfacesItem) {
	s.UserInterfaces = val
}

// Merged schema.
type NosqlCreateRequestApplianceSettings struct {
	// バックアップ情報.
	Backup OptNilNosqlCreateRequestApplianceSettingsBackup `json:"Backup"`
	// 送信元ネットワークアドレス.
	SourceNetwork []string `json:"SourceNetwork"`
	Password      Password `json:"Password"`
	// 予約IPアドレス.
	ReserveIPAddress netip.Addr `json:"ReserveIPAddress"`
}

// GetBackup returns the value of Backup.
func (s *NosqlCreateRequestApplianceSettings) GetBackup() OptNilNosqlCreateRequestApplianceSettingsBackup {
	return s.Backup
}

// GetSourceNetwork returns the value of SourceNetwork.
func (s *NosqlCreateRequestApplianceSettings) GetSourceNetwork() []string {
	return s.SourceNetwork
}

// GetPassword returns the value of Password.
func (s *NosqlCreateRequestApplianceSettings) GetPassword() Password {
	return s.Password
}

// GetReserveIPAddress returns the value of ReserveIPAddress.
func (s *NosqlCreateRequestApplianceSettings) GetReserveIPAddress() netip.Addr {
	return s.ReserveIPAddress
}

// SetBackup sets the value of Backup.
func (s *NosqlCreateRequestApplianceSettings) SetBackup(val OptNilNosqlCreateRequestApplianceSettingsBackup) {
	s.Backup = val
}

// SetSourceNetwork sets the value of SourceNetwork.
func (s *NosqlCreateRequestApplianceSettings) SetSourceNetwork(val []string) {
	s.SourceNetwork = val
}

// SetPassword sets the value of Password.
func (s *NosqlCreateRequestApplianceSettings) SetPassword(val Password) {
	s.Password = val
}

// SetReserveIPAddress sets the value of ReserveIPAddress.
func (s *NosqlCreateRequestApplianceSettings) SetReserveIPAddress(val netip.Addr) {
	s.ReserveIPAddress = val
}

// バックアップ情報.
type NosqlCreateRequestApplianceSettingsBackup struct {
	// バックアップ先（NFS URL形式）.
	Connect string `json:"Connect"`
	// バックアップスケジュール.
	DayOfWeek OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray `json:"DayOfWeek"`
	// バックアップする時間.
	Time OptNilString `json:"Time"`
	// バックアップ数（1から8まで）.
	Rotate OptInt `json:"Rotate"`
}

// GetConnect returns the value of Connect.
func (s *NosqlCreateRequestApplianceSettingsBackup) GetConnect() string {
	return s.Connect
}

// GetDayOfWeek returns the value of DayOfWeek.
func (s *NosqlCreateRequestApplianceSettingsBackup) GetDayOfWeek() OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray {
	return s.DayOfWeek
}

// GetTime returns the value of Time.
func (s *NosqlCreateRequestApplianceSettingsBackup) GetTime() OptNilString {
	return s.Time
}

// GetRotate returns the value of Rotate.
func (s *NosqlCreateRequestApplianceSettingsBackup) GetRotate() OptInt {
	return s.Rotate
}

// SetConnect sets the value of Connect.
func (s *NosqlCreateRequestApplianceSettingsBackup) SetConnect(val string) {
	s.Connect = val
}

// SetDayOfWeek sets the value of DayOfWeek.
func (s *NosqlCreateRequestApplianceSettingsBackup) SetDayOfWeek(val OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray) {
	s.DayOfWeek = val
}

// SetTime sets the value of Time.
func (s *NosqlCreateRequestApplianceSettingsBackup) SetTime(val OptNilString) {
	s.Time = val
}

// SetRotate sets the value of Rotate.
func (s *NosqlCreateRequestApplianceSettingsBackup) SetRotate(val OptInt) {
	s.Rotate = val
}

type NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem string

const (
	NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSun NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem = "sun"
	NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemMon NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem = "mon"
	NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemTue NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem = "tue"
	NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemWed NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem = "wed"
	NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemThu NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem = "thu"
	NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemFri NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem = "fri"
	NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSat NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem = "sat"
)

// AllValues returns all NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem values.
func (NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem) AllValues() []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem {
	return []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem{
		NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSun,
		NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemMon,
		NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemTue,
		NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemWed,
		NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemThu,
		NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemFri,
		NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem) MarshalText() ([]byte, error) {
	switch s {
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSun:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemMon:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemTue:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemWed:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemThu:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemFri:
		return []byte(s), nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem) UnmarshalText(data []byte) error {
	switch NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem(data) {
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSun:
		*s = NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSun
		return nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemMon:
		*s = NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemMon
		return nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemTue:
		*s = NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemTue
		return nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemWed:
		*s = NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemWed
		return nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemThu:
		*s = NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemThu
		return nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemFri:
		*s = NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemFri
		return nil
	case NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSat:
		*s = NosqlCreateRequestApplianceSettingsBackupDayOfWeekItemSat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type NosqlCreateRequestApplianceUserInterfacesItem struct {
	// スイッチ.
	Switch NosqlCreateRequestApplianceUserInterfacesItemSwitch `json:"Switch"`
	// ユーザーIPアドレス1.
	UserIPAddress1 netip.Addr `json:"UserIPAddress1"`
	// ユーザーIPアドレス2.
	UserIPAddress2 OptIPv4 `json:"UserIPAddress2"`
	// ユーザーIPアドレス3.
	UserIPAddress3 OptIPv4                                                    `json:"UserIPAddress3"`
	UserSubnet     OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet `json:"UserSubnet"`
}

// GetSwitch returns the value of Switch.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) GetSwitch() NosqlCreateRequestApplianceUserInterfacesItemSwitch {
	return s.Switch
}

// GetUserIPAddress1 returns the value of UserIPAddress1.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) GetUserIPAddress1() netip.Addr {
	return s.UserIPAddress1
}

// GetUserIPAddress2 returns the value of UserIPAddress2.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) GetUserIPAddress2() OptIPv4 {
	return s.UserIPAddress2
}

// GetUserIPAddress3 returns the value of UserIPAddress3.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) GetUserIPAddress3() OptIPv4 {
	return s.UserIPAddress3
}

// GetUserSubnet returns the value of UserSubnet.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) GetUserSubnet() OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet {
	return s.UserSubnet
}

// SetSwitch sets the value of Switch.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) SetSwitch(val NosqlCreateRequestApplianceUserInterfacesItemSwitch) {
	s.Switch = val
}

// SetUserIPAddress1 sets the value of UserIPAddress1.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) SetUserIPAddress1(val netip.Addr) {
	s.UserIPAddress1 = val
}

// SetUserIPAddress2 sets the value of UserIPAddress2.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) SetUserIPAddress2(val OptIPv4) {
	s.UserIPAddress2 = val
}

// SetUserIPAddress3 sets the value of UserIPAddress3.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) SetUserIPAddress3(val OptIPv4) {
	s.UserIPAddress3 = val
}

// SetUserSubnet sets the value of UserSubnet.
func (s *NosqlCreateRequestApplianceUserInterfacesItem) SetUserSubnet(val OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet) {
	s.UserSubnet = val
}

// スイッチ.
type NosqlCreateRequestApplianceUserInterfacesItemSwitch struct {
	// スイッチID.
	ID string `json:"ID"`
}

// GetID returns the value of ID.
func (s *NosqlCreateRequestApplianceUserInterfacesItemSwitch) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *NosqlCreateRequestApplianceUserInterfacesItemSwitch) SetID(val string) {
	s.ID = val
}

type NosqlCreateRequestApplianceUserInterfacesItemUserSubnet struct {
	// ゲートウェイのアドレス.
	DefaultRoute string `json:"DefaultRoute"`
	// ネットマスク.
	NetworkMaskLen int `json:"NetworkMaskLen"`
}

// GetDefaultRoute returns the value of DefaultRoute.
func (s *NosqlCreateRequestApplianceUserInterfacesItemUserSubnet) GetDefaultRoute() string {
	return s.DefaultRoute
}

// GetNetworkMaskLen returns the value of NetworkMaskLen.
func (s *NosqlCreateRequestApplianceUserInterfacesItemUserSubnet) GetNetworkMaskLen() int {
	return s.NetworkMaskLen
}

// SetDefaultRoute sets the value of DefaultRoute.
func (s *NosqlCreateRequestApplianceUserInterfacesItemUserSubnet) SetDefaultRoute(val string) {
	s.DefaultRoute = val
}

// SetNetworkMaskLen sets the value of NetworkMaskLen.
func (s *NosqlCreateRequestApplianceUserInterfacesItemUserSubnet) SetNetworkMaskLen(val int) {
	s.NetworkMaskLen = val
}

// Ref: #/components/schemas/NosqlCreateResponse
type NosqlCreateResponse struct {
	Appliance NosqlAppliance `json:"Appliance"`
	// クラス.
	Class OptString `json:"Class"`
	// NoSQLの名前.
	Name OptString `json:"Name"`
	// NoSQLの説明.
	Description  OptString                          `json:"Description"`
	Plan         OptPlan                            `json:"Plan"`
	Settings     OptNosqlSettings                   `json:"Settings"`
	Remark       OptNosqlRemark                     `json:"Remark"`
	ID           string                             `json:"ID"`
	Account      OptNosqlCreateResponseAccount      `json:"Account"`
	Tags         OptNilTags                         `json:"Tags"`
	Availability OptInt                             `json:"Availability"`
	ServerCount  OptInt                             `json:"ServerCount"`
	HiddenRemark OptNosqlCreateResponseHiddenRemark `json:"HiddenRemark"`
	Success      OptString                          `json:"Success"`
	IsOk         OptIsOk                            `json:"is_ok"`
}

// GetAppliance returns the value of Appliance.
func (s *NosqlCreateResponse) GetAppliance() NosqlAppliance {
	return s.Appliance
}

// GetClass returns the value of Class.
func (s *NosqlCreateResponse) GetClass() OptString {
	return s.Class
}

// GetName returns the value of Name.
func (s *NosqlCreateResponse) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *NosqlCreateResponse) GetDescription() OptString {
	return s.Description
}

// GetPlan returns the value of Plan.
func (s *NosqlCreateResponse) GetPlan() OptPlan {
	return s.Plan
}

// GetSettings returns the value of Settings.
func (s *NosqlCreateResponse) GetSettings() OptNosqlSettings {
	return s.Settings
}

// GetRemark returns the value of Remark.
func (s *NosqlCreateResponse) GetRemark() OptNosqlRemark {
	return s.Remark
}

// GetID returns the value of ID.
func (s *NosqlCreateResponse) GetID() string {
	return s.ID
}

// GetAccount returns the value of Account.
func (s *NosqlCreateResponse) GetAccount() OptNosqlCreateResponseAccount {
	return s.Account
}

// GetTags returns the value of Tags.
func (s *NosqlCreateResponse) GetTags() OptNilTags {
	return s.Tags
}

// GetAvailability returns the value of Availability.
func (s *NosqlCreateResponse) GetAvailability() OptInt {
	return s.Availability
}

// GetServerCount returns the value of ServerCount.
func (s *NosqlCreateResponse) GetServerCount() OptInt {
	return s.ServerCount
}

// GetHiddenRemark returns the value of HiddenRemark.
func (s *NosqlCreateResponse) GetHiddenRemark() OptNosqlCreateResponseHiddenRemark {
	return s.HiddenRemark
}

// GetSuccess returns the value of Success.
func (s *NosqlCreateResponse) GetSuccess() OptString {
	return s.Success
}

// GetIsOk returns the value of IsOk.
func (s *NosqlCreateResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetAppliance sets the value of Appliance.
func (s *NosqlCreateResponse) SetAppliance(val NosqlAppliance) {
	s.Appliance = val
}

// SetClass sets the value of Class.
func (s *NosqlCreateResponse) SetClass(val OptString) {
	s.Class = val
}

// SetName sets the value of Name.
func (s *NosqlCreateResponse) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *NosqlCreateResponse) SetDescription(val OptString) {
	s.Description = val
}

// SetPlan sets the value of Plan.
func (s *NosqlCreateResponse) SetPlan(val OptPlan) {
	s.Plan = val
}

// SetSettings sets the value of Settings.
func (s *NosqlCreateResponse) SetSettings(val OptNosqlSettings) {
	s.Settings = val
}

// SetRemark sets the value of Remark.
func (s *NosqlCreateResponse) SetRemark(val OptNosqlRemark) {
	s.Remark = val
}

// SetID sets the value of ID.
func (s *NosqlCreateResponse) SetID(val string) {
	s.ID = val
}

// SetAccount sets the value of Account.
func (s *NosqlCreateResponse) SetAccount(val OptNosqlCreateResponseAccount) {
	s.Account = val
}

// SetTags sets the value of Tags.
func (s *NosqlCreateResponse) SetTags(val OptNilTags) {
	s.Tags = val
}

// SetAvailability sets the value of Availability.
func (s *NosqlCreateResponse) SetAvailability(val OptInt) {
	s.Availability = val
}

// SetServerCount sets the value of ServerCount.
func (s *NosqlCreateResponse) SetServerCount(val OptInt) {
	s.ServerCount = val
}

// SetHiddenRemark sets the value of HiddenRemark.
func (s *NosqlCreateResponse) SetHiddenRemark(val OptNosqlCreateResponseHiddenRemark) {
	s.HiddenRemark = val
}

// SetSuccess sets the value of Success.
func (s *NosqlCreateResponse) SetSuccess(val OptString) {
	s.Success = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlCreateResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*NosqlCreateResponse) createDBRes() {}

type NosqlCreateResponseAccount struct {
	ID OptString `json:"ID"`
}

// GetID returns the value of ID.
func (s *NosqlCreateResponseAccount) GetID() OptString {
	return s.ID
}

// SetID sets the value of ID.
func (s *NosqlCreateResponseAccount) SetID(val OptString) {
	s.ID = val
}

type NosqlCreateResponseHiddenRemark struct {
	PlanSpec  OptNosqlCreateResponseHiddenRemarkPlanSpec  `json:"PlanSpec"`
	Encripted OptNosqlCreateResponseHiddenRemarkEncripted `json:"Encripted"`
}

// GetPlanSpec returns the value of PlanSpec.
func (s *NosqlCreateResponseHiddenRemark) GetPlanSpec() OptNosqlCreateResponseHiddenRemarkPlanSpec {
	return s.PlanSpec
}

// GetEncripted returns the value of Encripted.
func (s *NosqlCreateResponseHiddenRemark) GetEncripted() OptNosqlCreateResponseHiddenRemarkEncripted {
	return s.Encripted
}

// SetPlanSpec sets the value of PlanSpec.
func (s *NosqlCreateResponseHiddenRemark) SetPlanSpec(val OptNosqlCreateResponseHiddenRemarkPlanSpec) {
	s.PlanSpec = val
}

// SetEncripted sets the value of Encripted.
func (s *NosqlCreateResponseHiddenRemark) SetEncripted(val OptNosqlCreateResponseHiddenRemarkEncripted) {
	s.Encripted = val
}

type NosqlCreateResponseHiddenRemarkEncripted struct {
	Algorithm   OptString `json:"Algorithm"`
	IV          OptString `json:"IV"`
	MD5         OptString `json:"md5"`
	Associative OptBool   `json:"Associative"`
	Data        OptString `json:"Data"`
}

// GetAlgorithm returns the value of Algorithm.
func (s *NosqlCreateResponseHiddenRemarkEncripted) GetAlgorithm() OptString {
	return s.Algorithm
}

// GetIV returns the value of IV.
func (s *NosqlCreateResponseHiddenRemarkEncripted) GetIV() OptString {
	return s.IV
}

// GetMD5 returns the value of MD5.
func (s *NosqlCreateResponseHiddenRemarkEncripted) GetMD5() OptString {
	return s.MD5
}

// GetAssociative returns the value of Associative.
func (s *NosqlCreateResponseHiddenRemarkEncripted) GetAssociative() OptBool {
	return s.Associative
}

// GetData returns the value of Data.
func (s *NosqlCreateResponseHiddenRemarkEncripted) GetData() OptString {
	return s.Data
}

// SetAlgorithm sets the value of Algorithm.
func (s *NosqlCreateResponseHiddenRemarkEncripted) SetAlgorithm(val OptString) {
	s.Algorithm = val
}

// SetIV sets the value of IV.
func (s *NosqlCreateResponseHiddenRemarkEncripted) SetIV(val OptString) {
	s.IV = val
}

// SetMD5 sets the value of MD5.
func (s *NosqlCreateResponseHiddenRemarkEncripted) SetMD5(val OptString) {
	s.MD5 = val
}

// SetAssociative sets the value of Associative.
func (s *NosqlCreateResponseHiddenRemarkEncripted) SetAssociative(val OptBool) {
	s.Associative = val
}

// SetData sets the value of Data.
func (s *NosqlCreateResponseHiddenRemarkEncripted) SetData(val OptString) {
	s.Data = val
}

type NosqlCreateResponseHiddenRemarkPlanSpec struct {
	Note         OptNosqlCreateResponseHiddenRemarkPlanSpecNote `json:"Note"`
	ServiceClass OptString                                      `json:"ServiceClass"`
}

// GetNote returns the value of Note.
func (s *NosqlCreateResponseHiddenRemarkPlanSpec) GetNote() OptNosqlCreateResponseHiddenRemarkPlanSpecNote {
	return s.Note
}

// GetServiceClass returns the value of ServiceClass.
func (s *NosqlCreateResponseHiddenRemarkPlanSpec) GetServiceClass() OptString {
	return s.ServiceClass
}

// SetNote sets the value of Note.
func (s *NosqlCreateResponseHiddenRemarkPlanSpec) SetNote(val OptNosqlCreateResponseHiddenRemarkPlanSpecNote) {
	s.Note = val
}

// SetServiceClass sets the value of ServiceClass.
func (s *NosqlCreateResponseHiddenRemarkPlanSpec) SetServiceClass(val OptString) {
	s.ServiceClass = val
}

type NosqlCreateResponseHiddenRemarkPlanSpecNote struct {
	ID OptString `json:"ID"`
}

// GetID returns the value of ID.
func (s *NosqlCreateResponseHiddenRemarkPlanSpecNote) GetID() OptString {
	return s.ID
}

// SetID sets the value of ID.
func (s *NosqlCreateResponseHiddenRemarkPlanSpecNote) SetID(val OptString) {
	s.ID = val
}

// Ref: #/components/schemas/NosqlGetParameter
type NosqlGetParameter struct {
	// 設定項目ID.
	SettingItemId string `json:"settingItemId"`
	// 設定項目名.
	SettingItem string `json:"settingItem"`
	// デフォルト値.
	DefaultValue OptString `json:"defaultValue"`
	// 説明.
	Description string `json:"description"`
	// パラメータオプション.
	ParameterOptions []string `json:"parameterOptions"`
	// 設定値.
	SettingValue OptString `json:"settingValue"`
}

// GetSettingItemId returns the value of SettingItemId.
func (s *NosqlGetParameter) GetSettingItemId() string {
	return s.SettingItemId
}

// GetSettingItem returns the value of SettingItem.
func (s *NosqlGetParameter) GetSettingItem() string {
	return s.SettingItem
}

// GetDefaultValue returns the value of DefaultValue.
func (s *NosqlGetParameter) GetDefaultValue() OptString {
	return s.DefaultValue
}

// GetDescription returns the value of Description.
func (s *NosqlGetParameter) GetDescription() string {
	return s.Description
}

// GetParameterOptions returns the value of ParameterOptions.
func (s *NosqlGetParameter) GetParameterOptions() []string {
	return s.ParameterOptions
}

// GetSettingValue returns the value of SettingValue.
func (s *NosqlGetParameter) GetSettingValue() OptString {
	return s.SettingValue
}

// SetSettingItemId sets the value of SettingItemId.
func (s *NosqlGetParameter) SetSettingItemId(val string) {
	s.SettingItemId = val
}

// SetSettingItem sets the value of SettingItem.
func (s *NosqlGetParameter) SetSettingItem(val string) {
	s.SettingItem = val
}

// SetDefaultValue sets the value of DefaultValue.
func (s *NosqlGetParameter) SetDefaultValue(val OptString) {
	s.DefaultValue = val
}

// SetDescription sets the value of Description.
func (s *NosqlGetParameter) SetDescription(val string) {
	s.Description = val
}

// SetParameterOptions sets the value of ParameterOptions.
func (s *NosqlGetParameter) SetParameterOptions(val []string) {
	s.ParameterOptions = val
}

// SetSettingValue sets the value of SettingValue.
func (s *NosqlGetParameter) SetSettingValue(val OptString) {
	s.SettingValue = val
}

// Ref: #/components/schemas/NosqlGetResponse
type NosqlGetResponse struct {
	Appliance OptNosqlAppliance `json:"Appliance"`
	IsOk      OptIsOk           `json:"is_ok"`
}

// GetAppliance returns the value of Appliance.
func (s *NosqlGetResponse) GetAppliance() OptNosqlAppliance {
	return s.Appliance
}

// GetIsOk returns the value of IsOk.
func (s *NosqlGetResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetAppliance sets the value of Appliance.
func (s *NosqlGetResponse) SetAppliance(val OptNosqlAppliance) {
	s.Appliance = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlGetResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*NosqlGetResponse) getDBRes() {}

// Ref: #/components/schemas/NosqlGetVersionResponse
type NosqlGetVersionResponse struct {
	Nosql OptNosqlGetVersionResponseNosql `json:"nosql"`
	// 成功のレスポンス.
	IsOk OptBool `json:"is_ok"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlGetVersionResponse) GetNosql() OptNosqlGetVersionResponseNosql {
	return s.Nosql
}

// GetIsOk returns the value of IsOk.
func (s *NosqlGetVersionResponse) GetIsOk() OptBool {
	return s.IsOk
}

// SetNosql sets the value of Nosql.
func (s *NosqlGetVersionResponse) SetNosql(val OptNosqlGetVersionResponseNosql) {
	s.Nosql = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlGetVersionResponse) SetIsOk(val OptBool) {
	s.IsOk = val
}

func (*NosqlGetVersionResponse) getVersionRes() {}

type NosqlGetVersionResponseNosql struct {
	// 現在のNoSQLのバージョン.
	DatabaseVersion string `json:"DatabaseVersion"`
	// 更新可能なバージョンのリスト.
	UpgradableVersions []NosqlGetVersionResponseNosqlUpgradableVersionsItem `json:"UpgradableVersions"`
}

// GetDatabaseVersion returns the value of DatabaseVersion.
func (s *NosqlGetVersionResponseNosql) GetDatabaseVersion() string {
	return s.DatabaseVersion
}

// GetUpgradableVersions returns the value of UpgradableVersions.
func (s *NosqlGetVersionResponseNosql) GetUpgradableVersions() []NosqlGetVersionResponseNosqlUpgradableVersionsItem {
	return s.UpgradableVersions
}

// SetDatabaseVersion sets the value of DatabaseVersion.
func (s *NosqlGetVersionResponseNosql) SetDatabaseVersion(val string) {
	s.DatabaseVersion = val
}

// SetUpgradableVersions sets the value of UpgradableVersions.
func (s *NosqlGetVersionResponseNosql) SetUpgradableVersions(val []NosqlGetVersionResponseNosqlUpgradableVersionsItem) {
	s.UpgradableVersions = val
}

type NosqlGetVersionResponseNosqlUpgradableVersionsItem struct {
	// 更新可能なバージョン.
	Version string `json:"version"`
}

// GetVersion returns the value of Version.
func (s *NosqlGetVersionResponseNosqlUpgradableVersionsItem) GetVersion() string {
	return s.Version
}

// SetVersion sets the value of Version.
func (s *NosqlGetVersionResponseNosqlUpgradableVersionsItem) SetVersion(val string) {
	s.Version = val
}

// Ref: #/components/schemas/NosqlIsOkResponse
type NosqlIsOkResponse struct {
	Nosql OptNosqlIsOkResponseNosql `json:"Nosql"`
	IsOk  OptIsOk                   `json:"is_ok"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlIsOkResponse) GetNosql() OptNosqlIsOkResponseNosql {
	return s.Nosql
}

// GetIsOk returns the value of IsOk.
func (s *NosqlIsOkResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetNosql sets the value of Nosql.
func (s *NosqlIsOkResponse) SetNosql(val OptNosqlIsOkResponseNosql) {
	s.Nosql = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlIsOkResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*NosqlIsOkResponse) updateConfigDBRes() {}

type NosqlIsOkResponseNosql struct {
	IsOk OptIsOk `json:"is_ok"`
}

// GetIsOk returns the value of IsOk.
func (s *NosqlIsOkResponseNosql) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetIsOk sets the value of IsOk.
func (s *NosqlIsOkResponseNosql) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

// Ref: #/components/schemas/NosqlListResponse
type NosqlListResponse struct {
	From       int              `json:"From"`
	Count      int              `json:"Count"`
	Total      int              `json:"Total"`
	Appliances []NosqlAppliance `json:"Appliances"`
	IsOk       OptIsOk          `json:"is_ok"`
}

// GetFrom returns the value of From.
func (s *NosqlListResponse) GetFrom() int {
	return s.From
}

// GetCount returns the value of Count.
func (s *NosqlListResponse) GetCount() int {
	return s.Count
}

// GetTotal returns the value of Total.
func (s *NosqlListResponse) GetTotal() int {
	return s.Total
}

// GetAppliances returns the value of Appliances.
func (s *NosqlListResponse) GetAppliances() []NosqlAppliance {
	return s.Appliances
}

// GetIsOk returns the value of IsOk.
func (s *NosqlListResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetFrom sets the value of From.
func (s *NosqlListResponse) SetFrom(val int) {
	s.From = val
}

// SetCount sets the value of Count.
func (s *NosqlListResponse) SetCount(val int) {
	s.Count = val
}

// SetTotal sets the value of Total.
func (s *NosqlListResponse) SetTotal(val int) {
	s.Total = val
}

// SetAppliances sets the value of Appliances.
func (s *NosqlListResponse) SetAppliances(val []NosqlAppliance) {
	s.Appliances = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlListResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*NosqlListResponse) listDBRes() {}

// Ref: #/components/schemas/NosqlOkResponse
type NosqlOkResponse struct {
	Nosql OptNosqlOkResponseNosql `json:"nosql"`
	IsOk  OptIsOk                 `json:"is_ok"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlOkResponse) GetNosql() OptNosqlOkResponseNosql {
	return s.Nosql
}

// GetIsOk returns the value of IsOk.
func (s *NosqlOkResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetNosql sets the value of Nosql.
func (s *NosqlOkResponse) SetNosql(val OptNosqlOkResponseNosql) {
	s.Nosql = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlOkResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*NosqlOkResponse) createBackupRes()  {}
func (*NosqlOkResponse) deleteBackupRes()  {}
func (*NosqlOkResponse) restoreBackupRes() {}

type NosqlOkResponseNosql struct {
	IsOk OptIsOk `json:"is_ok"`
}

// GetIsOk returns the value of IsOk.
func (s *NosqlOkResponseNosql) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetIsOk sets the value of IsOk.
func (s *NosqlOkResponseNosql) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

// Ref: #/components/schemas/NosqlPutParameter
type NosqlPutParameter struct {
	// 設定項目ID.
	SettingItemId string `json:"settingItemId"`
	// 設定値.
	SettingValue string `json:"settingValue"`
}

// GetSettingItemId returns the value of SettingItemId.
func (s *NosqlPutParameter) GetSettingItemId() string {
	return s.SettingItemId
}

// GetSettingValue returns the value of SettingValue.
func (s *NosqlPutParameter) GetSettingValue() string {
	return s.SettingValue
}

// SetSettingItemId sets the value of SettingItemId.
func (s *NosqlPutParameter) SetSettingItemId(val string) {
	s.SettingItemId = val
}

// SetSettingValue sets the value of SettingValue.
func (s *NosqlPutParameter) SetSettingValue(val string) {
	s.SettingValue = val
}

// Ref: #/components/schemas/NosqlPutVersionRequest
type NosqlPutVersionRequest struct {
	Nosql NosqlPutVersionRequestNosql `json:"nosql"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlPutVersionRequest) GetNosql() NosqlPutVersionRequestNosql {
	return s.Nosql
}

// SetNosql sets the value of Nosql.
func (s *NosqlPutVersionRequest) SetNosql(val NosqlPutVersionRequestNosql) {
	s.Nosql = val
}

type NosqlPutVersionRequestNosql struct {
	// NoSQLの更新可能なバージョン.
	Version string `json:"version"`
}

// GetVersion returns the value of Version.
func (s *NosqlPutVersionRequestNosql) GetVersion() string {
	return s.Version
}

// SetVersion sets the value of Version.
func (s *NosqlPutVersionRequestNosql) SetVersion(val string) {
	s.Version = val
}

// Ref: #/components/schemas/NosqlPutVersionResponse
type NosqlPutVersionResponse struct {
	Nosql OptNosqlPutVersionResponseNosql `json:"nosql"`
	IsOk  OptIsOk                         `json:"is_ok"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlPutVersionResponse) GetNosql() OptNosqlPutVersionResponseNosql {
	return s.Nosql
}

// GetIsOk returns the value of IsOk.
func (s *NosqlPutVersionResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetNosql sets the value of Nosql.
func (s *NosqlPutVersionResponse) SetNosql(val OptNosqlPutVersionResponseNosql) {
	s.Nosql = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlPutVersionResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*NosqlPutVersionResponse) putVersionRes() {}

type NosqlPutVersionResponseNosql struct {
	// NoSQLの更新を行ったバージョン.
	Version OptString `json:"version"`
}

// GetVersion returns the value of Version.
func (s *NosqlPutVersionResponseNosql) GetVersion() OptString {
	return s.Version
}

// SetVersion sets the value of Version.
func (s *NosqlPutVersionResponseNosql) SetVersion(val OptString) {
	s.Version = val
}

// Ref: #/components/schemas/NosqlRemark
type NosqlRemark struct {
	Nosql   OptNosqlRemarkNosql      `json:"Nosql"`
	Servers []NosqlRemarkServersItem `json:"Servers"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlRemark) GetNosql() OptNosqlRemarkNosql {
	return s.Nosql
}

// GetServers returns the value of Servers.
func (s *NosqlRemark) GetServers() []NosqlRemarkServersItem {
	return s.Servers
}

// SetNosql sets the value of Nosql.
func (s *NosqlRemark) SetNosql(val OptNosqlRemarkNosql) {
	s.Nosql = val
}

// SetServers sets the value of Servers.
func (s *NosqlRemark) SetServers(val []NosqlRemarkServersItem) {
	s.Servers = val
}

type NosqlRemarkNosql struct {
	// データベースに使用するエンジン.
	DatabaseEngine NosqlRemarkNosqlDatabaseEngine `json:"DatabaseEngine"`
	// データベースバージョン.
	DatabaseVersion string `json:"DatabaseVersion"`
	// デフォルトユーザー名.
	DefaultUser string `json:"DefaultUser"`
	// ディスクサイズ(MB).
	DiskSize NosqlRemarkNosqlDiskSize `json:"DiskSize"`
	// メモリ(MB).
	Memory NosqlRemarkNosqlMemory `json:"Memory"`
	// ノード数.
	Nodes int `json:"Nodes"`
	// ポート.
	Port int `json:"Port"`
	// ストレージ.
	Storage NosqlRemarkNosqlStorage `json:"Storage"`
	// 仮想コア.
	Virtualcore NosqlRemarkNosqlVirtualcore `json:"Virtualcore"`
	// ゾーン.
	Zone string `json:"Zone"`
}

// GetDatabaseEngine returns the value of DatabaseEngine.
func (s *NosqlRemarkNosql) GetDatabaseEngine() NosqlRemarkNosqlDatabaseEngine {
	return s.DatabaseEngine
}

// GetDatabaseVersion returns the value of DatabaseVersion.
func (s *NosqlRemarkNosql) GetDatabaseVersion() string {
	return s.DatabaseVersion
}

// GetDefaultUser returns the value of DefaultUser.
func (s *NosqlRemarkNosql) GetDefaultUser() string {
	return s.DefaultUser
}

// GetDiskSize returns the value of DiskSize.
func (s *NosqlRemarkNosql) GetDiskSize() NosqlRemarkNosqlDiskSize {
	return s.DiskSize
}

// GetMemory returns the value of Memory.
func (s *NosqlRemarkNosql) GetMemory() NosqlRemarkNosqlMemory {
	return s.Memory
}

// GetNodes returns the value of Nodes.
func (s *NosqlRemarkNosql) GetNodes() int {
	return s.Nodes
}

// GetPort returns the value of Port.
func (s *NosqlRemarkNosql) GetPort() int {
	return s.Port
}

// GetStorage returns the value of Storage.
func (s *NosqlRemarkNosql) GetStorage() NosqlRemarkNosqlStorage {
	return s.Storage
}

// GetVirtualcore returns the value of Virtualcore.
func (s *NosqlRemarkNosql) GetVirtualcore() NosqlRemarkNosqlVirtualcore {
	return s.Virtualcore
}

// GetZone returns the value of Zone.
func (s *NosqlRemarkNosql) GetZone() string {
	return s.Zone
}

// SetDatabaseEngine sets the value of DatabaseEngine.
func (s *NosqlRemarkNosql) SetDatabaseEngine(val NosqlRemarkNosqlDatabaseEngine) {
	s.DatabaseEngine = val
}

// SetDatabaseVersion sets the value of DatabaseVersion.
func (s *NosqlRemarkNosql) SetDatabaseVersion(val string) {
	s.DatabaseVersion = val
}

// SetDefaultUser sets the value of DefaultUser.
func (s *NosqlRemarkNosql) SetDefaultUser(val string) {
	s.DefaultUser = val
}

// SetDiskSize sets the value of DiskSize.
func (s *NosqlRemarkNosql) SetDiskSize(val NosqlRemarkNosqlDiskSize) {
	s.DiskSize = val
}

// SetMemory sets the value of Memory.
func (s *NosqlRemarkNosql) SetMemory(val NosqlRemarkNosqlMemory) {
	s.Memory = val
}

// SetNodes sets the value of Nodes.
func (s *NosqlRemarkNosql) SetNodes(val int) {
	s.Nodes = val
}

// SetPort sets the value of Port.
func (s *NosqlRemarkNosql) SetPort(val int) {
	s.Port = val
}

// SetStorage sets the value of Storage.
func (s *NosqlRemarkNosql) SetStorage(val NosqlRemarkNosqlStorage) {
	s.Storage = val
}

// SetVirtualcore sets the value of Virtualcore.
func (s *NosqlRemarkNosql) SetVirtualcore(val NosqlRemarkNosqlVirtualcore) {
	s.Virtualcore = val
}

// SetZone sets the value of Zone.
func (s *NosqlRemarkNosql) SetZone(val string) {
	s.Zone = val
}

// データベースに使用するエンジン.
type NosqlRemarkNosqlDatabaseEngine string

const (
	NosqlRemarkNosqlDatabaseEngineCassandra NosqlRemarkNosqlDatabaseEngine = "Cassandra"
)

// AllValues returns all NosqlRemarkNosqlDatabaseEngine values.
func (NosqlRemarkNosqlDatabaseEngine) AllValues() []NosqlRemarkNosqlDatabaseEngine {
	return []NosqlRemarkNosqlDatabaseEngine{
		NosqlRemarkNosqlDatabaseEngineCassandra,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlRemarkNosqlDatabaseEngine) MarshalText() ([]byte, error) {
	switch s {
	case NosqlRemarkNosqlDatabaseEngineCassandra:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlRemarkNosqlDatabaseEngine) UnmarshalText(data []byte) error {
	switch NosqlRemarkNosqlDatabaseEngine(data) {
	case NosqlRemarkNosqlDatabaseEngineCassandra:
		*s = NosqlRemarkNosqlDatabaseEngineCassandra
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ディスクサイズ(MB).
type NosqlRemarkNosqlDiskSize int

const (
	NosqlRemarkNosqlDiskSize102400 NosqlRemarkNosqlDiskSize = 102400
)

// AllValues returns all NosqlRemarkNosqlDiskSize values.
func (NosqlRemarkNosqlDiskSize) AllValues() []NosqlRemarkNosqlDiskSize {
	return []NosqlRemarkNosqlDiskSize{
		NosqlRemarkNosqlDiskSize102400,
	}
}

// メモリ(MB).
type NosqlRemarkNosqlMemory int

const (
	NosqlRemarkNosqlMemory8192 NosqlRemarkNosqlMemory = 8192
)

// AllValues returns all NosqlRemarkNosqlMemory values.
func (NosqlRemarkNosqlMemory) AllValues() []NosqlRemarkNosqlMemory {
	return []NosqlRemarkNosqlMemory{
		NosqlRemarkNosqlMemory8192,
	}
}

// ストレージ.
type NosqlRemarkNosqlStorage string

const (
	NosqlRemarkNosqlStorageSSD NosqlRemarkNosqlStorage = "SSD"
)

// AllValues returns all NosqlRemarkNosqlStorage values.
func (NosqlRemarkNosqlStorage) AllValues() []NosqlRemarkNosqlStorage {
	return []NosqlRemarkNosqlStorage{
		NosqlRemarkNosqlStorageSSD,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlRemarkNosqlStorage) MarshalText() ([]byte, error) {
	switch s {
	case NosqlRemarkNosqlStorageSSD:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlRemarkNosqlStorage) UnmarshalText(data []byte) error {
	switch NosqlRemarkNosqlStorage(data) {
	case NosqlRemarkNosqlStorageSSD:
		*s = NosqlRemarkNosqlStorageSSD
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 仮想コア.
type NosqlRemarkNosqlVirtualcore int

const (
	NosqlRemarkNosqlVirtualcore3 NosqlRemarkNosqlVirtualcore = 3
)

// AllValues returns all NosqlRemarkNosqlVirtualcore values.
func (NosqlRemarkNosqlVirtualcore) AllValues() []NosqlRemarkNosqlVirtualcore {
	return []NosqlRemarkNosqlVirtualcore{
		NosqlRemarkNosqlVirtualcore3,
	}
}

type NosqlRemarkServersItem struct {
	// ユーザIPアドレス
	// ※Node数分指定する.
	UserIPAddress netip.Addr `json:"UserIPAddress"`
}

// GetUserIPAddress returns the value of UserIPAddress.
func (s *NosqlRemarkServersItem) GetUserIPAddress() netip.Addr {
	return s.UserIPAddress
}

// SetUserIPAddress sets the value of UserIPAddress.
func (s *NosqlRemarkServersItem) SetUserIPAddress(val netip.Addr) {
	s.UserIPAddress = val
}

// Ref: #/components/schemas/NosqlSettings
type NosqlSettings struct {
	// バックアップ情報.
	Backup OptNilNosqlSettingsBackup `json:"Backup"`
	// 送信元ネットワークアドレス.
	SourceNetwork []string `json:"SourceNetwork"`
}

// GetBackup returns the value of Backup.
func (s *NosqlSettings) GetBackup() OptNilNosqlSettingsBackup {
	return s.Backup
}

// GetSourceNetwork returns the value of SourceNetwork.
func (s *NosqlSettings) GetSourceNetwork() []string {
	return s.SourceNetwork
}

// SetBackup sets the value of Backup.
func (s *NosqlSettings) SetBackup(val OptNilNosqlSettingsBackup) {
	s.Backup = val
}

// SetSourceNetwork sets the value of SourceNetwork.
func (s *NosqlSettings) SetSourceNetwork(val []string) {
	s.SourceNetwork = val
}

// バックアップ情報.
type NosqlSettingsBackup struct {
	// バックアップ先（NFS URL形式）.
	Connect string `json:"Connect"`
	// バックアップスケジュール.
	DayOfWeek OptNilNosqlSettingsBackupDayOfWeekItemArray `json:"DayOfWeek"`
	// バックアップする時間.
	Time OptNilString `json:"Time"`
	// バックアップ数（1から8まで）.
	Rotate OptInt `json:"Rotate"`
}

// GetConnect returns the value of Connect.
func (s *NosqlSettingsBackup) GetConnect() string {
	return s.Connect
}

// GetDayOfWeek returns the value of DayOfWeek.
func (s *NosqlSettingsBackup) GetDayOfWeek() OptNilNosqlSettingsBackupDayOfWeekItemArray {
	return s.DayOfWeek
}

// GetTime returns the value of Time.
func (s *NosqlSettingsBackup) GetTime() OptNilString {
	return s.Time
}

// GetRotate returns the value of Rotate.
func (s *NosqlSettingsBackup) GetRotate() OptInt {
	return s.Rotate
}

// SetConnect sets the value of Connect.
func (s *NosqlSettingsBackup) SetConnect(val string) {
	s.Connect = val
}

// SetDayOfWeek sets the value of DayOfWeek.
func (s *NosqlSettingsBackup) SetDayOfWeek(val OptNilNosqlSettingsBackupDayOfWeekItemArray) {
	s.DayOfWeek = val
}

// SetTime sets the value of Time.
func (s *NosqlSettingsBackup) SetTime(val OptNilString) {
	s.Time = val
}

// SetRotate sets the value of Rotate.
func (s *NosqlSettingsBackup) SetRotate(val OptInt) {
	s.Rotate = val
}

type NosqlSettingsBackupDayOfWeekItem string

const (
	NosqlSettingsBackupDayOfWeekItemSun NosqlSettingsBackupDayOfWeekItem = "sun"
	NosqlSettingsBackupDayOfWeekItemMon NosqlSettingsBackupDayOfWeekItem = "mon"
	NosqlSettingsBackupDayOfWeekItemTue NosqlSettingsBackupDayOfWeekItem = "tue"
	NosqlSettingsBackupDayOfWeekItemWed NosqlSettingsBackupDayOfWeekItem = "wed"
	NosqlSettingsBackupDayOfWeekItemThu NosqlSettingsBackupDayOfWeekItem = "thu"
	NosqlSettingsBackupDayOfWeekItemFri NosqlSettingsBackupDayOfWeekItem = "fri"
	NosqlSettingsBackupDayOfWeekItemSat NosqlSettingsBackupDayOfWeekItem = "sat"
)

// AllValues returns all NosqlSettingsBackupDayOfWeekItem values.
func (NosqlSettingsBackupDayOfWeekItem) AllValues() []NosqlSettingsBackupDayOfWeekItem {
	return []NosqlSettingsBackupDayOfWeekItem{
		NosqlSettingsBackupDayOfWeekItemSun,
		NosqlSettingsBackupDayOfWeekItemMon,
		NosqlSettingsBackupDayOfWeekItemTue,
		NosqlSettingsBackupDayOfWeekItemWed,
		NosqlSettingsBackupDayOfWeekItemThu,
		NosqlSettingsBackupDayOfWeekItemFri,
		NosqlSettingsBackupDayOfWeekItemSat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlSettingsBackupDayOfWeekItem) MarshalText() ([]byte, error) {
	switch s {
	case NosqlSettingsBackupDayOfWeekItemSun:
		return []byte(s), nil
	case NosqlSettingsBackupDayOfWeekItemMon:
		return []byte(s), nil
	case NosqlSettingsBackupDayOfWeekItemTue:
		return []byte(s), nil
	case NosqlSettingsBackupDayOfWeekItemWed:
		return []byte(s), nil
	case NosqlSettingsBackupDayOfWeekItemThu:
		return []byte(s), nil
	case NosqlSettingsBackupDayOfWeekItemFri:
		return []byte(s), nil
	case NosqlSettingsBackupDayOfWeekItemSat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlSettingsBackupDayOfWeekItem) UnmarshalText(data []byte) error {
	switch NosqlSettingsBackupDayOfWeekItem(data) {
	case NosqlSettingsBackupDayOfWeekItemSun:
		*s = NosqlSettingsBackupDayOfWeekItemSun
		return nil
	case NosqlSettingsBackupDayOfWeekItemMon:
		*s = NosqlSettingsBackupDayOfWeekItemMon
		return nil
	case NosqlSettingsBackupDayOfWeekItemTue:
		*s = NosqlSettingsBackupDayOfWeekItemTue
		return nil
	case NosqlSettingsBackupDayOfWeekItemWed:
		*s = NosqlSettingsBackupDayOfWeekItemWed
		return nil
	case NosqlSettingsBackupDayOfWeekItemThu:
		*s = NosqlSettingsBackupDayOfWeekItemThu
		return nil
	case NosqlSettingsBackupDayOfWeekItemFri:
		*s = NosqlSettingsBackupDayOfWeekItemFri
		return nil
	case NosqlSettingsBackupDayOfWeekItemSat:
		*s = NosqlSettingsBackupDayOfWeekItemSat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/NosqlStatusResponse
type NosqlStatusResponse struct {
	Appliance NosqlStatusResponseAppliance `json:"Appliance"`
	IsOk      OptIsOk                      `json:"is_ok"`
}

// GetAppliance returns the value of Appliance.
func (s *NosqlStatusResponse) GetAppliance() NosqlStatusResponseAppliance {
	return s.Appliance
}

// GetIsOk returns the value of IsOk.
func (s *NosqlStatusResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetAppliance sets the value of Appliance.
func (s *NosqlStatusResponse) SetAppliance(val NosqlStatusResponseAppliance) {
	s.Appliance = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlStatusResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*NosqlStatusResponse) confirmStatusDBRes() {}

type NosqlStatusResponseAppliance struct {
	ID string `json:"ID"`
	// NoSQLのステータスレスポンス.
	SettingsResponse NosqlStatusResponseApplianceSettingsResponse `json:"SettingsResponse"`
}

// GetID returns the value of ID.
func (s *NosqlStatusResponseAppliance) GetID() string {
	return s.ID
}

// GetSettingsResponse returns the value of SettingsResponse.
func (s *NosqlStatusResponseAppliance) GetSettingsResponse() NosqlStatusResponseApplianceSettingsResponse {
	return s.SettingsResponse
}

// SetID sets the value of ID.
func (s *NosqlStatusResponseAppliance) SetID(val string) {
	s.ID = val
}

// SetSettingsResponse sets the value of SettingsResponse.
func (s *NosqlStatusResponseAppliance) SetSettingsResponse(val NosqlStatusResponseApplianceSettingsResponse) {
	s.SettingsResponse = val
}

// NoSQLのステータスレスポンス.
type NosqlStatusResponseApplianceSettingsResponse struct {
	Nosql OptNosqlStatusResponseApplianceSettingsResponseNosql `json:"Nosql"`
}

// GetNosql returns the value of Nosql.
func (s *NosqlStatusResponseApplianceSettingsResponse) GetNosql() OptNosqlStatusResponseApplianceSettingsResponseNosql {
	return s.Nosql
}

// SetNosql sets the value of Nosql.
func (s *NosqlStatusResponseApplianceSettingsResponse) SetNosql(val OptNosqlStatusResponseApplianceSettingsResponseNosql) {
	s.Nosql = val
}

type NosqlStatusResponseApplianceSettingsResponseNosql struct {
	// 有効状態(true:有効, false:無効).
	Enabled bool `json:"Enabled"`
	// NoSQLの起動ステータス(preparing:準備中, up:起動, down:停止, error:エラー).
	BootStatus string `json:"BootStatus"`
	// NoSQLのバージョン.
	DatabaseVersion string `json:"DatabaseVersion"`
	// NoSQLの更新可能な最新のバージョン.
	UpgradeVersion OptString `json:"UpgradeVersion"`
	// ジョブ情報.
	Jobs []NosqlStatusResponseApplianceSettingsResponseNosqlJobsItem `json:"Jobs"`
}

// GetEnabled returns the value of Enabled.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) GetEnabled() bool {
	return s.Enabled
}

// GetBootStatus returns the value of BootStatus.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) GetBootStatus() string {
	return s.BootStatus
}

// GetDatabaseVersion returns the value of DatabaseVersion.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) GetDatabaseVersion() string {
	return s.DatabaseVersion
}

// GetUpgradeVersion returns the value of UpgradeVersion.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) GetUpgradeVersion() OptString {
	return s.UpgradeVersion
}

// GetJobs returns the value of Jobs.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) GetJobs() []NosqlStatusResponseApplianceSettingsResponseNosqlJobsItem {
	return s.Jobs
}

// SetEnabled sets the value of Enabled.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) SetEnabled(val bool) {
	s.Enabled = val
}

// SetBootStatus sets the value of BootStatus.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) SetBootStatus(val string) {
	s.BootStatus = val
}

// SetDatabaseVersion sets the value of DatabaseVersion.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) SetDatabaseVersion(val string) {
	s.DatabaseVersion = val
}

// SetUpgradeVersion sets the value of UpgradeVersion.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) SetUpgradeVersion(val OptString) {
	s.UpgradeVersion = val
}

// SetJobs sets the value of Jobs.
func (s *NosqlStatusResponseApplianceSettingsResponseNosql) SetJobs(val []NosqlStatusResponseApplianceSettingsResponseNosqlJobsItem) {
	s.Jobs = val
}

type NosqlStatusResponseApplianceSettingsResponseNosqlJobsItem struct {
	// ジョブタイプ.
	JobType OptString `json:"JobType"`
	// ジョブステータス.
	JobStatus OptString `json:"JobStatus"`
}

// GetJobType returns the value of JobType.
func (s *NosqlStatusResponseApplianceSettingsResponseNosqlJobsItem) GetJobType() OptString {
	return s.JobType
}

// GetJobStatus returns the value of JobStatus.
func (s *NosqlStatusResponseApplianceSettingsResponseNosqlJobsItem) GetJobStatus() OptString {
	return s.JobStatus
}

// SetJobType sets the value of JobType.
func (s *NosqlStatusResponseApplianceSettingsResponseNosqlJobsItem) SetJobType(val OptString) {
	s.JobType = val
}

// SetJobStatus sets the value of JobStatus.
func (s *NosqlStatusResponseApplianceSettingsResponseNosqlJobsItem) SetJobStatus(val OptString) {
	s.JobStatus = val
}

// Ref: #/components/schemas/NosqlSuccessResponse
type NosqlSuccessResponse struct {
	Appliance OptNosqlAppliance `json:"Appliance"`
	Success   OptSuccess        `json:"Success"`
	IsOk      OptIsOk           `json:"is_ok"`
}

// GetAppliance returns the value of Appliance.
func (s *NosqlSuccessResponse) GetAppliance() OptNosqlAppliance {
	return s.Appliance
}

// GetSuccess returns the value of Success.
func (s *NosqlSuccessResponse) GetSuccess() OptSuccess {
	return s.Success
}

// GetIsOk returns the value of IsOk.
func (s *NosqlSuccessResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetAppliance sets the value of Appliance.
func (s *NosqlSuccessResponse) SetAppliance(val OptNosqlAppliance) {
	s.Appliance = val
}

// SetSuccess sets the value of Success.
func (s *NosqlSuccessResponse) SetSuccess(val OptSuccess) {
	s.Success = val
}

// SetIsOk sets the value of IsOk.
func (s *NosqlSuccessResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*NosqlSuccessResponse) deleteDBRes() {}
func (*NosqlSuccessResponse) updateDBRes() {}

// Ref: #/components/schemas/NosqlUpdateRequest
type NosqlUpdateRequest struct {
	Appliance NosqlUpdateRequestAppliance `json:"Appliance"`
}

// GetAppliance returns the value of Appliance.
func (s *NosqlUpdateRequest) GetAppliance() NosqlUpdateRequestAppliance {
	return s.Appliance
}

// SetAppliance sets the value of Appliance.
func (s *NosqlUpdateRequest) SetAppliance(val NosqlUpdateRequestAppliance) {
	s.Appliance = val
}

// Merged schema.
type NosqlUpdateRequestAppliance struct {
	// クラス.
	Class OptString `json:"Class"`
	// NoSQLの名前.
	Name OptString `json:"Name"`
	// NoSQLの説明.
	Description OptString  `json:"Description"`
	Tags        OptNilTags `json:"Tags"`
	// アプライアンスID.
	ID       string                              `json:"ID"`
	Settings NosqlUpdateRequestApplianceSettings `json:"Settings"`
}

// GetClass returns the value of Class.
func (s *NosqlUpdateRequestAppliance) GetClass() OptString {
	return s.Class
}

// GetName returns the value of Name.
func (s *NosqlUpdateRequestAppliance) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *NosqlUpdateRequestAppliance) GetDescription() OptString {
	return s.Description
}

// GetTags returns the value of Tags.
func (s *NosqlUpdateRequestAppliance) GetTags() OptNilTags {
	return s.Tags
}

// GetID returns the value of ID.
func (s *NosqlUpdateRequestAppliance) GetID() string {
	return s.ID
}

// GetSettings returns the value of Settings.
func (s *NosqlUpdateRequestAppliance) GetSettings() NosqlUpdateRequestApplianceSettings {
	return s.Settings
}

// SetClass sets the value of Class.
func (s *NosqlUpdateRequestAppliance) SetClass(val OptString) {
	s.Class = val
}

// SetName sets the value of Name.
func (s *NosqlUpdateRequestAppliance) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *NosqlUpdateRequestAppliance) SetDescription(val OptString) {
	s.Description = val
}

// SetTags sets the value of Tags.
func (s *NosqlUpdateRequestAppliance) SetTags(val OptNilTags) {
	s.Tags = val
}

// SetID sets the value of ID.
func (s *NosqlUpdateRequestAppliance) SetID(val string) {
	s.ID = val
}

// SetSettings sets the value of Settings.
func (s *NosqlUpdateRequestAppliance) SetSettings(val NosqlUpdateRequestApplianceSettings) {
	s.Settings = val
}

// Merged schema.
type NosqlUpdateRequestApplianceSettings struct {
	// バックアップ情報.
	Backup OptNilNosqlUpdateRequestApplianceSettingsBackup `json:"Backup"`
	// 送信元ネットワークアドレス.
	SourceNetwork []string    `json:"SourceNetwork"`
	Password      OptPassword `json:"Password:"`
}

// GetBackup returns the value of Backup.
func (s *NosqlUpdateRequestApplianceSettings) GetBackup() OptNilNosqlUpdateRequestApplianceSettingsBackup {
	return s.Backup
}

// GetSourceNetwork returns the value of SourceNetwork.
func (s *NosqlUpdateRequestApplianceSettings) GetSourceNetwork() []string {
	return s.SourceNetwork
}

// GetPassword returns the value of Password.
func (s *NosqlUpdateRequestApplianceSettings) GetPassword() OptPassword {
	return s.Password
}

// SetBackup sets the value of Backup.
func (s *NosqlUpdateRequestApplianceSettings) SetBackup(val OptNilNosqlUpdateRequestApplianceSettingsBackup) {
	s.Backup = val
}

// SetSourceNetwork sets the value of SourceNetwork.
func (s *NosqlUpdateRequestApplianceSettings) SetSourceNetwork(val []string) {
	s.SourceNetwork = val
}

// SetPassword sets the value of Password.
func (s *NosqlUpdateRequestApplianceSettings) SetPassword(val OptPassword) {
	s.Password = val
}

// バックアップ情報.
type NosqlUpdateRequestApplianceSettingsBackup struct {
	// バックアップ先（NFS URL形式）.
	Connect string `json:"Connect"`
	// バックアップスケジュール.
	DayOfWeek OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray `json:"DayOfWeek"`
	// バックアップする時間.
	Time OptNilString `json:"Time"`
	// バックアップ数（1から8まで）.
	Rotate OptInt `json:"Rotate"`
}

// GetConnect returns the value of Connect.
func (s *NosqlUpdateRequestApplianceSettingsBackup) GetConnect() string {
	return s.Connect
}

// GetDayOfWeek returns the value of DayOfWeek.
func (s *NosqlUpdateRequestApplianceSettingsBackup) GetDayOfWeek() OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray {
	return s.DayOfWeek
}

// GetTime returns the value of Time.
func (s *NosqlUpdateRequestApplianceSettingsBackup) GetTime() OptNilString {
	return s.Time
}

// GetRotate returns the value of Rotate.
func (s *NosqlUpdateRequestApplianceSettingsBackup) GetRotate() OptInt {
	return s.Rotate
}

// SetConnect sets the value of Connect.
func (s *NosqlUpdateRequestApplianceSettingsBackup) SetConnect(val string) {
	s.Connect = val
}

// SetDayOfWeek sets the value of DayOfWeek.
func (s *NosqlUpdateRequestApplianceSettingsBackup) SetDayOfWeek(val OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray) {
	s.DayOfWeek = val
}

// SetTime sets the value of Time.
func (s *NosqlUpdateRequestApplianceSettingsBackup) SetTime(val OptNilString) {
	s.Time = val
}

// SetRotate sets the value of Rotate.
func (s *NosqlUpdateRequestApplianceSettingsBackup) SetRotate(val OptInt) {
	s.Rotate = val
}

type NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem string

const (
	NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSun NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem = "sun"
	NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemMon NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem = "mon"
	NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemTue NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem = "tue"
	NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemWed NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem = "wed"
	NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemThu NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem = "thu"
	NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemFri NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem = "fri"
	NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSat NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem = "sat"
)

// AllValues returns all NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem values.
func (NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem) AllValues() []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem {
	return []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem{
		NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSun,
		NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemMon,
		NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemTue,
		NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemWed,
		NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemThu,
		NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemFri,
		NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem) MarshalText() ([]byte, error) {
	switch s {
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSun:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemMon:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemTue:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemWed:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemThu:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemFri:
		return []byte(s), nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem) UnmarshalText(data []byte) error {
	switch NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem(data) {
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSun:
		*s = NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSun
		return nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemMon:
		*s = NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemMon
		return nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemTue:
		*s = NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemTue
		return nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemWed:
		*s = NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemWed
		return nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemThu:
		*s = NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemThu
		return nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemFri:
		*s = NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemFri
		return nil
	case NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSat:
		*s = NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemSat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// エラーレスポンス.
type NotFoundResponse struct {
	// エラーのレスポンス(true:エラー).
	IsFatal OptBool `json:"is_fatal"`
	// 追跡コード.
	Serial OptString `json:"serial"`
	// ステータス.
	Status OptString `json:"status"`
	// エラーコード.
	ErrorCode OptString `json:"error_code"`
	// エラーメッセージ.
	ErrorMsg OptString `json:"error_msg"`
}

// GetIsFatal returns the value of IsFatal.
func (s *NotFoundResponse) GetIsFatal() OptBool {
	return s.IsFatal
}

// GetSerial returns the value of Serial.
func (s *NotFoundResponse) GetSerial() OptString {
	return s.Serial
}

// GetStatus returns the value of Status.
func (s *NotFoundResponse) GetStatus() OptString {
	return s.Status
}

// GetErrorCode returns the value of ErrorCode.
func (s *NotFoundResponse) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetErrorMsg returns the value of ErrorMsg.
func (s *NotFoundResponse) GetErrorMsg() OptString {
	return s.ErrorMsg
}

// SetIsFatal sets the value of IsFatal.
func (s *NotFoundResponse) SetIsFatal(val OptBool) {
	s.IsFatal = val
}

// SetSerial sets the value of Serial.
func (s *NotFoundResponse) SetSerial(val OptString) {
	s.Serial = val
}

// SetStatus sets the value of Status.
func (s *NotFoundResponse) SetStatus(val OptString) {
	s.Status = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *NotFoundResponse) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetErrorMsg sets the value of ErrorMsg.
func (s *NotFoundResponse) SetErrorMsg(val OptString) {
	s.ErrorMsg = val
}

func (*NotFoundResponse) createBackupRes()         {}
func (*NotFoundResponse) deleteAppliancePowerRes() {}
func (*NotFoundResponse) deleteBackupRes()         {}
func (*NotFoundResponse) getDBRes()                {}
func (*NotFoundResponse) putAppliancePowerRes()    {}
func (*NotFoundResponse) restoreBackupRes()        {}
func (*NotFoundResponse) updateDBRes()             {}

// NewOptAvailability returns new OptAvailability with value set to v.
func NewOptAvailability(v Availability) OptAvailability {
	return OptAvailability{
		Value: v,
		Set:   true,
	}
}

// OptAvailability is optional Availability.
type OptAvailability struct {
	Value Availability
	Set   bool
}

// IsSet returns true if OptAvailability was set.
func (o OptAvailability) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAvailability) Reset() {
	var v Availability
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAvailability) SetTo(v Availability) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAvailability) Get() (v Availability, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAvailability) Or(d Availability) Availability {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetParameterResponseNosql returns new OptGetParameterResponseNosql with value set to v.
func NewOptGetParameterResponseNosql(v GetParameterResponseNosql) OptGetParameterResponseNosql {
	return OptGetParameterResponseNosql{
		Value: v,
		Set:   true,
	}
}

// OptGetParameterResponseNosql is optional GetParameterResponseNosql.
type OptGetParameterResponseNosql struct {
	Value GetParameterResponseNosql
	Set   bool
}

// IsSet returns true if OptGetParameterResponseNosql was set.
func (o OptGetParameterResponseNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetParameterResponseNosql) Reset() {
	var v GetParameterResponseNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetParameterResponseNosql) SetTo(v GetParameterResponseNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetParameterResponseNosql) Get() (v GetParameterResponseNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetParameterResponseNosql) Or(d GetParameterResponseNosql) GetParameterResponseNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIPv4 returns new OptIPv4 with value set to v.
func NewOptIPv4(v netip.Addr) OptIPv4 {
	return OptIPv4{
		Value: v,
		Set:   true,
	}
}

// OptIPv4 is optional netip.Addr.
type OptIPv4 struct {
	Value netip.Addr
	Set   bool
}

// IsSet returns true if OptIPv4 was set.
func (o OptIPv4) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIPv4) Reset() {
	var v netip.Addr
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIPv4) SetTo(v netip.Addr) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIPv4) Get() (v netip.Addr, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIPv4) Or(d netip.Addr) netip.Addr {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstance returns new OptInstance with value set to v.
func NewOptInstance(v Instance) OptInstance {
	return OptInstance{
		Value: v,
		Set:   true,
	}
}

// OptInstance is optional Instance.
type OptInstance struct {
	Value Instance
	Set   bool
}

// IsSet returns true if OptInstance was set.
func (o OptInstance) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstance) Reset() {
	var v Instance
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstance) SetTo(v Instance) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstance) Get() (v Instance, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstance) Or(d Instance) Instance {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIsOk returns new OptIsOk with value set to v.
func NewOptIsOk(v IsOk) OptIsOk {
	return OptIsOk{
		Value: v,
		Set:   true,
	}
}

// OptIsOk is optional IsOk.
type OptIsOk struct {
	Value IsOk
	Set   bool
}

// IsSet returns true if OptIsOk was set.
func (o OptIsOk) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIsOk) Reset() {
	var v IsOk
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIsOk) SetTo(v IsOk) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIsOk) Get() (v IsOk, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIsOk) Or(d IsOk) IsOk {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInstanceHost returns new OptNilInstanceHost with value set to v.
func NewOptNilInstanceHost(v InstanceHost) OptNilInstanceHost {
	return OptNilInstanceHost{
		Value: v,
		Set:   true,
	}
}

// OptNilInstanceHost is optional nullable InstanceHost.
type OptNilInstanceHost struct {
	Value InstanceHost
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInstanceHost was set.
func (o OptNilInstanceHost) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInstanceHost) Reset() {
	var v InstanceHost
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInstanceHost) SetTo(v InstanceHost) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilInstanceHost) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilInstanceHost) SetToNull() {
	o.Set = true
	o.Null = true
	var v InstanceHost
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInstanceHost) Get() (v InstanceHost, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInstanceHost) Or(d InstanceHost) InstanceHost {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlApplianceDisk returns new OptNilNosqlApplianceDisk with value set to v.
func NewOptNilNosqlApplianceDisk(v NosqlApplianceDisk) OptNilNosqlApplianceDisk {
	return OptNilNosqlApplianceDisk{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlApplianceDisk is optional nullable NosqlApplianceDisk.
type OptNilNosqlApplianceDisk struct {
	Value NosqlApplianceDisk
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlApplianceDisk was set.
func (o OptNilNosqlApplianceDisk) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlApplianceDisk) Reset() {
	var v NosqlApplianceDisk
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlApplianceDisk) SetTo(v NosqlApplianceDisk) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlApplianceDisk) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNosqlApplianceDisk) SetToNull() {
	o.Set = true
	o.Null = true
	var v NosqlApplianceDisk
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlApplianceDisk) Get() (v NosqlApplianceDisk, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlApplianceDisk) Or(d NosqlApplianceDisk) NosqlApplianceDisk {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlApplianceInterfacesItemSwitchSubnet returns new OptNilNosqlApplianceInterfacesItemSwitchSubnet with value set to v.
func NewOptNilNosqlApplianceInterfacesItemSwitchSubnet(v NosqlApplianceInterfacesItemSwitchSubnet) OptNilNosqlApplianceInterfacesItemSwitchSubnet {
	return OptNilNosqlApplianceInterfacesItemSwitchSubnet{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlApplianceInterfacesItemSwitchSubnet is optional nullable NosqlApplianceInterfacesItemSwitchSubnet.
type OptNilNosqlApplianceInterfacesItemSwitchSubnet struct {
	Value NosqlApplianceInterfacesItemSwitchSubnet
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlApplianceInterfacesItemSwitchSubnet was set.
func (o OptNilNosqlApplianceInterfacesItemSwitchSubnet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlApplianceInterfacesItemSwitchSubnet) Reset() {
	var v NosqlApplianceInterfacesItemSwitchSubnet
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlApplianceInterfacesItemSwitchSubnet) SetTo(v NosqlApplianceInterfacesItemSwitchSubnet) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlApplianceInterfacesItemSwitchSubnet) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNosqlApplianceInterfacesItemSwitchSubnet) SetToNull() {
	o.Set = true
	o.Null = true
	var v NosqlApplianceInterfacesItemSwitchSubnet
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlApplianceInterfacesItemSwitchSubnet) Get() (v NosqlApplianceInterfacesItemSwitchSubnet, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlApplianceInterfacesItemSwitchSubnet) Or(d NosqlApplianceInterfacesItemSwitchSubnet) NosqlApplianceInterfacesItemSwitchSubnet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlCreateRequestApplianceSettingsBackup returns new OptNilNosqlCreateRequestApplianceSettingsBackup with value set to v.
func NewOptNilNosqlCreateRequestApplianceSettingsBackup(v NosqlCreateRequestApplianceSettingsBackup) OptNilNosqlCreateRequestApplianceSettingsBackup {
	return OptNilNosqlCreateRequestApplianceSettingsBackup{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlCreateRequestApplianceSettingsBackup is optional nullable NosqlCreateRequestApplianceSettingsBackup.
type OptNilNosqlCreateRequestApplianceSettingsBackup struct {
	Value NosqlCreateRequestApplianceSettingsBackup
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlCreateRequestApplianceSettingsBackup was set.
func (o OptNilNosqlCreateRequestApplianceSettingsBackup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlCreateRequestApplianceSettingsBackup) Reset() {
	var v NosqlCreateRequestApplianceSettingsBackup
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlCreateRequestApplianceSettingsBackup) SetTo(v NosqlCreateRequestApplianceSettingsBackup) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlCreateRequestApplianceSettingsBackup) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNosqlCreateRequestApplianceSettingsBackup) SetToNull() {
	o.Set = true
	o.Null = true
	var v NosqlCreateRequestApplianceSettingsBackup
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlCreateRequestApplianceSettingsBackup) Get() (v NosqlCreateRequestApplianceSettingsBackup, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlCreateRequestApplianceSettingsBackup) Or(d NosqlCreateRequestApplianceSettingsBackup) NosqlCreateRequestApplianceSettingsBackup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray returns new OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray with value set to v.
func NewOptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray(v []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem) OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray {
	return OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray is optional nullable []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem.
type OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray struct {
	Value []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray was set.
func (o OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray) Reset() {
	var v []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray) SetTo(v []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray) IsNull() bool {
	return o.Null
}

// SetToNull sets value to null.
func (o *OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray) Get() (v []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlCreateRequestApplianceSettingsBackupDayOfWeekItemArray) Or(d []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem) []NosqlCreateRequestApplianceSettingsBackupDayOfWeekItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlSettingsBackup returns new OptNilNosqlSettingsBackup with value set to v.
func NewOptNilNosqlSettingsBackup(v NosqlSettingsBackup) OptNilNosqlSettingsBackup {
	return OptNilNosqlSettingsBackup{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlSettingsBackup is optional nullable NosqlSettingsBackup.
type OptNilNosqlSettingsBackup struct {
	Value NosqlSettingsBackup
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlSettingsBackup was set.
func (o OptNilNosqlSettingsBackup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlSettingsBackup) Reset() {
	var v NosqlSettingsBackup
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlSettingsBackup) SetTo(v NosqlSettingsBackup) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlSettingsBackup) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNosqlSettingsBackup) SetToNull() {
	o.Set = true
	o.Null = true
	var v NosqlSettingsBackup
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlSettingsBackup) Get() (v NosqlSettingsBackup, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlSettingsBackup) Or(d NosqlSettingsBackup) NosqlSettingsBackup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlSettingsBackupDayOfWeekItemArray returns new OptNilNosqlSettingsBackupDayOfWeekItemArray with value set to v.
func NewOptNilNosqlSettingsBackupDayOfWeekItemArray(v []NosqlSettingsBackupDayOfWeekItem) OptNilNosqlSettingsBackupDayOfWeekItemArray {
	return OptNilNosqlSettingsBackupDayOfWeekItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlSettingsBackupDayOfWeekItemArray is optional nullable []NosqlSettingsBackupDayOfWeekItem.
type OptNilNosqlSettingsBackupDayOfWeekItemArray struct {
	Value []NosqlSettingsBackupDayOfWeekItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlSettingsBackupDayOfWeekItemArray was set.
func (o OptNilNosqlSettingsBackupDayOfWeekItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlSettingsBackupDayOfWeekItemArray) Reset() {
	var v []NosqlSettingsBackupDayOfWeekItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlSettingsBackupDayOfWeekItemArray) SetTo(v []NosqlSettingsBackupDayOfWeekItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlSettingsBackupDayOfWeekItemArray) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNosqlSettingsBackupDayOfWeekItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []NosqlSettingsBackupDayOfWeekItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlSettingsBackupDayOfWeekItemArray) Get() (v []NosqlSettingsBackupDayOfWeekItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlSettingsBackupDayOfWeekItemArray) Or(d []NosqlSettingsBackupDayOfWeekItem) []NosqlSettingsBackupDayOfWeekItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlUpdateRequestApplianceSettingsBackup returns new OptNilNosqlUpdateRequestApplianceSettingsBackup with value set to v.
func NewOptNilNosqlUpdateRequestApplianceSettingsBackup(v NosqlUpdateRequestApplianceSettingsBackup) OptNilNosqlUpdateRequestApplianceSettingsBackup {
	return OptNilNosqlUpdateRequestApplianceSettingsBackup{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlUpdateRequestApplianceSettingsBackup is optional nullable NosqlUpdateRequestApplianceSettingsBackup.
type OptNilNosqlUpdateRequestApplianceSettingsBackup struct {
	Value NosqlUpdateRequestApplianceSettingsBackup
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlUpdateRequestApplianceSettingsBackup was set.
func (o OptNilNosqlUpdateRequestApplianceSettingsBackup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlUpdateRequestApplianceSettingsBackup) Reset() {
	var v NosqlUpdateRequestApplianceSettingsBackup
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlUpdateRequestApplianceSettingsBackup) SetTo(v NosqlUpdateRequestApplianceSettingsBackup) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlUpdateRequestApplianceSettingsBackup) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilNosqlUpdateRequestApplianceSettingsBackup) SetToNull() {
	o.Set = true
	o.Null = true
	var v NosqlUpdateRequestApplianceSettingsBackup
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlUpdateRequestApplianceSettingsBackup) Get() (v NosqlUpdateRequestApplianceSettingsBackup, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlUpdateRequestApplianceSettingsBackup) Or(d NosqlUpdateRequestApplianceSettingsBackup) NosqlUpdateRequestApplianceSettingsBackup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray returns new OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray with value set to v.
func NewOptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray(v []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem) OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray {
	return OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray is optional nullable []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem.
type OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray struct {
	Value []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray was set.
func (o OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray) Reset() {
	var v []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray) SetTo(v []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray) IsNull() bool {
	return o.Null
}

// SetToNull sets value to null.
func (o *OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray) Get() (v []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNosqlUpdateRequestApplianceSettingsBackupDayOfWeekItemArray) Or(d []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem) []NosqlUpdateRequestApplianceSettingsBackupDayOfWeekItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTags returns new OptNilTags with value set to v.
func NewOptNilTags(v Tags) OptNilTags {
	return OptNilTags{
		Value: v,
		Set:   true,
	}
}

// OptNilTags is optional nullable Tags.
type OptNilTags struct {
	Value Tags
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTags was set.
func (o OptNilTags) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTags) Reset() {
	var v Tags
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTags) SetTo(v Tags) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilTags) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilTags) SetToNull() {
	o.Set = true
	o.Null = true
	var v Tags
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTags) Get() (v Tags, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTags) Or(d Tags) Tags {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlAppliance returns new OptNosqlAppliance with value set to v.
func NewOptNosqlAppliance(v NosqlAppliance) OptNosqlAppliance {
	return OptNosqlAppliance{
		Value: v,
		Set:   true,
	}
}

// OptNosqlAppliance is optional NosqlAppliance.
type OptNosqlAppliance struct {
	Value NosqlAppliance
	Set   bool
}

// IsSet returns true if OptNosqlAppliance was set.
func (o OptNosqlAppliance) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlAppliance) Reset() {
	var v NosqlAppliance
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlAppliance) SetTo(v NosqlAppliance) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlAppliance) Get() (v NosqlAppliance, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlAppliance) Or(d NosqlAppliance) NosqlAppliance {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlApplianceInterfacesItemSwitch returns new OptNosqlApplianceInterfacesItemSwitch with value set to v.
func NewOptNosqlApplianceInterfacesItemSwitch(v NosqlApplianceInterfacesItemSwitch) OptNosqlApplianceInterfacesItemSwitch {
	return OptNosqlApplianceInterfacesItemSwitch{
		Value: v,
		Set:   true,
	}
}

// OptNosqlApplianceInterfacesItemSwitch is optional NosqlApplianceInterfacesItemSwitch.
type OptNosqlApplianceInterfacesItemSwitch struct {
	Value NosqlApplianceInterfacesItemSwitch
	Set   bool
}

// IsSet returns true if OptNosqlApplianceInterfacesItemSwitch was set.
func (o OptNosqlApplianceInterfacesItemSwitch) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlApplianceInterfacesItemSwitch) Reset() {
	var v NosqlApplianceInterfacesItemSwitch
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlApplianceInterfacesItemSwitch) SetTo(v NosqlApplianceInterfacesItemSwitch) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlApplianceInterfacesItemSwitch) Get() (v NosqlApplianceInterfacesItemSwitch, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlApplianceInterfacesItemSwitch) Or(d NosqlApplianceInterfacesItemSwitch) NosqlApplianceInterfacesItemSwitch {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlApplianceInterfacesItemSwitchSubnetInternet returns new OptNosqlApplianceInterfacesItemSwitchSubnetInternet with value set to v.
func NewOptNosqlApplianceInterfacesItemSwitchSubnetInternet(v NosqlApplianceInterfacesItemSwitchSubnetInternet) OptNosqlApplianceInterfacesItemSwitchSubnetInternet {
	return OptNosqlApplianceInterfacesItemSwitchSubnetInternet{
		Value: v,
		Set:   true,
	}
}

// OptNosqlApplianceInterfacesItemSwitchSubnetInternet is optional NosqlApplianceInterfacesItemSwitchSubnetInternet.
type OptNosqlApplianceInterfacesItemSwitchSubnetInternet struct {
	Value NosqlApplianceInterfacesItemSwitchSubnetInternet
	Set   bool
}

// IsSet returns true if OptNosqlApplianceInterfacesItemSwitchSubnetInternet was set.
func (o OptNosqlApplianceInterfacesItemSwitchSubnetInternet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlApplianceInterfacesItemSwitchSubnetInternet) Reset() {
	var v NosqlApplianceInterfacesItemSwitchSubnetInternet
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlApplianceInterfacesItemSwitchSubnetInternet) SetTo(v NosqlApplianceInterfacesItemSwitchSubnetInternet) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlApplianceInterfacesItemSwitchSubnetInternet) Get() (v NosqlApplianceInterfacesItemSwitchSubnetInternet, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlApplianceInterfacesItemSwitchSubnetInternet) Or(d NosqlApplianceInterfacesItemSwitchSubnetInternet) NosqlApplianceInterfacesItemSwitchSubnetInternet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlApplianceInterfacesItemSwitchUserSubnet returns new OptNosqlApplianceInterfacesItemSwitchUserSubnet with value set to v.
func NewOptNosqlApplianceInterfacesItemSwitchUserSubnet(v NosqlApplianceInterfacesItemSwitchUserSubnet) OptNosqlApplianceInterfacesItemSwitchUserSubnet {
	return OptNosqlApplianceInterfacesItemSwitchUserSubnet{
		Value: v,
		Set:   true,
	}
}

// OptNosqlApplianceInterfacesItemSwitchUserSubnet is optional NosqlApplianceInterfacesItemSwitchUserSubnet.
type OptNosqlApplianceInterfacesItemSwitchUserSubnet struct {
	Value NosqlApplianceInterfacesItemSwitchUserSubnet
	Set   bool
}

// IsSet returns true if OptNosqlApplianceInterfacesItemSwitchUserSubnet was set.
func (o OptNosqlApplianceInterfacesItemSwitchUserSubnet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlApplianceInterfacesItemSwitchUserSubnet) Reset() {
	var v NosqlApplianceInterfacesItemSwitchUserSubnet
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlApplianceInterfacesItemSwitchUserSubnet) SetTo(v NosqlApplianceInterfacesItemSwitchUserSubnet) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlApplianceInterfacesItemSwitchUserSubnet) Get() (v NosqlApplianceInterfacesItemSwitchUserSubnet, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlApplianceInterfacesItemSwitchUserSubnet) Or(d NosqlApplianceInterfacesItemSwitchUserSubnet) NosqlApplianceInterfacesItemSwitchUserSubnet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlApplianceRemark returns new OptNosqlApplianceRemark with value set to v.
func NewOptNosqlApplianceRemark(v NosqlApplianceRemark) OptNosqlApplianceRemark {
	return OptNosqlApplianceRemark{
		Value: v,
		Set:   true,
	}
}

// OptNosqlApplianceRemark is optional NosqlApplianceRemark.
type OptNosqlApplianceRemark struct {
	Value NosqlApplianceRemark
	Set   bool
}

// IsSet returns true if OptNosqlApplianceRemark was set.
func (o OptNosqlApplianceRemark) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlApplianceRemark) Reset() {
	var v NosqlApplianceRemark
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlApplianceRemark) SetTo(v NosqlApplianceRemark) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlApplianceRemark) Get() (v NosqlApplianceRemark, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlApplianceRemark) Or(d NosqlApplianceRemark) NosqlApplianceRemark {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlApplianceRemarkNosql returns new OptNosqlApplianceRemarkNosql with value set to v.
func NewOptNosqlApplianceRemarkNosql(v NosqlApplianceRemarkNosql) OptNosqlApplianceRemarkNosql {
	return OptNosqlApplianceRemarkNosql{
		Value: v,
		Set:   true,
	}
}

// OptNosqlApplianceRemarkNosql is optional NosqlApplianceRemarkNosql.
type OptNosqlApplianceRemarkNosql struct {
	Value NosqlApplianceRemarkNosql
	Set   bool
}

// IsSet returns true if OptNosqlApplianceRemarkNosql was set.
func (o OptNosqlApplianceRemarkNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlApplianceRemarkNosql) Reset() {
	var v NosqlApplianceRemarkNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlApplianceRemarkNosql) SetTo(v NosqlApplianceRemarkNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlApplianceRemarkNosql) Get() (v NosqlApplianceRemarkNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlApplianceRemarkNosql) Or(d NosqlApplianceRemarkNosql) NosqlApplianceRemarkNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlApplianceRemarkZone returns new OptNosqlApplianceRemarkZone with value set to v.
func NewOptNosqlApplianceRemarkZone(v NosqlApplianceRemarkZone) OptNosqlApplianceRemarkZone {
	return OptNosqlApplianceRemarkZone{
		Value: v,
		Set:   true,
	}
}

// OptNosqlApplianceRemarkZone is optional NosqlApplianceRemarkZone.
type OptNosqlApplianceRemarkZone struct {
	Value NosqlApplianceRemarkZone
	Set   bool
}

// IsSet returns true if OptNosqlApplianceRemarkZone was set.
func (o OptNosqlApplianceRemarkZone) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlApplianceRemarkZone) Reset() {
	var v NosqlApplianceRemarkZone
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlApplianceRemarkZone) SetTo(v NosqlApplianceRemarkZone) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlApplianceRemarkZone) Get() (v NosqlApplianceRemarkZone, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlApplianceRemarkZone) Or(d NosqlApplianceRemarkZone) NosqlApplianceRemarkZone {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlBackupResponseNosql returns new OptNosqlBackupResponseNosql with value set to v.
func NewOptNosqlBackupResponseNosql(v NosqlBackupResponseNosql) OptNosqlBackupResponseNosql {
	return OptNosqlBackupResponseNosql{
		Value: v,
		Set:   true,
	}
}

// OptNosqlBackupResponseNosql is optional NosqlBackupResponseNosql.
type OptNosqlBackupResponseNosql struct {
	Value NosqlBackupResponseNosql
	Set   bool
}

// IsSet returns true if OptNosqlBackupResponseNosql was set.
func (o OptNosqlBackupResponseNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlBackupResponseNosql) Reset() {
	var v NosqlBackupResponseNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlBackupResponseNosql) SetTo(v NosqlBackupResponseNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlBackupResponseNosql) Get() (v NosqlBackupResponseNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlBackupResponseNosql) Or(d NosqlBackupResponseNosql) NosqlBackupResponseNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet returns new OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet with value set to v.
func NewOptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet(v NosqlCreateRequestApplianceUserInterfacesItemUserSubnet) OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet {
	return OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet{
		Value: v,
		Set:   true,
	}
}

// OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet is optional NosqlCreateRequestApplianceUserInterfacesItemUserSubnet.
type OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet struct {
	Value NosqlCreateRequestApplianceUserInterfacesItemUserSubnet
	Set   bool
}

// IsSet returns true if OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet was set.
func (o OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet) Reset() {
	var v NosqlCreateRequestApplianceUserInterfacesItemUserSubnet
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet) SetTo(v NosqlCreateRequestApplianceUserInterfacesItemUserSubnet) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet) Get() (v NosqlCreateRequestApplianceUserInterfacesItemUserSubnet, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlCreateRequestApplianceUserInterfacesItemUserSubnet) Or(d NosqlCreateRequestApplianceUserInterfacesItemUserSubnet) NosqlCreateRequestApplianceUserInterfacesItemUserSubnet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlCreateResponseAccount returns new OptNosqlCreateResponseAccount with value set to v.
func NewOptNosqlCreateResponseAccount(v NosqlCreateResponseAccount) OptNosqlCreateResponseAccount {
	return OptNosqlCreateResponseAccount{
		Value: v,
		Set:   true,
	}
}

// OptNosqlCreateResponseAccount is optional NosqlCreateResponseAccount.
type OptNosqlCreateResponseAccount struct {
	Value NosqlCreateResponseAccount
	Set   bool
}

// IsSet returns true if OptNosqlCreateResponseAccount was set.
func (o OptNosqlCreateResponseAccount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlCreateResponseAccount) Reset() {
	var v NosqlCreateResponseAccount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlCreateResponseAccount) SetTo(v NosqlCreateResponseAccount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlCreateResponseAccount) Get() (v NosqlCreateResponseAccount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlCreateResponseAccount) Or(d NosqlCreateResponseAccount) NosqlCreateResponseAccount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlCreateResponseHiddenRemark returns new OptNosqlCreateResponseHiddenRemark with value set to v.
func NewOptNosqlCreateResponseHiddenRemark(v NosqlCreateResponseHiddenRemark) OptNosqlCreateResponseHiddenRemark {
	return OptNosqlCreateResponseHiddenRemark{
		Value: v,
		Set:   true,
	}
}

// OptNosqlCreateResponseHiddenRemark is optional NosqlCreateResponseHiddenRemark.
type OptNosqlCreateResponseHiddenRemark struct {
	Value NosqlCreateResponseHiddenRemark
	Set   bool
}

// IsSet returns true if OptNosqlCreateResponseHiddenRemark was set.
func (o OptNosqlCreateResponseHiddenRemark) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlCreateResponseHiddenRemark) Reset() {
	var v NosqlCreateResponseHiddenRemark
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlCreateResponseHiddenRemark) SetTo(v NosqlCreateResponseHiddenRemark) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlCreateResponseHiddenRemark) Get() (v NosqlCreateResponseHiddenRemark, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlCreateResponseHiddenRemark) Or(d NosqlCreateResponseHiddenRemark) NosqlCreateResponseHiddenRemark {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlCreateResponseHiddenRemarkEncripted returns new OptNosqlCreateResponseHiddenRemarkEncripted with value set to v.
func NewOptNosqlCreateResponseHiddenRemarkEncripted(v NosqlCreateResponseHiddenRemarkEncripted) OptNosqlCreateResponseHiddenRemarkEncripted {
	return OptNosqlCreateResponseHiddenRemarkEncripted{
		Value: v,
		Set:   true,
	}
}

// OptNosqlCreateResponseHiddenRemarkEncripted is optional NosqlCreateResponseHiddenRemarkEncripted.
type OptNosqlCreateResponseHiddenRemarkEncripted struct {
	Value NosqlCreateResponseHiddenRemarkEncripted
	Set   bool
}

// IsSet returns true if OptNosqlCreateResponseHiddenRemarkEncripted was set.
func (o OptNosqlCreateResponseHiddenRemarkEncripted) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlCreateResponseHiddenRemarkEncripted) Reset() {
	var v NosqlCreateResponseHiddenRemarkEncripted
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlCreateResponseHiddenRemarkEncripted) SetTo(v NosqlCreateResponseHiddenRemarkEncripted) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlCreateResponseHiddenRemarkEncripted) Get() (v NosqlCreateResponseHiddenRemarkEncripted, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlCreateResponseHiddenRemarkEncripted) Or(d NosqlCreateResponseHiddenRemarkEncripted) NosqlCreateResponseHiddenRemarkEncripted {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlCreateResponseHiddenRemarkPlanSpec returns new OptNosqlCreateResponseHiddenRemarkPlanSpec with value set to v.
func NewOptNosqlCreateResponseHiddenRemarkPlanSpec(v NosqlCreateResponseHiddenRemarkPlanSpec) OptNosqlCreateResponseHiddenRemarkPlanSpec {
	return OptNosqlCreateResponseHiddenRemarkPlanSpec{
		Value: v,
		Set:   true,
	}
}

// OptNosqlCreateResponseHiddenRemarkPlanSpec is optional NosqlCreateResponseHiddenRemarkPlanSpec.
type OptNosqlCreateResponseHiddenRemarkPlanSpec struct {
	Value NosqlCreateResponseHiddenRemarkPlanSpec
	Set   bool
}

// IsSet returns true if OptNosqlCreateResponseHiddenRemarkPlanSpec was set.
func (o OptNosqlCreateResponseHiddenRemarkPlanSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlCreateResponseHiddenRemarkPlanSpec) Reset() {
	var v NosqlCreateResponseHiddenRemarkPlanSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlCreateResponseHiddenRemarkPlanSpec) SetTo(v NosqlCreateResponseHiddenRemarkPlanSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlCreateResponseHiddenRemarkPlanSpec) Get() (v NosqlCreateResponseHiddenRemarkPlanSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlCreateResponseHiddenRemarkPlanSpec) Or(d NosqlCreateResponseHiddenRemarkPlanSpec) NosqlCreateResponseHiddenRemarkPlanSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlCreateResponseHiddenRemarkPlanSpecNote returns new OptNosqlCreateResponseHiddenRemarkPlanSpecNote with value set to v.
func NewOptNosqlCreateResponseHiddenRemarkPlanSpecNote(v NosqlCreateResponseHiddenRemarkPlanSpecNote) OptNosqlCreateResponseHiddenRemarkPlanSpecNote {
	return OptNosqlCreateResponseHiddenRemarkPlanSpecNote{
		Value: v,
		Set:   true,
	}
}

// OptNosqlCreateResponseHiddenRemarkPlanSpecNote is optional NosqlCreateResponseHiddenRemarkPlanSpecNote.
type OptNosqlCreateResponseHiddenRemarkPlanSpecNote struct {
	Value NosqlCreateResponseHiddenRemarkPlanSpecNote
	Set   bool
}

// IsSet returns true if OptNosqlCreateResponseHiddenRemarkPlanSpecNote was set.
func (o OptNosqlCreateResponseHiddenRemarkPlanSpecNote) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlCreateResponseHiddenRemarkPlanSpecNote) Reset() {
	var v NosqlCreateResponseHiddenRemarkPlanSpecNote
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlCreateResponseHiddenRemarkPlanSpecNote) SetTo(v NosqlCreateResponseHiddenRemarkPlanSpecNote) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlCreateResponseHiddenRemarkPlanSpecNote) Get() (v NosqlCreateResponseHiddenRemarkPlanSpecNote, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlCreateResponseHiddenRemarkPlanSpecNote) Or(d NosqlCreateResponseHiddenRemarkPlanSpecNote) NosqlCreateResponseHiddenRemarkPlanSpecNote {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlGetVersionResponseNosql returns new OptNosqlGetVersionResponseNosql with value set to v.
func NewOptNosqlGetVersionResponseNosql(v NosqlGetVersionResponseNosql) OptNosqlGetVersionResponseNosql {
	return OptNosqlGetVersionResponseNosql{
		Value: v,
		Set:   true,
	}
}

// OptNosqlGetVersionResponseNosql is optional NosqlGetVersionResponseNosql.
type OptNosqlGetVersionResponseNosql struct {
	Value NosqlGetVersionResponseNosql
	Set   bool
}

// IsSet returns true if OptNosqlGetVersionResponseNosql was set.
func (o OptNosqlGetVersionResponseNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlGetVersionResponseNosql) Reset() {
	var v NosqlGetVersionResponseNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlGetVersionResponseNosql) SetTo(v NosqlGetVersionResponseNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlGetVersionResponseNosql) Get() (v NosqlGetVersionResponseNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlGetVersionResponseNosql) Or(d NosqlGetVersionResponseNosql) NosqlGetVersionResponseNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlIsOkResponseNosql returns new OptNosqlIsOkResponseNosql with value set to v.
func NewOptNosqlIsOkResponseNosql(v NosqlIsOkResponseNosql) OptNosqlIsOkResponseNosql {
	return OptNosqlIsOkResponseNosql{
		Value: v,
		Set:   true,
	}
}

// OptNosqlIsOkResponseNosql is optional NosqlIsOkResponseNosql.
type OptNosqlIsOkResponseNosql struct {
	Value NosqlIsOkResponseNosql
	Set   bool
}

// IsSet returns true if OptNosqlIsOkResponseNosql was set.
func (o OptNosqlIsOkResponseNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlIsOkResponseNosql) Reset() {
	var v NosqlIsOkResponseNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlIsOkResponseNosql) SetTo(v NosqlIsOkResponseNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlIsOkResponseNosql) Get() (v NosqlIsOkResponseNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlIsOkResponseNosql) Or(d NosqlIsOkResponseNosql) NosqlIsOkResponseNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlOkResponseNosql returns new OptNosqlOkResponseNosql with value set to v.
func NewOptNosqlOkResponseNosql(v NosqlOkResponseNosql) OptNosqlOkResponseNosql {
	return OptNosqlOkResponseNosql{
		Value: v,
		Set:   true,
	}
}

// OptNosqlOkResponseNosql is optional NosqlOkResponseNosql.
type OptNosqlOkResponseNosql struct {
	Value NosqlOkResponseNosql
	Set   bool
}

// IsSet returns true if OptNosqlOkResponseNosql was set.
func (o OptNosqlOkResponseNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlOkResponseNosql) Reset() {
	var v NosqlOkResponseNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlOkResponseNosql) SetTo(v NosqlOkResponseNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlOkResponseNosql) Get() (v NosqlOkResponseNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlOkResponseNosql) Or(d NosqlOkResponseNosql) NosqlOkResponseNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlPutVersionResponseNosql returns new OptNosqlPutVersionResponseNosql with value set to v.
func NewOptNosqlPutVersionResponseNosql(v NosqlPutVersionResponseNosql) OptNosqlPutVersionResponseNosql {
	return OptNosqlPutVersionResponseNosql{
		Value: v,
		Set:   true,
	}
}

// OptNosqlPutVersionResponseNosql is optional NosqlPutVersionResponseNosql.
type OptNosqlPutVersionResponseNosql struct {
	Value NosqlPutVersionResponseNosql
	Set   bool
}

// IsSet returns true if OptNosqlPutVersionResponseNosql was set.
func (o OptNosqlPutVersionResponseNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlPutVersionResponseNosql) Reset() {
	var v NosqlPutVersionResponseNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlPutVersionResponseNosql) SetTo(v NosqlPutVersionResponseNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlPutVersionResponseNosql) Get() (v NosqlPutVersionResponseNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlPutVersionResponseNosql) Or(d NosqlPutVersionResponseNosql) NosqlPutVersionResponseNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlRemark returns new OptNosqlRemark with value set to v.
func NewOptNosqlRemark(v NosqlRemark) OptNosqlRemark {
	return OptNosqlRemark{
		Value: v,
		Set:   true,
	}
}

// OptNosqlRemark is optional NosqlRemark.
type OptNosqlRemark struct {
	Value NosqlRemark
	Set   bool
}

// IsSet returns true if OptNosqlRemark was set.
func (o OptNosqlRemark) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlRemark) Reset() {
	var v NosqlRemark
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlRemark) SetTo(v NosqlRemark) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlRemark) Get() (v NosqlRemark, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlRemark) Or(d NosqlRemark) NosqlRemark {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlRemarkNosql returns new OptNosqlRemarkNosql with value set to v.
func NewOptNosqlRemarkNosql(v NosqlRemarkNosql) OptNosqlRemarkNosql {
	return OptNosqlRemarkNosql{
		Value: v,
		Set:   true,
	}
}

// OptNosqlRemarkNosql is optional NosqlRemarkNosql.
type OptNosqlRemarkNosql struct {
	Value NosqlRemarkNosql
	Set   bool
}

// IsSet returns true if OptNosqlRemarkNosql was set.
func (o OptNosqlRemarkNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlRemarkNosql) Reset() {
	var v NosqlRemarkNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlRemarkNosql) SetTo(v NosqlRemarkNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlRemarkNosql) Get() (v NosqlRemarkNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlRemarkNosql) Or(d NosqlRemarkNosql) NosqlRemarkNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlSettings returns new OptNosqlSettings with value set to v.
func NewOptNosqlSettings(v NosqlSettings) OptNosqlSettings {
	return OptNosqlSettings{
		Value: v,
		Set:   true,
	}
}

// OptNosqlSettings is optional NosqlSettings.
type OptNosqlSettings struct {
	Value NosqlSettings
	Set   bool
}

// IsSet returns true if OptNosqlSettings was set.
func (o OptNosqlSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlSettings) Reset() {
	var v NosqlSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlSettings) SetTo(v NosqlSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlSettings) Get() (v NosqlSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlSettings) Or(d NosqlSettings) NosqlSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNosqlStatusResponseApplianceSettingsResponseNosql returns new OptNosqlStatusResponseApplianceSettingsResponseNosql with value set to v.
func NewOptNosqlStatusResponseApplianceSettingsResponseNosql(v NosqlStatusResponseApplianceSettingsResponseNosql) OptNosqlStatusResponseApplianceSettingsResponseNosql {
	return OptNosqlStatusResponseApplianceSettingsResponseNosql{
		Value: v,
		Set:   true,
	}
}

// OptNosqlStatusResponseApplianceSettingsResponseNosql is optional NosqlStatusResponseApplianceSettingsResponseNosql.
type OptNosqlStatusResponseApplianceSettingsResponseNosql struct {
	Value NosqlStatusResponseApplianceSettingsResponseNosql
	Set   bool
}

// IsSet returns true if OptNosqlStatusResponseApplianceSettingsResponseNosql was set.
func (o OptNosqlStatusResponseApplianceSettingsResponseNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNosqlStatusResponseApplianceSettingsResponseNosql) Reset() {
	var v NosqlStatusResponseApplianceSettingsResponseNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNosqlStatusResponseApplianceSettingsResponseNosql) SetTo(v NosqlStatusResponseApplianceSettingsResponseNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNosqlStatusResponseApplianceSettingsResponseNosql) Get() (v NosqlStatusResponseApplianceSettingsResponseNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNosqlStatusResponseApplianceSettingsResponseNosql) Or(d NosqlStatusResponseApplianceSettingsResponseNosql) NosqlStatusResponseApplianceSettingsResponseNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPassword returns new OptPassword with value set to v.
func NewOptPassword(v Password) OptPassword {
	return OptPassword{
		Value: v,
		Set:   true,
	}
}

// OptPassword is optional Password.
type OptPassword struct {
	Value Password
	Set   bool
}

// IsSet returns true if OptPassword was set.
func (o OptPassword) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPassword) Reset() {
	var v Password
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPassword) SetTo(v Password) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPassword) Get() (v Password, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPassword) Or(d Password) Password {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlan returns new OptPlan with value set to v.
func NewOptPlan(v Plan) OptPlan {
	return OptPlan{
		Value: v,
		Set:   true,
	}
}

// OptPlan is optional Plan.
type OptPlan struct {
	Value Plan
	Set   bool
}

// IsSet returns true if OptPlan was set.
func (o OptPlan) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlan) Reset() {
	var v Plan
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlan) SetTo(v Plan) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlan) Get() (v Plan, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlan) Or(d Plan) Plan {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPutParameterResponseNosql returns new OptPutParameterResponseNosql with value set to v.
func NewOptPutParameterResponseNosql(v PutParameterResponseNosql) OptPutParameterResponseNosql {
	return OptPutParameterResponseNosql{
		Value: v,
		Set:   true,
	}
}

// OptPutParameterResponseNosql is optional PutParameterResponseNosql.
type OptPutParameterResponseNosql struct {
	Value PutParameterResponseNosql
	Set   bool
}

// IsSet returns true if OptPutParameterResponseNosql was set.
func (o OptPutParameterResponseNosql) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPutParameterResponseNosql) Reset() {
	var v PutParameterResponseNosql
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPutParameterResponseNosql) SetTo(v PutParameterResponseNosql) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPutParameterResponseNosql) Get() (v PutParameterResponseNosql, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPutParameterResponseNosql) Or(d PutParameterResponseNosql) PutParameterResponseNosql {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServiceClass returns new OptServiceClass with value set to v.
func NewOptServiceClass(v ServiceClass) OptServiceClass {
	return OptServiceClass{
		Value: v,
		Set:   true,
	}
}

// OptServiceClass is optional ServiceClass.
type OptServiceClass struct {
	Value ServiceClass
	Set   bool
}

// IsSet returns true if OptServiceClass was set.
func (o OptServiceClass) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServiceClass) Reset() {
	var v ServiceClass
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServiceClass) SetTo(v ServiceClass) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServiceClass) Get() (v ServiceClass, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServiceClass) Or(d ServiceClass) ServiceClass {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSuccess returns new OptSuccess with value set to v.
func NewOptSuccess(v Success) OptSuccess {
	return OptSuccess{
		Value: v,
		Set:   true,
	}
}

// OptSuccess is optional Success.
type OptSuccess struct {
	Value Success
	Set   bool
}

// IsSet returns true if OptSuccess was set.
func (o OptSuccess) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSuccess) Reset() {
	var v Success
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSuccess) SetTo(v Success) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSuccess) Get() (v Success, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSuccess) Or(d Success) Success {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type Password string

// プラン.
// Ref: #/components/schemas/Plan
type Plan struct {
	// プランID.
	ID OptInt `json:"ID"`
}

// GetID returns the value of ID.
func (s *Plan) GetID() OptInt {
	return s.ID
}

// SetID sets the value of ID.
func (s *Plan) SetID(val OptInt) {
	s.ID = val
}

// Ref: #/components/schemas/PutParameterRequest
type PutParameterRequest struct {
	Nosql PutParameterRequestNosql `json:"nosql"`
}

// GetNosql returns the value of Nosql.
func (s *PutParameterRequest) GetNosql() PutParameterRequestNosql {
	return s.Nosql
}

// SetNosql sets the value of Nosql.
func (s *PutParameterRequest) SetNosql(val PutParameterRequestNosql) {
	s.Nosql = val
}

type PutParameterRequestNosql struct {
	Parameters []NosqlPutParameter `json:"parameters"`
}

// GetParameters returns the value of Parameters.
func (s *PutParameterRequestNosql) GetParameters() []NosqlPutParameter {
	return s.Parameters
}

// SetParameters sets the value of Parameters.
func (s *PutParameterRequestNosql) SetParameters(val []NosqlPutParameter) {
	s.Parameters = val
}

// Ref: #/components/schemas/PutParameterResponse
type PutParameterResponse struct {
	Nosql OptPutParameterResponseNosql `json:"nosql"`
	IsOk  OptIsOk                      `json:"is_ok"`
}

// GetNosql returns the value of Nosql.
func (s *PutParameterResponse) GetNosql() OptPutParameterResponseNosql {
	return s.Nosql
}

// GetIsOk returns the value of IsOk.
func (s *PutParameterResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetNosql sets the value of Nosql.
func (s *PutParameterResponse) SetNosql(val OptPutParameterResponseNosql) {
	s.Nosql = val
}

// SetIsOk sets the value of IsOk.
func (s *PutParameterResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*PutParameterResponse) putParameterRes() {}

type PutParameterResponseNosql struct {
	Parameters []NosqlPutParameter `json:"parameters"`
}

// GetParameters returns the value of Parameters.
func (s *PutParameterResponseNosql) GetParameters() []NosqlPutParameter {
	return s.Parameters
}

// SetParameters sets the value of Parameters.
func (s *PutParameterResponseNosql) SetParameters(val []NosqlPutParameter) {
	s.Parameters = val
}

// エラーレスポンス.
type ServerErrorResponse struct {
	// エラーのレスポンス(true:エラー).
	IsFatal OptBool `json:"is_fatal"`
	// 追跡コード.
	Serial OptString `json:"serial"`
	// ステータス.
	Status OptString `json:"status"`
	// エラーコード.
	ErrorCode OptString `json:"error_code"`
	// エラーメッセージ.
	ErrorMsg OptString `json:"error_msg"`
}

// GetIsFatal returns the value of IsFatal.
func (s *ServerErrorResponse) GetIsFatal() OptBool {
	return s.IsFatal
}

// GetSerial returns the value of Serial.
func (s *ServerErrorResponse) GetSerial() OptString {
	return s.Serial
}

// GetStatus returns the value of Status.
func (s *ServerErrorResponse) GetStatus() OptString {
	return s.Status
}

// GetErrorCode returns the value of ErrorCode.
func (s *ServerErrorResponse) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetErrorMsg returns the value of ErrorMsg.
func (s *ServerErrorResponse) GetErrorMsg() OptString {
	return s.ErrorMsg
}

// SetIsFatal sets the value of IsFatal.
func (s *ServerErrorResponse) SetIsFatal(val OptBool) {
	s.IsFatal = val
}

// SetSerial sets the value of Serial.
func (s *ServerErrorResponse) SetSerial(val OptString) {
	s.Serial = val
}

// SetStatus sets the value of Status.
func (s *ServerErrorResponse) SetStatus(val OptString) {
	s.Status = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ServerErrorResponse) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetErrorMsg sets the value of ErrorMsg.
func (s *ServerErrorResponse) SetErrorMsg(val OptString) {
	s.ErrorMsg = val
}

func (*ServerErrorResponse) confirmStatusDBRes()        {}
func (*ServerErrorResponse) createBackupRes()           {}
func (*ServerErrorResponse) createDBRes()               {}
func (*ServerErrorResponse) deleteAppliancePowerRes()   {}
func (*ServerErrorResponse) deleteBackupRes()           {}
func (*ServerErrorResponse) deleteDBRes()               {}
func (*ServerErrorResponse) getBackupByApplianceIDRes() {}
func (*ServerErrorResponse) getDBRes()                  {}
func (*ServerErrorResponse) getParameterRes()           {}
func (*ServerErrorResponse) getVersionRes()             {}
func (*ServerErrorResponse) listDBRes()                 {}
func (*ServerErrorResponse) putAppliancePowerRes()      {}
func (*ServerErrorResponse) putParameterRes()           {}
func (*ServerErrorResponse) putVersionRes()             {}
func (*ServerErrorResponse) restoreBackupRes()          {}
func (*ServerErrorResponse) updateDBRes()               {}

type ServiceClass string

type Success bool

// Ref: #/components/schemas/SuccessResponse
type SuccessResponse struct {
	Success OptSuccess `json:"Success"`
	IsOk    OptIsOk    `json:"is_ok"`
}

// GetSuccess returns the value of Success.
func (s *SuccessResponse) GetSuccess() OptSuccess {
	return s.Success
}

// GetIsOk returns the value of IsOk.
func (s *SuccessResponse) GetIsOk() OptIsOk {
	return s.IsOk
}

// SetSuccess sets the value of Success.
func (s *SuccessResponse) SetSuccess(val OptSuccess) {
	s.Success = val
}

// SetIsOk sets the value of IsOk.
func (s *SuccessResponse) SetIsOk(val OptIsOk) {
	s.IsOk = val
}

func (*SuccessResponse) deleteAppliancePowerRes() {}
func (*SuccessResponse) putAppliancePowerRes()    {}

type Tags []string

// エラーレスポンス.
type UnauthorizedResponse struct {
	// エラーのレスポンス(true:エラー).
	IsFatal OptBool `json:"is_fatal"`
	// 追跡コード.
	Serial OptString `json:"serial"`
	// ステータス.
	Status OptString `json:"status"`
	// エラーコード.
	ErrorCode OptString `json:"error_code"`
	// エラーメッセージ.
	ErrorMsg OptString `json:"error_msg"`
}

// GetIsFatal returns the value of IsFatal.
func (s *UnauthorizedResponse) GetIsFatal() OptBool {
	return s.IsFatal
}

// GetSerial returns the value of Serial.
func (s *UnauthorizedResponse) GetSerial() OptString {
	return s.Serial
}

// GetStatus returns the value of Status.
func (s *UnauthorizedResponse) GetStatus() OptString {
	return s.Status
}

// GetErrorCode returns the value of ErrorCode.
func (s *UnauthorizedResponse) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetErrorMsg returns the value of ErrorMsg.
func (s *UnauthorizedResponse) GetErrorMsg() OptString {
	return s.ErrorMsg
}

// SetIsFatal sets the value of IsFatal.
func (s *UnauthorizedResponse) SetIsFatal(val OptBool) {
	s.IsFatal = val
}

// SetSerial sets the value of Serial.
func (s *UnauthorizedResponse) SetSerial(val OptString) {
	s.Serial = val
}

// SetStatus sets the value of Status.
func (s *UnauthorizedResponse) SetStatus(val OptString) {
	s.Status = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *UnauthorizedResponse) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetErrorMsg sets the value of ErrorMsg.
func (s *UnauthorizedResponse) SetErrorMsg(val OptString) {
	s.ErrorMsg = val
}

func (*UnauthorizedResponse) confirmStatusDBRes()        {}
func (*UnauthorizedResponse) createBackupRes()           {}
func (*UnauthorizedResponse) createDBRes()               {}
func (*UnauthorizedResponse) deleteAppliancePowerRes()   {}
func (*UnauthorizedResponse) deleteBackupRes()           {}
func (*UnauthorizedResponse) deleteDBRes()               {}
func (*UnauthorizedResponse) getBackupByApplianceIDRes() {}
func (*UnauthorizedResponse) getDBRes()                  {}
func (*UnauthorizedResponse) getParameterRes()           {}
func (*UnauthorizedResponse) getVersionRes()             {}
func (*UnauthorizedResponse) listDBRes()                 {}
func (*UnauthorizedResponse) putAppliancePowerRes()      {}
func (*UnauthorizedResponse) putParameterRes()           {}
func (*UnauthorizedResponse) putVersionRes()             {}
func (*UnauthorizedResponse) restoreBackupRes()          {}
func (*UnauthorizedResponse) updateDBRes()               {}
